[
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1041_Q1",
    "context": "Bob is cold. Bob is quiet. Bob is red. Bob is smart. Charlie is kind. Charlie is quiet. Charlie is red. Charlie is rough. Dave is cold. Dave is kind. Dave is smart. Fiona is quiet. If something is quiet and cold then it is smart. Red, cold things are round. If something is kind and rough then it is red. All quiet things are rough. Cold, smart things are red. If something is rough then it is cold. All red things are rough. If Dave is smart and Dave is kind then Dave is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is kind.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Cold($x, bool) ::: Is x cold?\n  Quiet($x, bool) ::: Is x quiet?\n  Red($x, bool) ::: Is x red?\n  Smart($x, bool) ::: Is x smart?\n  Kind($x, bool) ::: Is x kind?\n  Rough($x, bool) ::: Is x rough?\n  Round($x, bool) ::: Is x round?\nWe have following known facts from the context:\n  Cold(Bob, True)\n  Quiet(Bob, True)\n  Red(Bob, True)\n  Smart(Bob, True)\n  Kind(Charlie, True)\n  Quiet(Charlie, True)\n  Red(Charlie, True)\n  Rough(Charlie, True)\n  Cold(Dave, True)\n  Kind(Dave, True)\n  Smart(Dave, True)\n  Quiet(Fiona, True)\nWe have following known rules from the context:\n  rule1: Quiet($x, True) && Cold($x, True) >>> Smart($x, True)\n  rule2: Red($x, True) && Cold($x, True) >>> Round($x, True)\n  rule3: Kind($x, True) && Rough($x, True) >>> Red($x, True)\n  rule4: Quiet($x, True) >>> Rough($x, True)\n  rule5: Cold($x, True) && Smart($x, True) >>> Red($x, True)\n  rule6: Rough($x, True) >>> Cold($x, True)\n  rule7: Red($x, True) >>> Rough($x, True)\n  rule8: Smart(Dave, True) && Kind(Dave, True) >>> Quiet(Dave, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Quiet($x, True) && Cold($x, True) >>> Smart($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Smart('Bob', True)\nUnbind $x\nBind $x to 'Charlie'\nUnbind $x\nBind $x to 'Fiona'\nUnbind $x\nFinish implied with rule1\nUse rule2: Red($x, True) && Cold($x, True) >>> Round($x, True)\nBind $x to 'Bob'\nObtain a new implied fact: Round('Bob', True)\nUnbind $x\nBind $x to 'Charlie'\nUnbind $x\nFinish implied with rule2\nUse rule3: Kind($x, True) && Rough($x, True) >>> Red($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Red('Charlie', True)\nUnbind $x\nBind $x to 'Dave'\nUnbind $x\nFinish implied with rule3\nUse rule4: Quiet($x, True) >>> Rough($x, True)\nBind $x to 'Bob'\nObtain a new implied fact: Rough('Bob', True)\nReuse rule3: Kind($x, True) && Rough($x, True) >>> Red($x, True)\nBind $x to 'Bob'\nFinish implied with rule3\nUse rule6: Rough($x, True) >>> Cold($x, True)\nFinish implied with rule6\nReuse rule3: Kind($x, True) && Rough($x, True) >>> Red($x, True)\nBind $x to 'Fiona'\nFinish implied with rule3\nReuse rule6: Rough($x, True) >>> Cold($x, True)\nFinish implied with rule6\nFinish implied with rule4\nUse rule5: Cold($x, True) && Smart($x, True) >>> Red($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Red('Bob', True)\nUnbind $x\nBind $x to 'Dave'\nObtain a new implied fact: Red('Dave', True)\nReuse rule2: Red($x, True) && Cold($x, True) >>> Round($x, True)\nBind $x to 'Dave'\nObtain a new implied fact: Round('Dave', True)\nFinish implied with rule2\nUse rule7: Red($x, True) >>> Rough($x, True)\nFinish implied with rule7\nFinish implied with rule5\nReuse rule6: Rough($x, True) >>> Cold($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Cold('Charlie', True)\nReuse rule1: Quiet($x, True) && Cold($x, True) >>> Smart($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Smart('Charlie', True)\nReuse rule5: Cold($x, True) && Smart($x, True) >>> Red($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Red('Charlie', True)\nFinish implied with rule5\nUse rule8: Smart(Dave, True) && Kind(Dave, True) >>> Quiet(Dave, True)\nFinish implied with rule8\nFinish implied with rule1\nReuse rule2: Red($x, True) && Cold($x, True) >>> Round($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Round('Charlie', True)\nFinish implied with rule2\nReuse rule5: Cold($x, True) && Smart($x, True) >>> Red($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Red('Charlie', True)\nFinish implied with rule5\nReuse rule1: Quiet($x, True) && Cold($x, True) >>> Smart($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Smart('Fiona', True)\nReuse rule5: Cold($x, True) && Smart($x, True) >>> Red($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Red('Fiona', True)\nReuse rule2: Red($x, True) && Cold($x, True) >>> Round($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Round('Fiona', True)\nFinish implied with rule2\nReuse rule7: Red($x, True) >>> Rough($x, True)\nFinish implied with rule7\nFinish implied with rule5\nReuse rule8: Smart(Dave, True) && Kind(Dave, True) >>> Quiet(Dave, True)\nFinish implied with rule8\nFinish implied with rule1\nReuse rule2: Red($x, True) && Cold($x, True) >>> Round($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Round('Fiona', True)\nFinish implied with rule2\nReuse rule5: Cold($x, True) && Smart($x, True) >>> Red($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Red('Fiona', True)\nFinish implied with rule5\nFinish implied with rule6\nReuse rule7: Red($x, True) >>> Rough($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Rough('Bob', True)\nUnbind $x\nBind $x to 'Charlie'\nObtain an already known or implied fact: Rough('Charlie', True)\nUnbind $x\nBind $x to 'Dave'\nObtain a new implied fact: Rough('Dave', True)\nReuse rule3: Kind($x, True) && Rough($x, True) >>> Red($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Red('Dave', True)\nFinish implied with rule3\nReuse rule6: Rough($x, True) >>> Cold($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Cold('Dave', True)\nFinish implied with rule6\nFinish implied with rule7\nReuse rule8: Smart(Dave, True) && Kind(Dave, True) >>> Quiet(Dave, True)\nObtain a new implied fact: Quiet('Dave', True)\nReuse rule1: Quiet($x, True) && Cold($x, True) >>> Smart($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Smart('Dave', True)\nFinish implied with rule1\nReuse rule4: Quiet($x, True) >>> Rough($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Rough('Dave', True)\nFinish implied with rule4\nFinish implied with rule8\nAll newly implied Facts: Cold('Charlie', True), Quiet('Dave', True), Red('Dave', True), Red('Fiona', True), Rough('Bob', True), Rough('Dave', True), Round('Bob', True), Round('Charlie', True), Round('Dave', True), Round('Fiona', True), Smart('Charlie', True), Smart('Fiona', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n9 Kind(Charlie).  [goal].\n43 -Kind(Charlie).  [deny(9)].\n44 Kind(Charlie).  [assumption].\n49 $F.  [resolve(43,a,44,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-81_Q11",
    "context": "The cat eats the squirrel. The cat sees the squirrel. The cow eats the squirrel. The cow sees the cat. The rabbit is round. The rabbit sees the cat. The squirrel eats the rabbit. The squirrel is cold. The squirrel needs the rabbit. The squirrel sees the cat. If someone sees the cat and they are not green then they see the cow. If the rabbit is kind and the rabbit sees the squirrel then the squirrel needs the rabbit. Rough people are cold. If someone sees the rabbit then they are not round. If someone sees the squirrel and they are not green then they need the squirrel. If someone eats the cow then they see the rabbit. If someone eats the squirrel then they are rough. If someone is cold then they eat the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat is not round.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 3)"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n3 (all x (Rough(x) -> Cold(x))).  [assumption].\n4 (all x (Sees(x,Rabbit) -> -Round(x))).  [assumption].\n6 (all x (Eats(x,Cow) -> Sees(x,Rabbit))).  [assumption].\n7 (all x (Eats(x,Squirrel) -> Rough(x))).  [assumption].\n8 (all x (Cold(x) -> Eats(x,Cow))).  [assumption].\n9 -Round(Cat).  [goal].\n10 -Eats(x,Cow) | Sees(x,Rabbit).  [clausify(6)].\n11 Eats(Cat,Squirrel).  [assumption].\n14 -Eats(x,Squirrel) | Rough(x).  [clausify(7)].\n15 -Cold(x) | Eats(x,Cow).  [clausify(8)].\n16 -Sees(x,Rabbit) | -Round(x).  [clausify(4)].\n18 Round(Cat).  [deny(9)].\n19 -Cold(x) | Sees(x,Rabbit).  [resolve(15,b,10,a)].\n21 -Rough(x) | Cold(x).  [clausify(3)].\n27 -Sees(Cat,Rabbit).  [resolve(18,a,16,b)].\n29 Sees(x,Rabbit) | -Rough(x).  [resolve(19,a,21,b)].\n31 Rough(Cat).  [resolve(14,a,11,a)].\n33 -Rough(Cat).  [resolve(29,a,27,a)].\n34 $F.  [resolve(33,a,31,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1284_Q8",
    "context": "Anne is furry. Anne is nice. Anne is smart. Bob is young. Erin is nice. Harry is smart. Harry is young. Young things are furry. Nice, furry things are green. All green things are nice. Nice, green things are big. All green things are smart. If something is big and young then it is round. All green things are big. If Harry is young then Harry is furry. Furry, smart things are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not green.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Furry($x, bool) ::: Is x furry?\n  Nice($x, bool) ::: Is x nice?\n  Smart($x, bool) ::: Is x smart?\n  Young($x, bool) ::: Is x young?\n  Green($x, bool) ::: Is x green?\n  Big($x, bool) ::: Is x big?\n  Round($x, bool) ::: Is x round?\nWe have following known facts from the context:\n  Furry(Anne, True)\n  Nice(Anne, True)\n  Smart(Anne, True)\n  Young(Bob, True)\n  Nice(Erin, True)\n  Smart(Harry, True)\n  Young(Harry, True)\nWe have following known rules from the context:\n  rule1: Young($x, True) >>> Furry($x, True)\n  rule2: Nice($x, True) && Furry($x, True) >>> Green($x, True)\n  rule3: Green($x, True) >>> Nice($x, True)\n  rule4: Nice($x, True) && Green($x, True) >>> Big($x, True)\n  rule5: Green($x, True) >>> Smart($x, True)\n  rule6: Big($x, True) && Young($x, True) >>> Round($x, True)\n  rule7: Green($x, True) >>> Big($x, True)\n  rule8: Young(Harry, True) >>> Furry(Harry, True)\n  rule9: Furry($x, True) && Smart($x, True) >>> Nice($x, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Young($x, True) >>> Furry($x, True)\nBind $x to 'Bob'\nObtain a new implied fact: Furry('Bob', True)\nUse rule2: Nice($x, True) && Furry($x, True) >>> Green($x, True)\nFinish implied with rule2\nUse rule9: Furry($x, True) && Smart($x, True) >>> Nice($x, True)\nFinish implied with rule9\nReuse rule2: Nice($x, True) && Furry($x, True) >>> Green($x, True)\nFinish implied with rule2\nReuse rule9: Furry($x, True) && Smart($x, True) >>> Nice($x, True)\nFinish implied with rule9\nFinish implied with rule1\nReuse rule2: Nice($x, True) && Furry($x, True) >>> Green($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Green('Anne', True)\nUse rule3: Green($x, True) >>> Nice($x, True)\nFinish implied with rule3\nUse rule4: Nice($x, True) && Green($x, True) >>> Big($x, True)\nFinish implied with rule4\nUse rule5: Green($x, True) >>> Smart($x, True)\nFinish implied with rule5\nUse rule7: Green($x, True) >>> Big($x, True)\nFinish implied with rule7\nFinish implied with rule2\nReuse rule3: Green($x, True) >>> Nice($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Nice('Anne', True)\nUnbind $x\nFinish implied with rule3\nReuse rule4: Nice($x, True) && Green($x, True) >>> Big($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Big('Anne', True)\nUse rule6: Big($x, True) && Young($x, True) >>> Round($x, True)\nFinish implied with rule6\nFinish implied with rule4\nReuse rule5: Green($x, True) >>> Smart($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Smart('Anne', True)\nUnbind $x\nFinish implied with rule5\nReuse rule6: Big($x, True) && Young($x, True) >>> Round($x, True)\nBind $x to 'Anne'\nUnbind $x\nFinish implied with rule6\nReuse rule7: Green($x, True) >>> Big($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Big('Anne', True)\nUnbind $x\nFinish implied with rule7\nUse rule8: Young(Harry, True) >>> Furry(Harry, True)\nObtain an already known or implied fact: Furry('Harry', True)\nFinish implied with rule8\nReuse rule9: Furry($x, True) && Smart($x, True) >>> Nice($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Nice('Anne', True)\nUnbind $x\nBind $x to 'Bob'\nUnbind $x\nBind $x to 'Harry'\nObtain a new implied fact: Nice('Harry', True)\nReuse rule2: Nice($x, True) && Furry($x, True) >>> Green($x, True)\nBind $x to 'Harry'\nObtain a new implied fact: Green('Harry', True)\nReuse rule3: Green($x, True) >>> Nice($x, True)\nBind $x to 'Harry'\nObtain an already known or implied fact: Nice('Harry', True)\nFinish implied with rule3\nReuse rule4: Nice($x, True) && Green($x, True) >>> Big($x, True)\nBind $x to 'Harry'\nObtain a new implied fact: Big('Harry', True)\nReuse rule6: Big($x, True) && Young($x, True) >>> Round($x, True)\nBind $x to 'Harry'\nObtain a new implied fact: Round('Harry', True)\nFinish implied with rule6\nFinish implied with rule4\nReuse rule5: Green($x, True) >>> Smart($x, True)\nBind $x to 'Harry'\nObtain an already known or implied fact: Smart('Harry', True)\nFinish implied with rule5\nReuse rule7: Green($x, True) >>> Big($x, True)\nBind $x to 'Harry'\nObtain an already known or implied fact: Big('Harry', True)\nFinish implied with rule7\nFinish implied with rule2\nReuse rule4: Nice($x, True) && Green($x, True) >>> Big($x, True)\nBind $x to 'Harry'\nObtain an already known or implied fact: Big('Harry', True)\nFinish implied with rule4\nFinish implied with rule9\nAll newly implied Facts: Big('Anne', True), Big('Harry', True), Furry('Bob', True), Green('Anne', True), Green('Harry', True), Nice('Harry', True), Round('Harry', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "B",
        "reasoning": "prove negation of original conclusion:\n1 (all x (Young(x) -> Furry(x))).  [assumption].\n2 (all x (Nice(x) & Furry(x) -> Green(x))).  [assumption].\n9 (all x (Furry(x) & Smart(x) -> Nice(x))).  [assumption].\n10 --Green(Harry).  [goal].\n11 -Nice(x) | -Furry(x) | Green(x).  [clausify(2)].\n13 -Young(x) | Furry(x).  [clausify(1)].\n15 -Furry(x) | -Smart(x) | Nice(x).  [clausify(9)].\n21 -Nice(x) | Green(x) | -Young(x).  [resolve(11,b,13,b)].\n23 -Smart(x) | Nice(x) | -Young(x).  [resolve(15,a,13,b)].\n26 Smart(Harry).  [assumption].\n29 -Smart(x) | -Young(x) | Green(x) | -Young(x).  [resolve(23,b,21,a)].\n36 -Green(Harry).  [deny(10)].\n39 -Young(Harry) | Green(Harry) | -Young(Harry).  [resolve(29,a,26,a)].\n42 Young(Harry).  [assumption].\n43 -Young(Harry) | -Young(Harry).  [resolve(39,b,36,a)].\n44 $F.  [copy(43),merge(b),unit_del(a,42)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-585_Q19",
    "context": "Anne is round. Bob is red. Bob is smart. Erin is furry. Erin is red. Erin is rough. Erin is smart. Fiona is big. Fiona is furry. Fiona is smart. All smart things are furry. All furry things are red. All round things are rough. If Bob is white then Bob is furry. All red, rough things are big. All rough things are smart. If Fiona is furry then Fiona is red. If Bob is round and Bob is big then Bob is furry. If Fiona is red and Fiona is white then Fiona is smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not white.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Round($x, bool) ::: Is x round?\n  Red($x, bool) ::: Is x red?\n  Smart($x, bool) ::: Is x smart?\n  Furry($x, bool) ::: Is x furry?\n  Rough($x, bool) ::: Is x rough?\n  Big($x, bool) ::: Is x big?\n  White($x, bool) ::: Is x white?\nWe have following known facts from the context:\n  Round(Anne, True)\n  Red(Bob, True)\n  Smart(Bob, True)\n  Furry(Erin, True)\n  Red(Erin, True)\n  Rough(Erin, True)\n  Smart(Erin, True)\n  Big(Fiona, True)\n  Furry(Fiona, True)\n  Smart(Fiona, True)\nWe have following known rules from the context:\n  rule1: Smart($x, True) >>> Furry($x, True)\n  rule2: Furry($x, True) >>> Red($x, True)\n  rule3: Round($x, True) >>> Rough($x, True)\n  rule4: White(Bob, True) >>> Furry(Bob, True)\n  rule5: Red($x, True) && Rough($x, True) >>> Big($x, True)\n  rule6: Rough($x, True) >>> Smart($x, True)\n  rule7: Furry(Fiona, True) >>> Red(Fiona, True)\n  rule8: Round(Bob, True) && Big(Bob, True) >>> Furry(Bob, True)\n  rule9: Red(Fiona, True) && White(Fiona, True) >>> Smart(Fiona, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Smart($x, True) >>> Furry($x, True)\nBind $x to 'Bob'\nObtain a new implied fact: Furry('Bob', True)\nUse rule2: Furry($x, True) >>> Red($x, True)\nFinish implied with rule2\nUse rule7: Furry(Fiona, True) >>> Red(Fiona, True)\nFinish implied with rule7\nFinish implied with rule1\nReuse rule2: Furry($x, True) >>> Red($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Red('Erin', True)\nUnbind $x\nBind $x to 'Fiona'\nObtain a new implied fact: Red('Fiona', True)\nUse rule5: Red($x, True) && Rough($x, True) >>> Big($x, True)\nFinish implied with rule5\nUse rule9: Red(Fiona, True) && White(Fiona, True) >>> Smart(Fiona, True)\nFinish implied with rule9\nFinish implied with rule2\nUse rule3: Round($x, True) >>> Rough($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Rough('Anne', True)\nReuse rule5: Red($x, True) && Rough($x, True) >>> Big($x, True)\nFinish implied with rule5\nUse rule6: Rough($x, True) >>> Smart($x, True)\nFinish implied with rule6\nFinish implied with rule3\nUse rule4: White(Bob, True) >>> Furry(Bob, True)\nFinish implied with rule4\nReuse rule5: Red($x, True) && Rough($x, True) >>> Big($x, True)\nBind $x to 'Bob'\nUnbind $x\nBind $x to 'Erin'\nObtain a new implied fact: Big('Erin', True)\nUse rule8: Round(Bob, True) && Big(Bob, True) >>> Furry(Bob, True)\nFinish implied with rule8\nFinish implied with rule5\nReuse rule6: Rough($x, True) >>> Smart($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Smart('Erin', True)\nUnbind $x\nBind $x to 'Anne'\nObtain a new implied fact: Smart('Anne', True)\nReuse rule1: Smart($x, True) >>> Furry($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Furry('Anne', True)\nReuse rule2: Furry($x, True) >>> Red($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Red('Anne', True)\nReuse rule5: Red($x, True) && Rough($x, True) >>> Big($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Big('Anne', True)\nReuse rule8: Round(Bob, True) && Big(Bob, True) >>> Furry(Bob, True)\nFinish implied with rule8\nFinish implied with rule5\nReuse rule9: Red(Fiona, True) && White(Fiona, True) >>> Smart(Fiona, True)\nFinish implied with rule9\nFinish implied with rule2\nReuse rule7: Furry(Fiona, True) >>> Red(Fiona, True)\nFinish implied with rule7\nFinish implied with rule1\nFinish implied with rule6\nReuse rule7: Furry(Fiona, True) >>> Red(Fiona, True)\nObtain an already known or implied fact: Red('Fiona', True)\nFinish implied with rule7\nReuse rule8: Round(Bob, True) && Big(Bob, True) >>> Furry(Bob, True)\nFinish implied with rule8\nReuse rule9: Red(Fiona, True) && White(Fiona, True) >>> Smart(Fiona, True)\nFinish implied with rule9\nAll newly implied Facts: Big('Anne', True), Big('Erin', True), Furry('Anne', True), Furry('Bob', True), Red('Anne', True), Red('Fiona', True), Rough('Anne', True), Smart('Anne', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Smart(x) -> Furry(x))) # label(non_clause). [assumption].\n2 (all x (Furry(x) -> Red(x))) # label(non_clause). [assumption].\n3 (all x (Round(x) -> Rough(x))) # label(non_clause). [assumption].\n4 White(Bob) -> Furry(Bob) # label(non_clause). [assumption].\n5 (all x (Red(x) & Rough(x) -> Big(x))) # label(non_clause). [assumption].\n6 (all x (Rough(x) -> Smart(x))) # label(non_clause). [assumption].\n7 Furry(Fiona) -> Red(Fiona) # label(non_clause). [assumption].\n8 Round(Bob) & Big(Bob) -> Furry(Bob) # label(non_clause). [assumption].\n9 Red(Fiona) & White(Fiona) -> Smart(Fiona) # label(non_clause). [assumption].\n10 -White(Bob) # label(non_clause) # label(goal). [goal].\n11 Round(Anne). [assumption].\n12 Red(Bob). [assumption].\n13 Smart(Bob). [assumption].\n14 Furry(Erin). [assumption].\n15 Red(Erin). [assumption].\n16 Rough(Erin). [assumption].\n17 Smart(Erin). [assumption].\n18 Big(Fiona). [assumption].\n19 Furry(Fiona). [assumption].\n20 Smart(Fiona). [assumption].\n21 -Smart(x) | Furry(x). [clausify(1)].\n22 -Furry(x) | Red(x). [clausify(2)].\n23 -Round(x) | Rough(x). [clausify(3)].\n24 -White(Bob) | Furry(Bob). [clausify(4)].\n25 -Red(x) | -Rough(x) | Big(x). [clausify(5)].\n26 -Rough(x) | Smart(x). [clausify(6)].\n27 -Furry(Fiona) | Red(Fiona). [clausify(7)].\n28 -Round(Bob) | -Big(Bob) | Furry(Bob). [clausify(8)].\n29 -Red(Fiona) | -White(Fiona) | Smart(Fiona). [clausify(9)].\n30 White(Bob). [deny(10)].\n31 Derived: Rough(Anne). [resolve(23,a,11,a)].\n32 Derived: -Rough(Bob) | Big(Bob). [resolve(25,a,12,a)].\n33 Derived: -Rough(Erin) | Big(Erin). [resolve(25,a,15,a)].\n34 Derived: -Rough(x) | Big(x) | -Furry(x). [resolve(25,a,22,b)].\n35 Derived: -White(Fiona) | Smart(Fiona) | -Furry(Fiona). [resolve(29,a,22,b)].\n36 Derived: Furry(Bob). [resolve(21,a,13,a)].\n37 Derived: Furry(Erin). [resolve(21,a,17,a)].\n38 Derived: Furry(Fiona). [resolve(21,a,20,a)].\n39 Derived: -Rough(x) | Furry(x). [resolve(26,b,21,a)].\n40 Derived: -Rough(Erin) | Big(Erin). [resolve(34,c,14,a)].\n41 Derived: -Rough(Fiona) | Big(Fiona). [resolve(34,c,19,a)].\n42 Derived: -Rough(Bob) | Big(Bob) | -White(Bob). [resolve(34,c,24,b)].\n43 Derived: -Rough(Bob) | Big(Bob). [resolve(36,a,34,c)].\n44 Derived: -Rough(x) | -Rough(x) | Big(x). [resolve(39,b,34,c)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Smart(x) -> Furry(x))) # label(non_clause). [assumption].\n2 (all x (Furry(x) -> Red(x))) # label(non_clause). [assumption].\n3 (all x (Round(x) -> Rough(x))) # label(non_clause). [assumption].\n4 White(Bob) -> Furry(Bob) # label(non_clause). [assumption].\n5 (all x (Red(x) & Rough(x) -> Big(x))) # label(non_clause). [assumption].\n6 (all x (Rough(x) -> Smart(x))) # label(non_clause). [assumption].\n7 Furry(Fiona) -> Red(Fiona) # label(non_clause). [assumption].\n8 Round(Bob) & Big(Bob) -> Furry(Bob) # label(non_clause). [assumption].\n9 Red(Fiona) & White(Fiona) -> Smart(Fiona) # label(non_clause). [assumption].\n10 --White(Bob) # label(non_clause) # label(goal). [goal].\n11 Round(Anne). [assumption].\n12 Red(Bob). [assumption].\n13 Smart(Bob). [assumption].\n14 Furry(Erin). [assumption].\n15 Red(Erin). [assumption].\n16 Rough(Erin). [assumption].\n17 Smart(Erin). [assumption].\n18 Big(Fiona). [assumption].\n19 Furry(Fiona). [assumption].\n20 Smart(Fiona). [assumption].\n21 -Smart(x) | Furry(x). [clausify(1)].\n22 -Furry(x) | Red(x). [clausify(2)].\n23 -Round(x) | Rough(x). [clausify(3)].\n24 -White(Bob) | Furry(Bob). [clausify(4)].\n25 -Red(x) | -Rough(x) | Big(x). [clausify(5)].\n26 -Rough(x) | Smart(x). [clausify(6)].\n27 -Furry(Fiona) | Red(Fiona). [clausify(7)].\n28 -Round(Bob) | -Big(Bob) | Furry(Bob). [clausify(8)].\n29 -Red(Fiona) | -White(Fiona) | Smart(Fiona). [clausify(9)].\n30 -White(Bob). [deny(10)].\n31 Derived: Rough(Anne). [resolve(23,a,11,a)].\n32 Derived: -Rough(Bob) | Big(Bob). [resolve(25,a,12,a)].\n33 Derived: -Rough(Erin) | Big(Erin). [resolve(25,a,15,a)].\n34 Derived: -Rough(x) | Big(x) | -Furry(x). [resolve(25,a,22,b)].\n35 Derived: -White(Fiona) | Smart(Fiona) | -Furry(Fiona). [resolve(29,a,22,b)].\n36 Derived: Furry(Bob). [resolve(21,a,13,a)].\n37 Derived: Furry(Erin). [resolve(21,a,17,a)].\n38 Derived: Furry(Fiona). [resolve(21,a,20,a)].\n39 Derived: -Rough(x) | Furry(x). [resolve(26,b,21,a)].\n40 Derived: -Rough(Erin) | Big(Erin). [resolve(34,c,14,a)].\n41 Derived: -Rough(Fiona) | Big(Fiona). [resolve(34,c,19,a)].\n42 Derived: -Rough(Bob) | Big(Bob) | -White(Bob). [resolve(34,c,24,b)].\n43 Derived: -Rough(Bob) | Big(Bob). [resolve(36,a,34,c)].\n44 Derived: -Rough(x) | -Rough(x) | Big(x). [resolve(39,b,34,c)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "No Output"
      }
    }
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-949_Q8",
    "context": "The bear is green. The bear likes the cat. The bear likes the dog. The bear visits the dog. The cat is young. The cat sees the bear. The cat sees the dog. The cat visits the bear. The cat visits the mouse. The dog is round. The dog likes the bear. The dog likes the mouse. The dog visits the mouse. The mouse is big. The mouse is cold. The mouse is round. If something visits the mouse and the mouse visits the dog then it is cold. If something likes the cat then it visits the dog. If something is cold then it likes the cat. If something is green then it sees the dog. If something likes the mouse then it sees the cat. If something is green and cold then it likes the cat. If something is big and it visits the bear then the bear is green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat is not cold.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 3)"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "'NoneType' object has no attribute 'rstrip'"
      },
      "SAT": {
        "predict": "B",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-508_Q2",
    "context": "The bald eagle is big. The bald eagle is cold. The bald eagle is young. The cat is not kind. The cow is red. The cow likes the bald eagle. The squirrel visits the bald eagle. If something likes the cow then the cow likes the squirrel. All big things are cold. If the squirrel is red then the squirrel is young. If something likes the squirrel then the squirrel is red. If something is young then it likes the cow. If the squirrel likes the cat and the cow does not chase the squirrel then the cat likes the cow. If something visits the squirrel and the squirrel is big then it does not like the squirrel. If something is big then it visits the cow. If something visits the squirrel and it is not red then the squirrel does not visit the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow is not red.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 34)"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "prove negation of original conclusion:\n10 --Red(Cow).  [goal].\n18 -Red(Cow).  [deny(10)].\n19 Red(Cow).  [assumption].\n26 $F.  [resolve(18,a,19,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-270_Q8",
    "context": "Charlie is green. Dave is quiet. Dave is red. Dave is not white. Erin is not big. Erin is not cold. Erin is green. Harry is big. Harry is cold. Harry is green. If someone is red then they are not white. If Charlie is quiet then Charlie is blue. If someone is quiet and red then they are blue. All white people are cold. All green people are quiet. All blue, green people are red. If someone is red and not white then they are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not red.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 15)"
      },
      "FOL": {
        "predict": "B",
        "reasoning": "prove negation of original conclusion:\n2 Quiet(Charlie) -> Blue(Charlie).  [assumption].\n5 (all x (Green(x) -> Quiet(x))).  [assumption].\n6 (all x (Blue(x) & Green(x) -> Red(x))).  [assumption].\n8 --Red(Charlie).  [goal].\n9 -Green(x) | Quiet(x).  [clausify(5)].\n10 Green(Charlie).  [assumption].\n13 -Blue(x) | -Green(x) | Red(x).  [clausify(6)].\n14 -Quiet(Charlie) | Blue(Charlie).  [clausify(2)].\n17 Quiet(Charlie).  [resolve(9,a,10,a)].\n23 -Red(Charlie).  [deny(8)].\n24 -Blue(Charlie) | Red(Charlie).  [resolve(13,b,10,a)].\n50 Blue(Charlie).  [resolve(17,a,14,a)].\n51 -Blue(Charlie).  [resolve(24,b,23,a)].\n52 $F.  [copy(51),unit_del(a,50)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-487_Q19",
    "context": "The cat chases the lion. The cat is rough. The cat is young. The cat needs the lion. The cat needs the rabbit. The dog is green. The dog is young. The dog likes the cat. The lion is blue. The lion is green. The rabbit chases the lion. The rabbit is blue. The rabbit is rough. The rabbit likes the dog. The rabbit needs the dog. The rabbit needs the lion. If someone chases the lion then they are round. If the lion needs the rabbit and the rabbit chases the dog then the lion likes the dog. If someone is round and they chase the lion then they need the cat. If someone needs the cat and they chase the dog then they like the rabbit. If someone chases the lion and the lion is blue then the lion is round. If someone chases the rabbit then they are rough. If someone is rough and they like the rabbit then the rabbit is young. If the rabbit chases the cat and the cat needs the lion then the rabbit is young. If someone is round and they need the cat then they chase the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not like the cat.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 9)"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Chases(x,Lion) -> Round(x))) # label(non_clause). [assumption].\n2 Needs(Lion,Rabbit) & Chases(Rabbit,Dog) -> Likes(Lion,Dog) # label(non_clause). [assumption].\n3 (all x (Round(x) & Chases(x,Lion) -> Needs(x,Cat))) # label(non_clause). [assumption].\n4 (all x (Needs(x,Cat) & Chases(x,Dog) -> Likes(x,Rabbit))) # label(non_clause). [assumption].\n5 (all x (Chases(x,Lion) & Blue(Lion) -> Round(Lion))) # label(non_clause). [assumption].\n6 (all x (Chases(x,Rabbit) -> Rough(x))) # label(non_clause). [assumption].\n7 (all x (Rough(x) & Likes(x,Rabbit) -> Young(Rabbit))) # label(non_clause). [assumption].\n8 Chases(Rabbit,Cat) & Needs(Cat,Lion) -> Young(Rabbit) # label(non_clause). [assumption].\n9 (all x (Round(x) & Needs(x,Cat) -> Chases(x,Dog))) # label(non_clause). [assumption].\n10 -Likes(Lion,Cat) # label(non_clause) # label(goal). [goal].\n11 Chases(Cat,Lion). [assumption].\n12 Rough(Cat). [assumption].\n13 Young(Cat). [assumption].\n14 Needs(Cat,Lion). [assumption].\n15 Needs(Cat,Rabbit). [assumption].\n16 Green(Dog). [assumption].\n17 Young(Dog). [assumption].\n18 Likes(Dog,Cat). [assumption].\n19 Blue(Lion). [assumption].\n20 Green(Lion). [assumption].\n21 Chases(Rabbit,Lion). [assumption].\n22 Blue(Rabbit). [assumption].\n23 Rough(Rabbit). [assumption].\n24 Likes(Rabbit,Dog). [assumption].\n25 Needs(Rabbit,Dog). [assumption].\n26 Needs(Rabbit,Lion). [assumption].\n27 -Chases(x,Lion) | Round(x). [clausify(1)].\n28 -Needs(Lion,Rabbit) | -Chases(Rabbit,Dog) | Likes(Lion,Dog). [clausify(2)].\n29 -Round(x) | -Chases(x,Lion) | Needs(x,Cat). [clausify(3)].\n30 -Needs(x,Cat) | -Chases(x,Dog) | Likes(x,Rabbit). [clausify(4)].\n31 -Chases(x,Lion) | -Blue(Lion) | Round(Lion). [clausify(5)].\n32 -Chases(x,Rabbit) | Rough(x). [clausify(6)].\n33 -Rough(x) | -Likes(x,Rabbit) | Young(Rabbit). [clausify(7)].\n34 -Chases(Rabbit,Cat) | -Needs(Cat,Lion) | Young(Rabbit). [clausify(8)].\n35 -Round(x) | -Needs(x,Cat) | Chases(x,Dog). [clausify(9)].\n36 Likes(Lion,Cat). [deny(10)].\n37 Derived: Round(Cat). [resolve(27,a,11,a)].\n38 Derived: Round(Rabbit). [resolve(27,a,21,a)].\n39 Derived: -Round(Cat) | Needs(Cat,Cat). [resolve(29,b,11,a)].\n40 Derived: -Round(Rabbit) | Needs(Rabbit,Cat). [resolve(29,b,21,a)].\n41 Derived: -Blue(Lion) | Round(Lion). [resolve(31,a,11,a)].\n42 Derived: -Round(Rabbit) | -Needs(Rabbit,Cat) | -Needs(Lion,Rabbit) | Likes(Lion,Dog). [resolve(35,c,28,b)].\n43 Derived: -Round(x) | -Needs(x,Cat) | -Needs(x,Cat) | Likes(x,Rabbit). [resolve(35,c,30,b)].\n44 Derived: -Likes(Cat,Rabbit) | Young(Rabbit). [resolve(33,a,12,a)].\n45 Derived: -Likes(Rabbit,Rabbit) | Young(Rabbit). [resolve(33,a,23,a)].\n46 Derived: Round(Lion). [resolve(41,a,19,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Chases(x,Lion) -> Round(x))) # label(non_clause). [assumption].\n2 Needs(Lion,Rabbit) & Chases(Rabbit,Dog) -> Likes(Lion,Dog) # label(non_clause). [assumption].\n3 (all x (Round(x) & Chases(x,Lion) -> Needs(x,Cat))) # label(non_clause). [assumption].\n4 (all x (Needs(x,Cat) & Chases(x,Dog) -> Likes(x,Rabbit))) # label(non_clause). [assumption].\n5 (all x (Chases(x,Lion) & Blue(Lion) -> Round(Lion))) # label(non_clause). [assumption].\n6 (all x (Chases(x,Rabbit) -> Rough(x))) # label(non_clause). [assumption].\n7 (all x (Rough(x) & Likes(x,Rabbit) -> Young(Rabbit))) # label(non_clause). [assumption].\n8 Chases(Rabbit,Cat) & Needs(Cat,Lion) -> Young(Rabbit) # label(non_clause). [assumption].\n9 (all x (Round(x) & Needs(x,Cat) -> Chases(x,Dog))) # label(non_clause). [assumption].\n10 --Likes(Lion,Cat) # label(non_clause) # label(goal). [goal].\n11 Chases(Cat,Lion). [assumption].\n12 Rough(Cat). [assumption].\n13 Young(Cat). [assumption].\n14 Needs(Cat,Lion). [assumption].\n15 Needs(Cat,Rabbit). [assumption].\n16 Green(Dog). [assumption].\n17 Young(Dog). [assumption].\n18 Likes(Dog,Cat). [assumption].\n19 Blue(Lion). [assumption].\n20 Green(Lion). [assumption].\n21 Chases(Rabbit,Lion). [assumption].\n22 Blue(Rabbit). [assumption].\n23 Rough(Rabbit). [assumption].\n24 Likes(Rabbit,Dog). [assumption].\n25 Needs(Rabbit,Dog). [assumption].\n26 Needs(Rabbit,Lion). [assumption].\n27 -Chases(x,Lion) | Round(x). [clausify(1)].\n28 -Needs(Lion,Rabbit) | -Chases(Rabbit,Dog) | Likes(Lion,Dog). [clausify(2)].\n29 -Round(x) | -Chases(x,Lion) | Needs(x,Cat). [clausify(3)].\n30 -Needs(x,Cat) | -Chases(x,Dog) | Likes(x,Rabbit). [clausify(4)].\n31 -Chases(x,Lion) | -Blue(Lion) | Round(Lion). [clausify(5)].\n32 -Chases(x,Rabbit) | Rough(x). [clausify(6)].\n33 -Rough(x) | -Likes(x,Rabbit) | Young(Rabbit). [clausify(7)].\n34 -Chases(Rabbit,Cat) | -Needs(Cat,Lion) | Young(Rabbit). [clausify(8)].\n35 -Round(x) | -Needs(x,Cat) | Chases(x,Dog). [clausify(9)].\n36 -Likes(Lion,Cat). [deny(10)].\n37 Derived: Round(Cat). [resolve(27,a,11,a)].\n38 Derived: Round(Rabbit). [resolve(27,a,21,a)].\n39 Derived: -Round(Cat) | Needs(Cat,Cat). [resolve(29,b,11,a)].\n40 Derived: -Round(Rabbit) | Needs(Rabbit,Cat). [resolve(29,b,21,a)].\n41 Derived: -Blue(Lion) | Round(Lion). [resolve(31,a,11,a)].\n42 Derived: -Round(Rabbit) | -Needs(Rabbit,Cat) | -Needs(Lion,Rabbit) | Likes(Lion,Dog). [resolve(35,c,28,b)].\n43 Derived: -Round(x) | -Needs(x,Cat) | -Needs(x,Cat) | Likes(x,Rabbit). [resolve(35,c,30,b)].\n44 Derived: -Likes(Cat,Rabbit) | Young(Rabbit). [resolve(33,a,12,a)].\n45 Derived: -Likes(Rabbit,Rabbit) | Young(Rabbit). [resolve(33,a,23,a)].\n46 Derived: Round(Lion). [resolve(41,a,19,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "No Output"
      }
    }
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-971_Q5",
    "context": "Charlie is green. Charlie is kind. Erin is blue. Erin is kind. Fiona is green. Gary is blue. Gary is furry. Gary is green. Gary is kind. Gary is round. If someone is round and kind then they are green. All green, round people are blue. Round people are big. If someone is kind then they are furry. All blue people are kind. If someone is green then they are big. If Erin is cold and Erin is green then Erin is blue. Cold, blue people are kind. All green, big people are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is round.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Green($x, bool) ::: Is x green?\n  Kind($x, bool) ::: Is x kind?\n  Blue($x, bool) ::: Is x blue?\n  Furry($x, bool) ::: Is x furry?\n  Round($x, bool) ::: Is x round?\n  Big($x, bool) ::: Is x big?\n  Cold($x, bool) ::: Is x cold?\nWe have following known facts from the context:\n  Green(Charlie, True)\n  Kind(Charlie, True)\n  Blue(Erin, True)\n  Kind(Erin, True)\n  Green(Fiona, True)\n  Blue(Gary, True)\n  Furry(Gary, True)\n  Green(Gary, True)\n  Kind(Gary, True)\n  Round(Gary, True)\nWe have following known rules from the context:\n  rule1: Round($x, True) && Kind($x, True) >>> Green($x, True)\n  rule2: Green($x, True) && Round($x, True) >>> Blue($x, True)\n  rule3: Round($x, True) >>> Big($x, True)\n  rule4: Kind($x, True) >>> Furry($x, True)\n  rule5: Blue($x, True) >>> Kind($x, True)\n  rule6: Green($x, True) >>> Big($x, True)\n  rule7: Cold($x, True) && Green($x, True) && Blue($x, True) >>> Kind($x, True)\n  rule8: Green($x, True) && Big($x, True) >>> Round($x, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Round($x, True) && Kind($x, True) >>> Green($x, True)\nBind $x to 'Gary'\nObtain an already known or implied fact: Green('Gary', True)\nUnbind $x\nFinish implied with rule1\nUse rule2: Green($x, True) && Round($x, True) >>> Blue($x, True)\nBind $x to 'Charlie'\nUnbind $x\nBind $x to 'Fiona'\nUnbind $x\nBind $x to 'Gary'\nObtain an already known or implied fact: Blue('Gary', True)\nUnbind $x\nFinish implied with rule2\nUse rule3: Round($x, True) >>> Big($x, True)\nBind $x to 'Gary'\nObtain a new implied fact: Big('Gary', True)\nUse rule8: Green($x, True) && Big($x, True) >>> Round($x, True)\nFinish implied with rule8\nFinish implied with rule3\nUse rule4: Kind($x, True) >>> Furry($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Furry('Charlie', True)\nUnbind $x\nBind $x to 'Erin'\nObtain a new implied fact: Furry('Erin', True)\nUnbind $x\nBind $x to 'Gary'\nObtain an already known or implied fact: Furry('Gary', True)\nUnbind $x\nFinish implied with rule4\nUse rule5: Blue($x, True) >>> Kind($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Kind('Erin', True)\nUnbind $x\nBind $x to 'Gary'\nObtain an already known or implied fact: Kind('Gary', True)\nUnbind $x\nFinish implied with rule5\nUse rule6: Green($x, True) >>> Big($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Big('Charlie', True)\nReuse rule8: Green($x, True) && Big($x, True) >>> Round($x, True)\nFinish implied with rule8\nReuse rule8: Green($x, True) && Big($x, True) >>> Round($x, True)\nFinish implied with rule8\nFinish implied with rule6\nUse rule7: Cold($x, True) && Green($x, True) && Blue($x, True) >>> Kind($x, True)\nFinish implied with rule7\nReuse rule8: Green($x, True) && Big($x, True) >>> Round($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Round('Charlie', True)\nReuse rule1: Round($x, True) && Kind($x, True) >>> Green($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Green('Charlie', True)\nFinish implied with rule1\nReuse rule2: Green($x, True) && Round($x, True) >>> Blue($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Blue('Charlie', True)\nReuse rule5: Blue($x, True) >>> Kind($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Kind('Charlie', True)\nFinish implied with rule5\nReuse rule7: Cold($x, True) && Green($x, True) && Blue($x, True) >>> Kind($x, True)\nBind $x to 'Charlie'\nFinish implied with rule7\nFinish implied with rule2\nReuse rule3: Round($x, True) >>> Big($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Big('Charlie', True)\nFinish implied with rule3\nReuse rule1: Round($x, True) && Kind($x, True) >>> Green($x, True)\nBind $x to 'Fiona'\nFinish implied with rule1\nReuse rule2: Green($x, True) && Round($x, True) >>> Blue($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Blue('Fiona', True)\nReuse rule5: Blue($x, True) >>> Kind($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Kind('Fiona', True)\nReuse rule1: Round($x, True) && Kind($x, True) >>> Green($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Green('Fiona', True)\nFinish implied with rule1\nReuse rule4: Kind($x, True) >>> Furry($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Furry('Fiona', True)\nFinish implied with rule4\nFinish implied with rule5\nReuse rule7: Cold($x, True) && Green($x, True) && Blue($x, True) >>> Kind($x, True)\nBind $x to 'Fiona'\nFinish implied with rule7\nFinish implied with rule2\nReuse rule3: Round($x, True) >>> Big($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Big('Fiona', True)\nFinish implied with rule3\nFinish implied with rule8\nAll newly implied Facts: Big('Charlie', True), Big('Gary', True), Blue('Charlie', True), Blue('Fiona', True), Furry('Charlie', True), Furry('Erin', True), Furry('Fiona', True), Kind('Fiona', True), Round('Charlie', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n6 (all x (Green(x) -> Big(x))).  [assumption].\n8 (all x (Green(x) & Big(x) -> Round(x))).  [assumption].\n9 Round(Fiona).  [goal].\n12 Green(Fiona).  [assumption].\n15 -Green(x) | Big(x).  [clausify(6)].\n17 -Green(x) | -Big(x) | Round(x).  [clausify(8)].\n40 Big(Fiona).  [resolve(15,a,12,a)].\n42 -Big(Fiona) | Round(Fiona).  [resolve(17,a,12,a)].\n50 -Round(Fiona).  [deny(9)].\n53 Round(Fiona).  [resolve(42,a,40,a)].\n55 $F.  [resolve(53,a,50,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-804_Q16",
    "context": "Anne is kind. Charlie is not big. Charlie is not green. Charlie is white. Erin is big. Erin is green. Erin is white. Fiona is green. Fiona is kind. Fiona is quiet. Fiona is red. Fiona is white. If Erin is big and Erin is red then Erin is kind. All rough things are green. If something is kind then it is green. Quiet, green things are big. If something is rough and green then it is red. If something is green then it is rough. If Erin is red then Erin is green. All red, rough things are quiet. If something is quiet and not red then it is not white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is white.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 3)"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 Big(Erin) & Red(Erin) -> Kind(Erin) # label(non_clause). [assumption].\n2 (all x (Rough(x) -> Green(x))) # label(non_clause). [assumption].\n3 (all x (Kind(x) -> Green(x))) # label(non_clause). [assumption].\n4 (all x (Quiet(x) & Green(x) -> Big(x))) # label(non_clause). [assumption].\n5 (all x (Rough(x) & Green(x) -> Red(x))) # label(non_clause). [assumption].\n6 (all x (Green(x) -> Rough(x))) # label(non_clause). [assumption].\n7 Red(Erin) -> Green(Erin) # label(non_clause). [assumption].\n8 (all x (Red(x) & Rough(x) -> Quiet(x))) # label(non_clause). [assumption].\n9 (all x (Quiet(x) & -Red(x) -> -White(x))) # label(non_clause). [assumption].\n10 White(Anne) # label(non_clause) # label(goal). [goal].\n11 Kind(Anne). [assumption].\n12 -Big(Charlie). [assumption].\n13 -Green(Charlie). [assumption].\n14 White(Charlie). [assumption].\n15 Big(Erin). [assumption].\n16 Green(Erin). [assumption].\n17 White(Erin). [assumption].\n18 Green(Fiona). [assumption].\n19 Kind(Fiona). [assumption].\n20 Quiet(Fiona). [assumption].\n21 Red(Fiona). [assumption].\n22 White(Fiona). [assumption].\n23 -Big(Erin) | -Red(Erin) | Kind(Erin). [clausify(1)].\n24 -Rough(x) | Green(x). [clausify(2)].\n25 -Kind(x) | Green(x). [clausify(3)].\n26 -Quiet(x) | -Green(x) | Big(x). [clausify(4)].\n27 -Rough(x) | -Green(x) | Red(x). [clausify(5)].\n28 -Green(x) | Rough(x). [clausify(6)].\n29 -Red(Erin) | Green(Erin). [clausify(7)].\n30 -Red(x) | -Rough(x) | Quiet(x). [clausify(8)].\n31 -Quiet(x) | Red(x) | -White(x). [clausify(9)].\n32 -White(Anne). [deny(10)].\n33 Derived: Green(Anne). [resolve(25,a,11,a)].\n34 Derived: Green(Fiona). [resolve(25,a,19,a)].\n35 Derived: -Quiet(Charlie) | -Green(Charlie). [resolve(26,c,12,a)].\n36 Derived: -Rough(Charlie). [resolve(24,b,13,a)].\n37 Derived: -Rough(Erin) | Red(Erin). [resolve(27,b,16,a)].\n38 Derived: -Rough(Fiona) | Red(Fiona). [resolve(27,b,18,a)].\n39 Derived: -Rough(x) | Red(x) | -Rough(x). [resolve(27,b,24,b)].\n40 Derived: Rough(Erin). [resolve(28,a,16,a)].\n41 Derived: Rough(Fiona). [resolve(28,a,18,a)].\n42 Derived: Rough(Anne). [resolve(33,a,28,a)].\n43 Derived: -Quiet(Charlie) | Red(Charlie). [resolve(31,c,14,a)].\n44 Derived: -Quiet(Erin) | Red(Erin). [resolve(31,c,17,a)].\n45 Derived: -Quiet(Fiona) | Red(Fiona). [resolve(31,c,22,a)].\n46 Derived: Red(Fiona). [resolve(45,a,20,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 Big(Erin) & Red(Erin) -> Kind(Erin) # label(non_clause). [assumption].\n2 (all x (Rough(x) -> Green(x))) # label(non_clause). [assumption].\n3 (all x (Kind(x) -> Green(x))) # label(non_clause). [assumption].\n4 (all x (Quiet(x) & Green(x) -> Big(x))) # label(non_clause). [assumption].\n5 (all x (Rough(x) & Green(x) -> Red(x))) # label(non_clause). [assumption].\n6 (all x (Green(x) -> Rough(x))) # label(non_clause). [assumption].\n7 Red(Erin) -> Green(Erin) # label(non_clause). [assumption].\n8 (all x (Red(x) & Rough(x) -> Quiet(x))) # label(non_clause). [assumption].\n9 (all x (Quiet(x) & -Red(x) -> -White(x))) # label(non_clause). [assumption].\n10 -White(Anne) # label(non_clause) # label(goal). [goal].\n11 Kind(Anne). [assumption].\n12 -Big(Charlie). [assumption].\n13 -Green(Charlie). [assumption].\n14 White(Charlie). [assumption].\n15 Big(Erin). [assumption].\n16 Green(Erin). [assumption].\n17 White(Erin). [assumption].\n18 Green(Fiona). [assumption].\n19 Kind(Fiona). [assumption].\n20 Quiet(Fiona). [assumption].\n21 Red(Fiona). [assumption].\n22 White(Fiona). [assumption].\n23 -Big(Erin) | -Red(Erin) | Kind(Erin). [clausify(1)].\n24 -Rough(x) | Green(x). [clausify(2)].\n25 -Kind(x) | Green(x). [clausify(3)].\n26 -Quiet(x) | -Green(x) | Big(x). [clausify(4)].\n27 -Rough(x) | -Green(x) | Red(x). [clausify(5)].\n28 -Green(x) | Rough(x). [clausify(6)].\n29 -Red(Erin) | Green(Erin). [clausify(7)].\n30 -Red(x) | -Rough(x) | Quiet(x). [clausify(8)].\n31 -Quiet(x) | Red(x) | -White(x). [clausify(9)].\n32 White(Anne). [deny(10)].\n33 Derived: Green(Anne). [resolve(25,a,11,a)].\n34 Derived: Green(Fiona). [resolve(25,a,19,a)].\n35 Derived: -Quiet(Charlie) | -Green(Charlie). [resolve(26,c,12,a)].\n36 Derived: -Rough(Charlie). [resolve(24,b,13,a)].\n37 Derived: -Rough(Erin) | Red(Erin). [resolve(27,b,16,a)].\n38 Derived: -Rough(Fiona) | Red(Fiona). [resolve(27,b,18,a)].\n39 Derived: -Rough(x) | Red(x) | -Rough(x). [resolve(27,b,24,b)].\n40 Derived: Rough(Erin). [resolve(28,a,16,a)].\n41 Derived: Rough(Fiona). [resolve(28,a,18,a)].\n42 Derived: Rough(Anne). [resolve(33,a,28,a)].\n43 Derived: -Quiet(Charlie) | Red(Charlie). [resolve(31,c,14,a)].\n44 Derived: -Quiet(Erin) | Red(Erin). [resolve(31,c,17,a)].\n45 Derived: -Quiet(Fiona) | Red(Fiona). [resolve(31,c,22,a)].\n46 Derived: -Quiet(Anne) | Red(Anne). [resolve(32,a,31,c)].\n47 Derived: Red(Fiona). [resolve(45,a,20,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "No Output"
      }
    }
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-572_Q18",
    "context": "Charlie is green. Charlie is kind. Charlie is nice. Charlie is rough. Erin is kind. Erin is nice. Erin is quiet. Fiona is quiet. Fiona is rough. Harry is smart. All rough, green people are quiet. If someone is green and rough then they are nice. All kind, smart people are green. If Erin is green and Erin is blue then Erin is quiet. All quiet people are smart. All kind people are green. If someone is smart then they are kind. All rough, nice people are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is rough.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Green($x, bool) ::: Is x green?\n  Kind($x, bool) ::: Is x kind?\n  Nice($x, bool) ::: Is x nice?\n  Rough($x, bool) ::: Is x rough?\n  Quiet($x, bool) ::: Is x quiet?\n  Smart($x, bool) ::: Is x smart?\n  Blue($x, bool) ::: Is x blue?\nWe have following known facts from the context:\n  Green(Charlie, True)\n  Kind(Charlie, True)\n  Nice(Charlie, True)\n  Rough(Charlie, True)\n  Kind(Erin, True)\n  Nice(Erin, True)\n  Quiet(Erin, True)\n  Quiet(Fiona, True)\n  Rough(Fiona, True)\n  Smart(Harry, True)\nWe have following known rules from the context:\n  rule1: Rough($x, True) && Green($x, True) >>> Quiet($x, True)\n  rule2: Green($x, True) && Rough($x, True) >>> Nice($x, True)\n  rule3: Kind($x, True) && Smart($x, True) >>> Green($x, True)\n  rule4: Green(Erin, True) && Blue(Erin, True) >>> Quiet(Erin, True)\n  rule5: Quiet($x, True) >>> Smart($x, True)\n  rule6: Kind($x, True) >>> Green($x, True)\n  rule7: Smart($x, True) >>> Kind($x, True)\n  rule8: Rough($x, True) && Nice($x, True) >>> Blue($x, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Rough($x, True) && Green($x, True) >>> Quiet($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Quiet('Charlie', True)\nUse rule5: Quiet($x, True) >>> Smart($x, True)\nFinish implied with rule5\nFinish implied with rule1\nUse rule2: Green($x, True) && Rough($x, True) >>> Nice($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Nice('Charlie', True)\nUnbind $x\nFinish implied with rule2\nUse rule3: Kind($x, True) && Smart($x, True) >>> Green($x, True)\nBind $x to 'Charlie'\nUnbind $x\nBind $x to 'Erin'\nUnbind $x\nFinish implied with rule3\nUse rule4: Green(Erin, True) && Blue(Erin, True) >>> Quiet(Erin, True)\nFinish implied with rule4\nReuse rule5: Quiet($x, True) >>> Smart($x, True)\nBind $x to 'Erin'\nObtain a new implied fact: Smart('Erin', True)\nReuse rule3: Kind($x, True) && Smart($x, True) >>> Green($x, True)\nBind $x to 'Erin'\nObtain a new implied fact: Green('Erin', True)\nReuse rule1: Rough($x, True) && Green($x, True) >>> Quiet($x, True)\nBind $x to 'Erin'\nFinish implied with rule1\nReuse rule2: Green($x, True) && Rough($x, True) >>> Nice($x, True)\nBind $x to 'Erin'\nFinish implied with rule2\nReuse rule4: Green(Erin, True) && Blue(Erin, True) >>> Quiet(Erin, True)\nFinish implied with rule4\nFinish implied with rule3\nUse rule7: Smart($x, True) >>> Kind($x, True)\nFinish implied with rule7\nReuse rule3: Kind($x, True) && Smart($x, True) >>> Green($x, True)\nBind $x to 'Fiona'\nFinish implied with rule3\nReuse rule7: Smart($x, True) >>> Kind($x, True)\nFinish implied with rule7\nReuse rule3: Kind($x, True) && Smart($x, True) >>> Green($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Green('Charlie', True)\nFinish implied with rule3\nReuse rule7: Smart($x, True) >>> Kind($x, True)\nFinish implied with rule7\nFinish implied with rule5\nUse rule6: Kind($x, True) >>> Green($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Green('Charlie', True)\nUnbind $x\nBind $x to 'Erin'\nObtain an already known or implied fact: Green('Erin', True)\nUnbind $x\nFinish implied with rule6\nReuse rule7: Smart($x, True) >>> Kind($x, True)\nBind $x to 'Harry'\nObtain a new implied fact: Kind('Harry', True)\nReuse rule3: Kind($x, True) && Smart($x, True) >>> Green($x, True)\nBind $x to 'Harry'\nObtain a new implied fact: Green('Harry', True)\nReuse rule1: Rough($x, True) && Green($x, True) >>> Quiet($x, True)\nBind $x to 'Harry'\nFinish implied with rule1\nReuse rule2: Green($x, True) && Rough($x, True) >>> Nice($x, True)\nBind $x to 'Harry'\nFinish implied with rule2\nReuse rule4: Green(Erin, True) && Blue(Erin, True) >>> Quiet(Erin, True)\nFinish implied with rule4\nFinish implied with rule3\nReuse rule6: Kind($x, True) >>> Green($x, True)\nBind $x to 'Harry'\nObtain an already known or implied fact: Green('Harry', True)\nFinish implied with rule6\nReuse rule3: Kind($x, True) && Smart($x, True) >>> Green($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Green('Fiona', True)\nReuse rule1: Rough($x, True) && Green($x, True) >>> Quiet($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Quiet('Fiona', True)\nFinish implied with rule1\nReuse rule2: Green($x, True) && Rough($x, True) >>> Nice($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Nice('Fiona', True)\nUse rule8: Rough($x, True) && Nice($x, True) >>> Blue($x, True)\nFinish implied with rule8\nFinish implied with rule2\nReuse rule4: Green(Erin, True) && Blue(Erin, True) >>> Quiet(Erin, True)\nFinish implied with rule4\nFinish implied with rule3\nReuse rule6: Kind($x, True) >>> Green($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Green('Fiona', True)\nFinish implied with rule6\nFinish implied with rule7\nReuse rule8: Rough($x, True) && Nice($x, True) >>> Blue($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Blue('Charlie', True)\nReuse rule4: Green(Erin, True) && Blue(Erin, True) >>> Quiet(Erin, True)\nFinish implied with rule4\nReuse rule4: Green(Erin, True) && Blue(Erin, True) >>> Quiet(Erin, True)\nFinish implied with rule4\nFinish implied with rule8\nAll newly implied Facts: Blue('Charlie', True), Green('Erin', True), Green('Fiona', True), Green('Harry', True), Kind('Harry', True), Nice('Fiona', True), Quiet('Charlie', True), Smart('Erin', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Rough(x) & Green(x) -> Quiet(x))) # label(non_clause). [assumption].\n2 (all x (Green(x) & Rough(x) -> Nice(x))) # label(non_clause). [assumption].\n3 (all x (Kind(x) & Smart(x) -> Green(x))) # label(non_clause). [assumption].\n4 Green(Erin) & Blue(Erin) -> Quiet(Erin) # label(non_clause). [assumption].\n5 (all x (Quiet(x) -> Smart(x))) # label(non_clause). [assumption].\n6 (all x (Kind(x) -> Green(x))) # label(non_clause). [assumption].\n7 (all x (Smart(x) -> Kind(x))) # label(non_clause). [assumption].\n8 (all x (Rough(x) & Nice(x) -> Blue(x))) # label(non_clause). [assumption].\n9 Rough(Erin) # label(non_clause) # label(goal). [goal].\n10 Green(Charlie). [assumption].\n11 Kind(Charlie). [assumption].\n12 Nice(Charlie). [assumption].\n13 Rough(Charlie). [assumption].\n14 Kind(Erin). [assumption].\n15 Nice(Erin). [assumption].\n16 Quiet(Erin). [assumption].\n17 Quiet(Fiona). [assumption].\n18 Rough(Fiona). [assumption].\n19 Smart(Harry). [assumption].\n20 -Rough(x) | -Green(x) | Quiet(x). [clausify(1)].\n21 -Green(x) | -Rough(x) | Nice(x). [clausify(2)].\n22 -Kind(x) | -Smart(x) | Green(x). [clausify(3)].\n23 -Green(Erin) | -Blue(Erin) | Quiet(Erin). [clausify(4)].\n24 -Quiet(x) | Smart(x). [clausify(5)].\n25 -Kind(x) | Green(x). [clausify(6)].\n26 -Smart(x) | Kind(x). [clausify(7)].\n27 -Rough(x) | -Nice(x) | Blue(x). [clausify(8)].\n28 -Rough(Erin). [deny(9)].\n29 Derived: -Rough(Charlie) | Quiet(Charlie). [resolve(20,b,10,a)].\n30 Derived: -Rough(Charlie) | Nice(Charlie). [resolve(21,a,10,a)].\n31 Derived: -Kind(x) | -Smart(x) | -Rough(x) | Quiet(x). [resolve(22,c,20,b)].\n32 Derived: -Kind(x) | -Smart(x) | -Rough(x) | Nice(x). [resolve(22,c,21,a)].\n33 Derived: -Blue(Erin) | Quiet(Erin) | -Kind(Erin) | -Smart(Erin). [resolve(23,a,22,c)].\n34 Derived: -Kind(x) | -Rough(x) | Quiet(x). [resolve(25,b,20,b)].\n35 Derived: -Kind(x) | -Rough(x) | Nice(x). [resolve(25,b,21,a)].\n36 Derived: -Kind(Erin) | -Blue(Erin) | Quiet(Erin). [resolve(25,b,23,a)].\n37 Derived: -Smart(Charlie) | -Rough(Charlie) | Quiet(Charlie). [resolve(31,a,11,a)].\n38 Derived: -Smart(Erin) | -Rough(Erin) | Quiet(Erin). [resolve(31,a,14,a)].\n39 Derived: -Smart(x) | -Rough(x) | Quiet(x) | -Smart(x). [resolve(31,a,26,b)].\n40 Derived: -Smart(Charlie) | -Rough(Charlie) | Nice(Charlie). [resolve(32,a,11,a)].\n41 Derived: -Smart(Erin) | -Rough(Erin) | Nice(Erin). [resolve(32,a,14,a)].\n42 Derived: -Smart(x) | -Rough(x) | Nice(x) | -Smart(x). [resolve(32,a,26,b)].\n43 Derived: -Blue(Erin) | Quiet(Erin) | -Smart(Erin). [resolve(33,c,14,a)].\n44 Derived: -Rough(Charlie) | Quiet(Charlie). [resolve(34,a,11,a)].\n45 Derived: -Rough(Erin) | Quiet(Erin). [resolve(34,a,14,a)].\n46 Derived: -Rough(Charlie) | Nice(Charlie). [resolve(35,a,11,a)].\n47 Derived: -Rough(Erin) | Nice(Erin). [resolve(35,a,14,a)].\n48 Derived: -Blue(Erin) | Quiet(Erin). [resolve(36,a,14,a)].\n49 Derived: -Rough(Charlie) | Blue(Charlie). [resolve(27,b,12,a)].\n50 Derived: -Smart(Erin) | -Rough(Erin) | -Rough(Erin) | Blue(Erin). [resolve(41,c,27,b)].\n51 Derived: -Smart(x) | -Rough(x) | -Smart(x) | -Rough(x) | Blue(x). [resolve(42,c,27,b)].\n52 Derived: -Rough(Erin) | -Rough(Erin) | Blue(Erin). [resolve(47,b,27,b)].\n53 Derived: Smart(Erin). [resolve(24,a,16,a)].\n54 Derived: Smart(Fiona). [resolve(24,a,17,a)].\n55 Derived: -Rough(Charlie) | Smart(Charlie). [resolve(29,b,24,a)].\n56 Derived: Smart(Charlie). [resolve(55,a,13,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Rough(x) & Green(x) -> Quiet(x))) # label(non_clause). [assumption].\n2 (all x (Green(x) & Rough(x) -> Nice(x))) # label(non_clause). [assumption].\n3 (all x (Kind(x) & Smart(x) -> Green(x))) # label(non_clause). [assumption].\n4 Green(Erin) & Blue(Erin) -> Quiet(Erin) # label(non_clause). [assumption].\n5 (all x (Quiet(x) -> Smart(x))) # label(non_clause). [assumption].\n6 (all x (Kind(x) -> Green(x))) # label(non_clause). [assumption].\n7 (all x (Smart(x) -> Kind(x))) # label(non_clause). [assumption].\n8 (all x (Rough(x) & Nice(x) -> Blue(x))) # label(non_clause). [assumption].\n9 -Rough(Erin) # label(non_clause) # label(goal). [goal].\n10 Green(Charlie). [assumption].\n11 Kind(Charlie). [assumption].\n12 Nice(Charlie). [assumption].\n13 Rough(Charlie). [assumption].\n14 Kind(Erin). [assumption].\n15 Nice(Erin). [assumption].\n16 Quiet(Erin). [assumption].\n17 Quiet(Fiona). [assumption].\n18 Rough(Fiona). [assumption].\n19 Smart(Harry). [assumption].\n20 -Rough(x) | -Green(x) | Quiet(x). [clausify(1)].\n21 -Green(x) | -Rough(x) | Nice(x). [clausify(2)].\n22 -Kind(x) | -Smart(x) | Green(x). [clausify(3)].\n23 -Green(Erin) | -Blue(Erin) | Quiet(Erin). [clausify(4)].\n24 -Quiet(x) | Smart(x). [clausify(5)].\n25 -Kind(x) | Green(x). [clausify(6)].\n26 -Smart(x) | Kind(x). [clausify(7)].\n27 -Rough(x) | -Nice(x) | Blue(x). [clausify(8)].\n28 Rough(Erin). [deny(9)].\n29 Derived: -Rough(Charlie) | Quiet(Charlie). [resolve(20,b,10,a)].\n30 Derived: -Rough(Charlie) | Nice(Charlie). [resolve(21,a,10,a)].\n31 Derived: -Kind(x) | -Smart(x) | -Rough(x) | Quiet(x). [resolve(22,c,20,b)].\n32 Derived: -Kind(x) | -Smart(x) | -Rough(x) | Nice(x). [resolve(22,c,21,a)].\n33 Derived: -Blue(Erin) | Quiet(Erin) | -Kind(Erin) | -Smart(Erin). [resolve(23,a,22,c)].\n34 Derived: -Kind(x) | -Rough(x) | Quiet(x). [resolve(25,b,20,b)].\n35 Derived: -Kind(x) | -Rough(x) | Nice(x). [resolve(25,b,21,a)].\n36 Derived: -Kind(Erin) | -Blue(Erin) | Quiet(Erin). [resolve(25,b,23,a)].\n37 Derived: -Smart(Charlie) | -Rough(Charlie) | Quiet(Charlie). [resolve(31,a,11,a)].\n38 Derived: -Smart(Erin) | -Rough(Erin) | Quiet(Erin). [resolve(31,a,14,a)].\n39 Derived: -Smart(x) | -Rough(x) | Quiet(x) | -Smart(x). [resolve(31,a,26,b)].\n40 Derived: -Smart(Charlie) | -Rough(Charlie) | Nice(Charlie). [resolve(32,a,11,a)].\n41 Derived: -Smart(Erin) | -Rough(Erin) | Nice(Erin). [resolve(32,a,14,a)].\n42 Derived: -Smart(x) | -Rough(x) | Nice(x) | -Smart(x). [resolve(32,a,26,b)].\n43 Derived: -Blue(Erin) | Quiet(Erin) | -Smart(Erin). [resolve(33,c,14,a)].\n44 Derived: -Rough(Charlie) | Quiet(Charlie). [resolve(34,a,11,a)].\n45 Derived: -Rough(Erin) | Quiet(Erin). [resolve(34,a,14,a)].\n46 Derived: -Rough(Charlie) | Nice(Charlie). [resolve(35,a,11,a)].\n47 Derived: -Rough(Erin) | Nice(Erin). [resolve(35,a,14,a)].\n48 Derived: -Blue(Erin) | Quiet(Erin). [resolve(36,a,14,a)].\n49 Derived: -Rough(Charlie) | Blue(Charlie). [resolve(27,b,12,a)].\n50 Derived: -Rough(Erin) | Blue(Erin). [resolve(27,b,15,a)].\n51 Derived: -Smart(x) | -Rough(x) | -Smart(x) | -Rough(x) | Blue(x). [resolve(42,c,27,b)].\n52 Derived: Smart(Erin). [resolve(24,a,16,a)].\n53 Derived: Smart(Fiona). [resolve(24,a,17,a)].\n54 Derived: -Rough(Charlie) | Smart(Charlie). [resolve(29,b,24,a)].\n55 Derived: Smart(Charlie). [resolve(54,a,13,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "No Output"
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-285_Q16",
    "context": "Bob is big. Bob is cold. Bob is furry. Bob is smart. Fiona is cold. Fiona is not green. Fiona is white. Gary is smart. Harry is big. Harry is cold. Harry is smart. All green people are furry. If Gary is furry and Gary is not smart then Gary is white. Smart people are green. If Bob is not green and Bob is not white then Bob is furry. Big people are cold. If someone is smart and furry then they are big. If someone is white and not cold then they are not blue. All cold people are not blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is white.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Big($x, bool) ::: Is x big?\n  Cold($x, bool) ::: Is x cold?\n  Furry($x, bool) ::: Is x furry?\n  Smart($x, bool) ::: Is x smart?\n  Green($x, bool) ::: Is x green?\n  White($x, bool) ::: Is x white?\n  Blue($x, bool) ::: Is x blue?\nWe have following known facts from the context:\n  Big(Bob, True)\n  Cold(Bob, True)\n  Furry(Bob, True)\n  Smart(Bob, True)\n  Cold(Fiona, True)\n  Green(Fiona, False)\n  White(Fiona, True)\n  Smart(Gary, True)\n  Big(Harry, True)\n  Cold(Harry, True)\n  Smart(Harry, True)\nWe have following known rules from the context:\n  rule1: Green($x, True) >>> Furry($x, True)\n  rule2: Smart($x, True) >>> Green($x, True)\n  rule3: Big($x, True) >>> Cold($x, True)\n  rule4: Smart($x, True) && Furry($x, True) >>> Big($x, True)\n  rule5: White($x, True) && Cold($x, False) >>> Blue($x, False)\n  rule6: Cold($x, True) >>> Blue($x, False)\n  rule7: Furry(Gary, True) && Smart(Gary, False) >>> White(Gary, True)\n  rule8: Green(Bob, False) && White(Bob, False) >>> Furry(Bob, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Green($x, True) >>> Furry($x, True)\nFinish implied with rule1\nUse rule2: Smart($x, True) >>> Green($x, True)\nBind $x to 'Bob'\nObtain a new implied fact: Green('Bob', True)\nReuse rule1: Green($x, True) >>> Furry($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Furry('Bob', True)\nFinish implied with rule1\nUse rule8: Green(Bob, False) && White(Bob, False) >>> Furry(Bob, True)\nFinish implied with rule8\nReuse rule1: Green($x, True) >>> Furry($x, True)\nBind $x to 'Gary'\nObtain a new implied fact: Furry('Gary', True)\nUse rule4: Smart($x, True) && Furry($x, True) >>> Big($x, True)\nFinish implied with rule4\nUse rule7: Furry(Gary, True) && Smart(Gary, False) >>> White(Gary, True)\nFinish implied with rule7\nFinish implied with rule1\nReuse rule8: Green(Bob, False) && White(Bob, False) >>> Furry(Bob, True)\nFinish implied with rule8\nReuse rule1: Green($x, True) >>> Furry($x, True)\nBind $x to 'Harry'\nObtain a new implied fact: Furry('Harry', True)\nReuse rule4: Smart($x, True) && Furry($x, True) >>> Big($x, True)\nFinish implied with rule4\nReuse rule7: Furry(Gary, True) && Smart(Gary, False) >>> White(Gary, True)\nFinish implied with rule7\nFinish implied with rule1\nReuse rule8: Green(Bob, False) && White(Bob, False) >>> Furry(Bob, True)\nFinish implied with rule8\nFinish implied with rule2\nUse rule3: Big($x, True) >>> Cold($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Cold('Bob', True)\nUnbind $x\nBind $x to 'Harry'\nObtain an already known or implied fact: Cold('Harry', True)\nUnbind $x\nFinish implied with rule3\nReuse rule4: Smart($x, True) && Furry($x, True) >>> Big($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Big('Bob', True)\nUnbind $x\nBind $x to 'Gary'\nObtain a new implied fact: Big('Gary', True)\nReuse rule3: Big($x, True) >>> Cold($x, True)\nBind $x to 'Gary'\nObtain a new implied fact: Cold('Gary', True)\nUse rule5: White($x, True) && Cold($x, False) >>> Blue($x, False)\nFinish implied with rule5\nUse rule6: Cold($x, True) >>> Blue($x, False)\nFinish implied with rule6\nFinish implied with rule3\nFinish implied with rule4\nReuse rule5: White($x, True) && Cold($x, False) >>> Blue($x, False)\nBind $x to 'Fiona'\nUnbind $x\nFinish implied with rule5\nReuse rule6: Cold($x, True) >>> Blue($x, False)\nBind $x to 'Bob'\nObtain a new implied fact: Blue('Bob', False)\nUnbind $x\nBind $x to 'Fiona'\nObtain a new implied fact: Blue('Fiona', False)\nUnbind $x\nBind $x to 'Harry'\nObtain a new implied fact: Blue('Harry', False)\nUnbind $x\nBind $x to 'Gary'\nObtain a new implied fact: Blue('Gary', False)\nUnbind $x\nFinish implied with rule6\nReuse rule7: Furry(Gary, True) && Smart(Gary, False) >>> White(Gary, True)\nFinish implied with rule7\nReuse rule8: Green(Bob, False) && White(Bob, False) >>> Furry(Bob, True)\nFinish implied with rule8\nAll newly implied Facts: Big('Gary', True), Blue('Bob', False), Blue('Fiona', False), Blue('Gary', False), Blue('Harry', False), Cold('Gary', True), Furry('Gary', True), Furry('Harry', True), Green('Bob', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Green(x) -> Furry(x))) # label(non_clause). [assumption].\n2 (all x (Smart(x) -> Green(x))) # label(non_clause). [assumption].\n3 (all x (Big(x) -> Cold(x))) # label(non_clause). [assumption].\n4 (all x (Smart(x) & Furry(x) -> Big(x))) # label(non_clause). [assumption].\n5 (all x (White(x) & -Cold(x) -> -Blue(x))) # label(non_clause). [assumption].\n6 (all x (Cold(x) -> -Blue(x))) # label(non_clause). [assumption].\n7 Furry(Gary) & -Smart(Gary) -> White(Gary) # label(non_clause). [assumption].\n8 -Green(Bob) & -White(Bob) -> Furry(Bob) # label(non_clause). [assumption].\n9 White(Bob) # label(non_clause) # label(goal). [goal].\n10 Big(Bob). [assumption].\n11 Cold(Bob). [assumption].\n12 Furry(Bob). [assumption].\n13 Smart(Bob). [assumption].\n14 Cold(Fiona). [assumption].\n15 -Green(Fiona). [assumption].\n16 White(Fiona). [assumption].\n17 Smart(Gary). [assumption].\n18 Big(Harry). [assumption].\n19 Cold(Harry). [assumption].\n20 Smart(Harry). [assumption].\n21 -Green(x) | Furry(x). [clausify(1)].\n22 -Smart(x) | Green(x). [clausify(2)].\n23 -Big(x) | Cold(x). [clausify(3)].\n24 -Smart(x) | -Furry(x) | Big(x). [clausify(4)].\n25 -White(x) | Cold(x) | -Blue(x). [clausify(5)].\n26 -Cold(x) | -Blue(x). [clausify(6)].\n27 -Furry(Gary) | Smart(Gary) | White(Gary). [clausify(7)].\n28 Green(Bob) | White(Bob) | Furry(Bob). [clausify(8)].\n29 -White(Bob). [deny(9)].\n30 Derived: Cold(Bob). [resolve(23,a,10,a)].\n31 Derived: Cold(Harry). [resolve(23,a,18,a)].\n32 Derived: -Smart(x) | -Furry(x) | Cold(x). [resolve(24,c,23,a)].\n33 Derived: -Blue(Bob). [resolve(26,a,11,a)].\n34 Derived: -Blue(Fiona). [resolve(26,a,14,a)].\n35 Derived: -Blue(Harry). [resolve(26,a,19,a)].\n36 Derived: -Blue(x) | -White(x) | -Blue(x). [resolve(26,a,25,b)].\n37 Derived: -Smart(x) | -Furry(x) | -Blue(x). [resolve(32,c,26,a)].\n38 Derived: Smart(Gary) | White(Gary) | -Green(Gary). [resolve(27,a,21,b)].\n39 Derived: -Smart(Bob) | -Blue(Bob). [resolve(37,b,12,a)].\n40 Derived: -Smart(x) | -Blue(x) | -Green(x). [resolve(37,b,21,b)].\n41 Derived: Green(Bob). [resolve(22,a,13,a)].\n42 Derived: Green(Gary). [resolve(22,a,17,a)].\n43 Derived: Green(Harry). [resolve(22,a,20,a)].\n44 Derived: -Blue(Bob). [resolve(39,a,13,a)].\n45 Derived: -Blue(Gary) | -Green(Gary). [resolve(40,a,17,a)].\n46 Derived: -Blue(Harry) | -Green(Harry). [resolve(40,a,20,a)].\n47 Derived: -Blue(Gary). [resolve(45,b,42,a)].\n48 Derived: -Blue(Harry). [resolve(46,b,43,a)].\n49 Derived: -Blue(Fiona) | -Blue(Fiona). [resolve(36,b,16,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Green(x) -> Furry(x))) # label(non_clause). [assumption].\n2 (all x (Smart(x) -> Green(x))) # label(non_clause). [assumption].\n3 (all x (Big(x) -> Cold(x))) # label(non_clause). [assumption].\n4 (all x (Smart(x) & Furry(x) -> Big(x))) # label(non_clause). [assumption].\n5 (all x (White(x) & -Cold(x) -> -Blue(x))) # label(non_clause). [assumption].\n6 (all x (Cold(x) -> -Blue(x))) # label(non_clause). [assumption].\n7 Furry(Gary) & -Smart(Gary) -> White(Gary) # label(non_clause). [assumption].\n8 -Green(Bob) & -White(Bob) -> Furry(Bob) # label(non_clause). [assumption].\n9 -White(Bob) # label(non_clause) # label(goal). [goal].\n10 Big(Bob). [assumption].\n11 Cold(Bob). [assumption].\n12 Furry(Bob). [assumption].\n13 Smart(Bob). [assumption].\n14 Cold(Fiona). [assumption].\n15 -Green(Fiona). [assumption].\n16 White(Fiona). [assumption].\n17 Smart(Gary). [assumption].\n18 Big(Harry). [assumption].\n19 Cold(Harry). [assumption].\n20 Smart(Harry). [assumption].\n21 -Green(x) | Furry(x). [clausify(1)].\n22 -Smart(x) | Green(x). [clausify(2)].\n23 -Big(x) | Cold(x). [clausify(3)].\n24 -Smart(x) | -Furry(x) | Big(x). [clausify(4)].\n25 -White(x) | Cold(x) | -Blue(x). [clausify(5)].\n26 -Cold(x) | -Blue(x). [clausify(6)].\n27 -Furry(Gary) | Smart(Gary) | White(Gary). [clausify(7)].\n28 Green(Bob) | White(Bob) | Furry(Bob). [clausify(8)].\n29 White(Bob). [deny(9)].\n30 Derived: Cold(Bob). [resolve(23,a,10,a)].\n31 Derived: Cold(Harry). [resolve(23,a,18,a)].\n32 Derived: -Smart(x) | -Furry(x) | Cold(x). [resolve(24,c,23,a)].\n33 Derived: -Blue(Bob). [resolve(26,a,11,a)].\n34 Derived: -Blue(Fiona). [resolve(26,a,14,a)].\n35 Derived: -Blue(Harry). [resolve(26,a,19,a)].\n36 Derived: -Blue(x) | -White(x) | -Blue(x). [resolve(26,a,25,b)].\n37 Derived: -Smart(x) | -Furry(x) | -Blue(x). [resolve(32,c,26,a)].\n38 Derived: Smart(Gary) | White(Gary) | -Green(Gary). [resolve(27,a,21,b)].\n39 Derived: -Smart(Bob) | -Blue(Bob). [resolve(37,b,12,a)].\n40 Derived: -Smart(x) | -Blue(x) | -Green(x). [resolve(37,b,21,b)].\n41 Derived: Green(Bob). [resolve(22,a,13,a)].\n42 Derived: Green(Gary). [resolve(22,a,17,a)].\n43 Derived: Green(Harry). [resolve(22,a,20,a)].\n44 Derived: -Blue(Bob). [resolve(39,a,13,a)].\n45 Derived: -Blue(Gary) | -Green(Gary). [resolve(40,a,17,a)].\n46 Derived: -Blue(Harry) | -Green(Harry). [resolve(40,a,20,a)].\n47 Derived: -Blue(Gary). [resolve(45,b,42,a)].\n48 Derived: -Blue(Harry). [resolve(46,b,43,a)].\n49 Derived: -Blue(Fiona) | -Blue(Fiona). [resolve(36,b,16,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "SyntaxError: unmatched ')'"
      }
    }
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-686_Q18",
    "context": "The bald eagle chases the squirrel. The bald eagle is blue. The bald eagle likes the cow. The bald eagle likes the lion. The cow chases the lion. The cow is green. The cow likes the bald eagle. The cow likes the lion. The lion likes the cow. The squirrel chases the bald eagle. The squirrel is big. The squirrel is green. The squirrel is red. The squirrel sees the bald eagle. If someone is red and they chase the bald eagle then the bald eagle is green. If someone likes the bald eagle then they like the lion. If someone is green then they see the lion. If the cow is blue then the cow likes the squirrel. If the bald eagle sees the lion then the lion sees the squirrel. If someone sees the squirrel then they are green. If someone likes the bald eagle then the bald eagle is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle chases the lion.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 3)"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Color(x,Red) & Chases(x,Bald_eagle) -> Color(Bald_eagle,Green))) # label(non_clause). [assumption].\n2 (all x (Likes(x,Bald_eagle) -> Likes(x,Lion))) # label(non_clause). [assumption].\n3 (all x (Color(x,Green) -> Sees(x,Lion))) # label(non_clause). [assumption].\n4 Color(Cow,Blue) -> Likes(Cow,Squirrel) # label(non_clause). [assumption].\n5 Sees(Bald_eagle,Lion) -> Sees(Lion,Squirrel) # label(non_clause). [assumption].\n6 (all x (Sees(x,Squirrel) -> Color(x,Green))) # label(non_clause). [assumption].\n7 (all x (Likes(x,Bald_eagle) -> Color(Bald_eagle,Blue))) # label(non_clause). [assumption].\n8 Chases(Bald_eagle,Lion) # label(non_clause) # label(goal). [goal].\n9 Chases(Bald_eagle,Squirrel). [assumption].\n10 Color(Bald_eagle,Blue). [assumption].\n11 Likes(Bald_eagle,Cow). [assumption].\n12 Likes(Bald_eagle,Lion). [assumption].\n13 Chases(Cow,Lion). [assumption].\n14 Color(Cow,Green). [assumption].\n15 Likes(Cow,Bald_eagle). [assumption].\n16 Likes(Cow,Lion). [assumption].\n17 Likes(Lion,Cow). [assumption].\n18 Chases(Squirrel,Bald_eagle). [assumption].\n19 Size(Squirrel,Big). [assumption].\n20 Color(Squirrel,Green). [assumption].\n21 Color(Squirrel,Red). [assumption].\n22 Sees(Squirrel,Bald_eagle). [assumption].\n23 -Color(x,Red) | -Chases(x,Bald_eagle) | Color(Bald_eagle,Green). [clausify(1)].\n24 -Likes(x,Bald_eagle) | Likes(x,Lion). [clausify(2)].\n25 -Color(x,Green) | Sees(x,Lion). [clausify(3)].\n26 -Color(Cow,Blue) | Likes(Cow,Squirrel). [clausify(4)].\n27 -Sees(Bald_eagle,Lion) | Sees(Lion,Squirrel). [clausify(5)].\n28 -Sees(x,Squirrel) | Color(x,Green). [clausify(6)].\n29 -Likes(x,Bald_eagle) | Color(Bald_eagle,Blue). [clausify(7)].\n30 -Chases(Bald_eagle,Lion). [deny(8)].\n31 Derived: -Color(Squirrel,Red) | Color(Bald_eagle,Green). [resolve(23,b,18,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Color(x,Red) & Chases(x,Bald_eagle) -> Color(Bald_eagle,Green))) # label(non_clause). [assumption].\n2 (all x (Likes(x,Bald_eagle) -> Likes(x,Lion))) # label(non_clause). [assumption].\n3 (all x (Color(x,Green) -> Sees(x,Lion))) # label(non_clause). [assumption].\n4 Color(Cow,Blue) -> Likes(Cow,Squirrel) # label(non_clause). [assumption].\n5 Sees(Bald_eagle,Lion) -> Sees(Lion,Squirrel) # label(non_clause). [assumption].\n6 (all x (Sees(x,Squirrel) -> Color(x,Green))) # label(non_clause). [assumption].\n7 (all x (Likes(x,Bald_eagle) -> Color(Bald_eagle,Blue))) # label(non_clause). [assumption].\n8 -Chases(Bald_eagle,Lion) # label(non_clause) # label(goal). [goal].\n9 Chases(Bald_eagle,Squirrel). [assumption].\n10 Color(Bald_eagle,Blue). [assumption].\n11 Likes(Bald_eagle,Cow). [assumption].\n12 Likes(Bald_eagle,Lion). [assumption].\n13 Chases(Cow,Lion). [assumption].\n14 Color(Cow,Green). [assumption].\n15 Likes(Cow,Bald_eagle). [assumption].\n16 Likes(Cow,Lion). [assumption].\n17 Likes(Lion,Cow). [assumption].\n18 Chases(Squirrel,Bald_eagle). [assumption].\n19 Size(Squirrel,Big). [assumption].\n20 Color(Squirrel,Green). [assumption].\n21 Color(Squirrel,Red). [assumption].\n22 Sees(Squirrel,Bald_eagle). [assumption].\n23 -Color(x,Red) | -Chases(x,Bald_eagle) | Color(Bald_eagle,Green). [clausify(1)].\n24 -Likes(x,Bald_eagle) | Likes(x,Lion). [clausify(2)].\n25 -Color(x,Green) | Sees(x,Lion). [clausify(3)].\n26 -Color(Cow,Blue) | Likes(Cow,Squirrel). [clausify(4)].\n27 -Sees(Bald_eagle,Lion) | Sees(Lion,Squirrel). [clausify(5)].\n28 -Sees(x,Squirrel) | Color(x,Green). [clausify(6)].\n29 -Likes(x,Bald_eagle) | Color(Bald_eagle,Blue). [clausify(7)].\n30 Chases(Bald_eagle,Lion). [deny(8)].\n31 Derived: -Color(Squirrel,Red) | Color(Bald_eagle,Green). [resolve(23,b,18,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-735_Q9",
    "context": "Bob is big. Bob is nice. Bob is smart. Charlie is nice. Dave is nice. Erin is big. Erin is blue. Erin is furry. Erin is quiet. Erin is round. Erin is smart. All nice things are big. All furry things are blue. Blue, furry things are quiet. If something is round and nice then it is blue. If Bob is round then Bob is blue. Big, quiet things are furry. If something is blue and furry then it is smart. If Charlie is nice and Charlie is big then Charlie is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is blue.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Big($x, bool) ::: Is x big?\n  Nice($x, bool) ::: Is x nice?\n  Smart($x, bool) ::: Is x smart?\n  Blue($x, bool) ::: Is x blue?\n  Furry($x, bool) ::: Is x furry?\n  Quiet($x, bool) ::: Is x quiet?\n  Round($x, bool) ::: Is x round?\nWe have following known facts from the context:\n  Big(Bob, True)\n  Nice(Bob, True)\n  Smart(Bob, True)\n  Nice(Charlie, True)\n  Nice(Dave, True)\n  Big(Erin, True)\n  Blue(Erin, True)\n  Furry(Erin, True)\n  Quiet(Erin, True)\n  Round(Erin, True)\n  Smart(Erin, True)\nWe have following known rules from the context:\n  rule1: Nice($x, True) >>> Big($x, True)\n  rule2: Furry($x, True) >>> Blue($x, True)\n  rule3: Blue($x, True) && Furry($x, True) >>> Quiet($x, True)\n  rule4: Round($x, True) && Nice($x, True) >>> Blue($x, True)\n  rule5: Round(Bob, True) >>> Blue(Bob, True)\n  rule6: Big($x, True) && Quiet($x, True) >>> Furry($x, True)\n  rule7: Blue($x, True) && Furry($x, True) >>> Smart($x, True)\n  rule8: Nice(Charlie, True) && Big(Charlie, True) >>> Quiet(Charlie, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Nice($x, True) >>> Big($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Big('Bob', True)\nUnbind $x\nBind $x to 'Charlie'\nObtain a new implied fact: Big('Charlie', True)\nUse rule6: Big($x, True) && Quiet($x, True) >>> Furry($x, True)\nFinish implied with rule6\nUse rule8: Nice(Charlie, True) && Big(Charlie, True) >>> Quiet(Charlie, True)\nFinish implied with rule8\nReuse rule6: Big($x, True) && Quiet($x, True) >>> Furry($x, True)\nFinish implied with rule6\nReuse rule8: Nice(Charlie, True) && Big(Charlie, True) >>> Quiet(Charlie, True)\nFinish implied with rule8\nFinish implied with rule1\nUse rule2: Furry($x, True) >>> Blue($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Blue('Erin', True)\nUnbind $x\nFinish implied with rule2\nUse rule3: Blue($x, True) && Furry($x, True) >>> Quiet($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Quiet('Erin', True)\nUnbind $x\nFinish implied with rule3\nUse rule4: Round($x, True) && Nice($x, True) >>> Blue($x, True)\nBind $x to 'Erin'\nUnbind $x\nFinish implied with rule4\nUse rule5: Round(Bob, True) >>> Blue(Bob, True)\nFinish implied with rule5\nReuse rule6: Big($x, True) && Quiet($x, True) >>> Furry($x, True)\nBind $x to 'Bob'\nUnbind $x\nBind $x to 'Erin'\nObtain an already known or implied fact: Furry('Erin', True)\nUnbind $x\nBind $x to 'Charlie'\nUnbind $x\nBind $x to 'Dave'\nUnbind $x\nFinish implied with rule6\nUse rule7: Blue($x, True) && Furry($x, True) >>> Smart($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Smart('Erin', True)\nUnbind $x\nFinish implied with rule7\nReuse rule8: Nice(Charlie, True) && Big(Charlie, True) >>> Quiet(Charlie, True)\nObtain a new implied fact: Quiet('Charlie', True)\nReuse rule6: Big($x, True) && Quiet($x, True) >>> Furry($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Furry('Charlie', True)\nReuse rule2: Furry($x, True) >>> Blue($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Blue('Charlie', True)\nReuse rule3: Blue($x, True) && Furry($x, True) >>> Quiet($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Quiet('Charlie', True)\nFinish implied with rule3\nReuse rule7: Blue($x, True) && Furry($x, True) >>> Smart($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Smart('Charlie', True)\nFinish implied with rule7\nFinish implied with rule2\nReuse rule3: Blue($x, True) && Furry($x, True) >>> Quiet($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Quiet('Charlie', True)\nFinish implied with rule3\nReuse rule7: Blue($x, True) && Furry($x, True) >>> Smart($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Smart('Charlie', True)\nFinish implied with rule7\nFinish implied with rule6\nFinish implied with rule8\nAll newly implied Facts: Big('Charlie', True), Blue('Charlie', True), Furry('Charlie', True), Quiet('Charlie', True), Smart('Charlie', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x (Nice(x) -> Big(x))).  [assumption].\n2 (all x (Furry(x) -> Blue(x))).  [assumption].\n6 (all x (Big(x) & Quiet(x) -> Furry(x))).  [assumption].\n8 Nice(Charlie) & Big(Charlie) -> Quiet(Charlie).  [assumption].\n9 Blue(Charlie).  [goal].\n10 -Big(x) | -Quiet(x) | Furry(x).  [clausify(6)].\n13 -Nice(x) | Big(x).  [clausify(1)].\n14 -Nice(Charlie) | -Big(Charlie) | Quiet(Charlie).  [clausify(8)].\n17 -Furry(x) | Blue(x).  [clausify(2)].\n20 -Blue(Charlie).  [deny(9)].\n24 -Quiet(x) | Furry(x) | -Nice(x).  [resolve(10,a,13,b)].\n25 -Nice(Charlie) | Quiet(Charlie) | -Nice(Charlie).  [resolve(14,b,13,b)].\n28 -Furry(Charlie).  [resolve(20,a,17,b)].\n31 -Nice(Charlie) | -Nice(Charlie) | Furry(Charlie) | -Nice(Charlie).  [resolve(25,b,24,a)].\n35 Nice(Charlie).  [assumption].\n37 -Nice(Charlie) | -Nice(Charlie) | -Nice(Charlie).  [resolve(31,c,28,a)].\n38 $F.  [copy(37),merge(b),merge(c),unit_del(a,35)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-966_Q7",
    "context": "The bald eagle eats the cow. The bald eagle is young. The cow is nice. The cow sees the bald eagle. The dog eats the bald eagle. The tiger eats the cow. The tiger needs the bald eagle. If something is green and it eats the cow then it does not see the bald eagle. If something eats the tiger then the tiger is young. If something is red then it eats the tiger. If something sees the bald eagle then it eats the cow. If something is green and it needs the dog then it needs the bald eagle. If something sees the tiger then it needs the bald eagle. If something is red then it eats the bald eagle. If something is young then it is red. If something eats the dog and it is red then the dog is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is young.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 3)"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n2 (all x (Eats(x,Tiger) -> Young(Tiger))).  [assumption].\n3 (all x (Red(x) -> Eats(x,Tiger))).  [assumption].\n8 (all x (Young(x) -> Red(x))).  [assumption].\n10 Young(Tiger).  [goal].\n15 -Eats(x,Tiger) | Young(Tiger).  [clausify(2)].\n16 -Red(x) | Eats(x,Tiger).  [clausify(3)].\n20 -Young(x) | Red(x).  [clausify(8)].\n21 Young(Bald_eagle).  [assumption].\n22 -Young(Tiger).  [deny(10)].\n23 -Red(x) | Young(Tiger).  [resolve(16,b,15,a)].\n26 Red(Bald_eagle).  [resolve(20,a,21,a)].\n28 -Red(x).  [resolve(23,b,22,a)].\n29 $F.  [resolve(28,a,26,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-145_Q9",
    "context": "Anne is kind. Anne is quiet. Anne is smart. Bob is kind. Bob is nice. Bob is smart. Fiona is not nice. Fiona is red. Gary is nice. Gary is white. If Bob is kind then Bob is smart. If something is kind and nice then it is smart. If something is nice and red then it is smart. If something is quiet and not nice then it is smart. All green things are kind. If Anne is quiet and Anne is white then Anne is kind. If Fiona is not nice then Fiona is green. All smart, kind things are white. If something is kind and green then it is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is smart.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Kind($x, bool) ::: Is x kind?\n  Quiet($x, bool) ::: Is x quiet?\n  Smart($x, bool) ::: Is x smart?\n  Nice($x, bool) ::: Is x nice?\n  Red($x, bool) ::: Is x red?\n  White($x, bool) ::: Is x white?\n  Green($x, bool) ::: Is x green?\nWe have following known facts from the context:\n  Kind(Anne, True)\n  Quiet(Anne, True)\n  Smart(Anne, True)\n  Kind(Bob, True)\n  Nice(Bob, True)\n  Smart(Bob, True)\n  Nice(Fiona, False)\n  Red(Fiona, True)\n  Nice(Gary, True)\n  White(Gary, True)\nWe have following known rules from the context:\n  rule1: Kind(Bob, True) >>> Smart(Bob, True)\n  rule2: Kind($x, True) && Nice($x, True) >>> Smart($x, True)\n  rule3: Nice($x, True) && Red($x, True) >>> Smart($x, True)\n  rule4: Quiet($x, True) && Nice($x, False) >>> Smart($x, True)\n  rule5: Green($x, True) >>> Kind($x, True)\n  rule6: Quiet(Anne, True) && White(Anne, True) >>> Kind(Anne, True)\n  rule7: Nice(Fiona, False) >>> Green(Fiona, True)\n  rule8: Smart($x, True) && Kind($x, True) >>> White($x, True)\n  rule9: Kind($x, True) && Green($x, True) >>> Quiet($x, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Kind(Bob, True) >>> Smart(Bob, True)\nObtain an already known or implied fact: Smart('Bob', True)\nFinish implied with rule1\nUse rule2: Kind($x, True) && Nice($x, True) >>> Smart($x, True)\nBind $x to 'Anne'\nUnbind $x\nBind $x to 'Bob'\nObtain an already known or implied fact: Smart('Bob', True)\nUnbind $x\nFinish implied with rule2\nUse rule3: Nice($x, True) && Red($x, True) >>> Smart($x, True)\nBind $x to 'Bob'\nUnbind $x\nBind $x to 'Gary'\nUnbind $x\nFinish implied with rule3\nUse rule4: Quiet($x, True) && Nice($x, False) >>> Smart($x, True)\nBind $x to 'Anne'\nUnbind $x\nFinish implied with rule4\nUse rule5: Green($x, True) >>> Kind($x, True)\nFinish implied with rule5\nUse rule6: Quiet(Anne, True) && White(Anne, True) >>> Kind(Anne, True)\nFinish implied with rule6\nUse rule7: Nice(Fiona, False) >>> Green(Fiona, True)\nObtain a new implied fact: Green('Fiona', True)\nReuse rule5: Green($x, True) >>> Kind($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Kind('Fiona', True)\nReuse rule1: Kind(Bob, True) >>> Smart(Bob, True)\nFinish implied with rule1\nReuse rule2: Kind($x, True) && Nice($x, True) >>> Smart($x, True)\nBind $x to 'Fiona'\nFinish implied with rule2\nUse rule8: Smart($x, True) && Kind($x, True) >>> White($x, True)\nFinish implied with rule8\nUse rule9: Kind($x, True) && Green($x, True) >>> Quiet($x, True)\nFinish implied with rule9\nFinish implied with rule5\nReuse rule9: Kind($x, True) && Green($x, True) >>> Quiet($x, True)\nFinish implied with rule9\nFinish implied with rule7\nReuse rule8: Smart($x, True) && Kind($x, True) >>> White($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: White('Anne', True)\nReuse rule6: Quiet(Anne, True) && White(Anne, True) >>> Kind(Anne, True)\nObtain an already known or implied fact: Kind('Anne', True)\nFinish implied with rule6\nReuse rule6: Quiet(Anne, True) && White(Anne, True) >>> Kind(Anne, True)\nFinish implied with rule6\nFinish implied with rule8\nReuse rule9: Kind($x, True) && Green($x, True) >>> Quiet($x, True)\nBind $x to 'Anne'\nUnbind $x\nBind $x to 'Bob'\nUnbind $x\nBind $x to 'Fiona'\nObtain a new implied fact: Quiet('Fiona', True)\nReuse rule4: Quiet($x, True) && Nice($x, False) >>> Smart($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Smart('Fiona', True)\nReuse rule8: Smart($x, True) && Kind($x, True) >>> White($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: White('Fiona', True)\nReuse rule6: Quiet(Anne, True) && White(Anne, True) >>> Kind(Anne, True)\nFinish implied with rule6\nFinish implied with rule8\nFinish implied with rule4\nReuse rule6: Quiet(Anne, True) && White(Anne, True) >>> Kind(Anne, True)\nFinish implied with rule6\nFinish implied with rule9\nAll newly implied Facts: Green('Fiona', True), Kind('Fiona', True), Quiet('Fiona', True), Smart('Fiona', True), White('Anne', True), White('Fiona', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n4 (all x (Quiet(x) & -Nice(x) -> Smart(x))).  [assumption].\n5 (all x (Green(x) -> Kind(x))).  [assumption].\n7 -Nice(Fiona) -> Green(Fiona).  [assumption].\n9 (all x (Kind(x) & Green(x) -> Quiet(x))).  [assumption].\n10 Smart(Fiona).  [goal].\n15 -Green(x) | Kind(x).  [clausify(5)].\n18 -Kind(x) | -Green(x) | Quiet(x).  [clausify(9)].\n19 -Quiet(x) | Nice(x) | Smart(x).  [clausify(4)].\n23 -Green(x) | Quiet(x) | -Green(x).  [resolve(18,a,15,b)].\n24 -Smart(Fiona).  [deny(10)].\n36 -Green(x) | -Green(x) | Nice(x) | Smart(x).  [resolve(23,b,19,a)].\n37 -Nice(Fiona).  [assumption].\n40 Nice(Fiona) | Green(Fiona).  [clausify(7)].\n45 -Green(Fiona) | -Green(Fiona) | Nice(Fiona).  [resolve(36,d,24,a)].\n54 Green(Fiona).  [resolve(40,a,37,a)].\n57 -Green(Fiona) | -Green(Fiona).  [resolve(45,c,37,a)].\n58 $F.  [copy(57),merge(b),unit_del(a,54)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-401_Q15",
    "context": "Anne is cold. Anne is kind. Charlie is blue. Charlie is round. Dave is blue. Fiona is not green. Fiona is kind. If Charlie is cold then Charlie is quiet. If Charlie is big then Charlie is not green. If Anne is kind then Anne is big. All big people are blue. Blue people are quiet. If Dave is kind then Dave is cold. If someone is round then they are green. Quiet people are round. If someone is kind and not blue then they are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not cold.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 51)"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n5 (all x (Blue(x) -> Quiet(x))).  [assumption].\n7 (all x (Round(x) -> Green(x))).  [assumption].\n8 (all x (Quiet(x) -> Round(x))).  [assumption].\n9 (all x (Kind(x) & -Blue(x) -> Round(x))).  [assumption].\n17 Kind(Fiona).  [assumption].\n18 -Kind(x) | Blue(x) | Round(x).  [clausify(9)].\n19 -Blue(x) | Quiet(x).  [clausify(5)].\n24 Blue(Fiona) | Round(Fiona).  [resolve(18,a,17,a)].\n25 -Round(x) | Green(x).  [clausify(7)].\n27 -Quiet(x) | Round(x).  [clausify(8)].\n29 Round(Fiona) | Quiet(Fiona).  [resolve(24,a,19,a)].\n31 -Green(Fiona).  [assumption].\n33 -Quiet(x) | Green(x).  [resolve(27,b,25,a)].\n35 Quiet(Fiona) | Green(Fiona).  [resolve(29,a,25,a)].\n39 -Quiet(Fiona).  [resolve(33,b,31,a)].\n42 Quiet(Fiona).  [resolve(35,b,31,a)].\n44 $F.  [resolve(42,a,39,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-352_Q8",
    "context": "Charlie is furry. Charlie is green. Charlie is white. Dave is blue. Dave is cold. Gary is cold. Gary is rough. Harry is blue. Harry is furry. Harry is rough. Harry is white. Nice, cold people are green. Rough people are green. Green people are blue. If someone is blue then they are nice. Furry, green people are rough. Green, nice people are furry. White people are nice. Cold people are blue. All rough, nice people are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not furry.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Furry($x, bool) ::: Is x furry?\n  Green($x, bool) ::: Is x green?\n  White($x, bool) ::: Is x white?\n  Blue($x, bool) ::: Is x blue?\n  Cold($x, bool) ::: Is x cold?\n  Rough($x, bool) ::: Is x rough?\n  Nice($x, bool) ::: Is x nice?\nWe have following known facts from the context:\n  Furry(Charlie, True)\n  Green(Charlie, True)\n  White(Charlie, True)\n  Blue(Dave, True)\n  Cold(Dave, True)\n  Cold(Gary, True)\n  Rough(Gary, True)\n  Blue(Harry, True)\n  Furry(Harry, True)\n  Rough(Harry, True)\n  White(Harry, True)\nWe have following known rules from the context:\n  rule1: Nice($x, True) && Cold($x, True) >>> Green($x, True)\n  rule2: Rough($x, True) >>> Green($x, True)\n  rule3: Green($x, True) >>> Blue($x, True)\n  rule4: Blue($x, True) >>> Nice($x, True)\n  rule5: Furry($x, True) && Green($x, True) >>> Rough($x, True)\n  rule6: Green($x, True) && Nice($x, True) >>> Furry($x, True)\n  rule7: White($x, True) >>> Nice($x, True)\n  rule8: Cold($x, True) >>> Blue($x, True)\n  rule9: Rough($x, True) && Nice($x, True) >>> White($x, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Nice($x, True) && Cold($x, True) >>> Green($x, True)\nFinish implied with rule1\nUse rule2: Rough($x, True) >>> Green($x, True)\nBind $x to 'Gary'\nObtain a new implied fact: Green('Gary', True)\nUse rule3: Green($x, True) >>> Blue($x, True)\nFinish implied with rule3\nUse rule5: Furry($x, True) && Green($x, True) >>> Rough($x, True)\nFinish implied with rule5\nUse rule6: Green($x, True) && Nice($x, True) >>> Furry($x, True)\nFinish implied with rule6\nReuse rule3: Green($x, True) >>> Blue($x, True)\nFinish implied with rule3\nReuse rule5: Furry($x, True) && Green($x, True) >>> Rough($x, True)\nFinish implied with rule5\nReuse rule6: Green($x, True) && Nice($x, True) >>> Furry($x, True)\nFinish implied with rule6\nFinish implied with rule2\nReuse rule3: Green($x, True) >>> Blue($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Blue('Charlie', True)\nUse rule4: Blue($x, True) >>> Nice($x, True)\nFinish implied with rule4\nReuse rule4: Blue($x, True) >>> Nice($x, True)\nFinish implied with rule4\nFinish implied with rule3\nReuse rule4: Blue($x, True) >>> Nice($x, True)\nBind $x to 'Dave'\nObtain a new implied fact: Nice('Dave', True)\nReuse rule1: Nice($x, True) && Cold($x, True) >>> Green($x, True)\nBind $x to 'Dave'\nObtain a new implied fact: Green('Dave', True)\nReuse rule3: Green($x, True) >>> Blue($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Blue('Dave', True)\nFinish implied with rule3\nReuse rule5: Furry($x, True) && Green($x, True) >>> Rough($x, True)\nFinish implied with rule5\nReuse rule6: Green($x, True) && Nice($x, True) >>> Furry($x, True)\nFinish implied with rule6\nFinish implied with rule1\nReuse rule6: Green($x, True) && Nice($x, True) >>> Furry($x, True)\nFinish implied with rule6\nUse rule9: Rough($x, True) && Nice($x, True) >>> White($x, True)\nFinish implied with rule9\nReuse rule1: Nice($x, True) && Cold($x, True) >>> Green($x, True)\nBind $x to 'Harry'\nFinish implied with rule1\nReuse rule6: Green($x, True) && Nice($x, True) >>> Furry($x, True)\nFinish implied with rule6\nReuse rule9: Rough($x, True) && Nice($x, True) >>> White($x, True)\nFinish implied with rule9\nReuse rule1: Nice($x, True) && Cold($x, True) >>> Green($x, True)\nBind $x to 'Charlie'\nFinish implied with rule1\nReuse rule6: Green($x, True) && Nice($x, True) >>> Furry($x, True)\nFinish implied with rule6\nReuse rule9: Rough($x, True) && Nice($x, True) >>> White($x, True)\nFinish implied with rule9\nReuse rule1: Nice($x, True) && Cold($x, True) >>> Green($x, True)\nBind $x to 'Gary'\nObtain an already known or implied fact: Green('Gary', True)\nFinish implied with rule1\nReuse rule6: Green($x, True) && Nice($x, True) >>> Furry($x, True)\nFinish implied with rule6\nReuse rule9: Rough($x, True) && Nice($x, True) >>> White($x, True)\nFinish implied with rule9\nFinish implied with rule4\nReuse rule5: Furry($x, True) && Green($x, True) >>> Rough($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Rough('Charlie', True)\nReuse rule2: Rough($x, True) >>> Green($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Green('Charlie', True)\nFinish implied with rule2\nReuse rule9: Rough($x, True) && Nice($x, True) >>> White($x, True)\nFinish implied with rule9\nFinish implied with rule5\nReuse rule6: Green($x, True) && Nice($x, True) >>> Furry($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Furry('Charlie', True)\nUnbind $x\nBind $x to 'Gary'\nObtain a new implied fact: Furry('Gary', True)\nReuse rule5: Furry($x, True) && Green($x, True) >>> Rough($x, True)\nBind $x to 'Gary'\nObtain an already known or implied fact: Rough('Gary', True)\nFinish implied with rule5\nReuse rule5: Furry($x, True) && Green($x, True) >>> Rough($x, True)\nBind $x to 'Dave'\nObtain a new implied fact: Rough('Dave', True)\nReuse rule2: Rough($x, True) >>> Green($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Green('Dave', True)\nFinish implied with rule2\nReuse rule9: Rough($x, True) && Nice($x, True) >>> White($x, True)\nFinish implied with rule9\nFinish implied with rule5\nFinish implied with rule6\nUse rule7: White($x, True) >>> Nice($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Nice('Charlie', True)\nUnbind $x\nBind $x to 'Harry'\nObtain an already known or implied fact: Nice('Harry', True)\nUnbind $x\nFinish implied with rule7\nUse rule8: Cold($x, True) >>> Blue($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Blue('Dave', True)\nUnbind $x\nBind $x to 'Gary'\nObtain an already known or implied fact: Blue('Gary', True)\nUnbind $x\nFinish implied with rule8\nReuse rule9: Rough($x, True) && Nice($x, True) >>> White($x, True)\nBind $x to 'Gary'\nObtain a new implied fact: White('Gary', True)\nReuse rule7: White($x, True) >>> Nice($x, True)\nBind $x to 'Gary'\nObtain an already known or implied fact: Nice('Gary', True)\nFinish implied with rule7\nReuse rule7: White($x, True) >>> Nice($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Nice('Dave', True)\nFinish implied with rule7\nFinish implied with rule9\nAll newly implied Facts: Blue('Charlie', True), Furry('Gary', True), Green('Dave', True), Green('Gary', True), Nice('Dave', True), Rough('Charlie', True), Rough('Dave', True), White('Gary', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "B",
        "reasoning": "prove negation of original conclusion:\n1 (all x (Nice(x) & Cold(x) -> Green(x))).  [assumption].\n4 (all x (Blue(x) -> Nice(x))).  [assumption].\n6 (all x (Green(x) & Nice(x) -> Furry(x))).  [assumption].\n10 --Furry(Dave).  [goal].\n14 -Green(x) | -Nice(x) | Furry(x).  [clausify(6)].\n15 -Furry(Dave).  [deny(10)].\n20 -Blue(x) | Nice(x).  [clausify(4)].\n21 Blue(Dave).  [assumption].\n25 -Nice(x) | -Cold(x) | Green(x).  [clausify(1)].\n26 Cold(Dave).  [assumption].\n35 -Green(Dave) | -Nice(Dave).  [resolve(15,a,14,c)].\n38 -Nice(Dave) | Green(Dave).  [resolve(25,b,26,a)].\n44 Nice(Dave).  [resolve(20,a,21,a)].\n46 -Nice(Dave) | -Nice(Dave).  [resolve(38,b,35,a)].\n47 $F.  [copy(46),merge(b),unit_del(a,44)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-842_Q7",
    "context": "Anne is big. Anne is cold. Anne is young. Dave is round. Dave is white. Erin is cold. Erin is white. Erin is young. Gary is cold. Gary is young. If something is big then it is cold. Round things are big. Furry, round things are big. All cold things are furry. If Erin is round then Erin is young. All furry, big things are young. White things are round. If Gary is cold then Gary is white. All white, young things are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is furry.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Big($x, bool) ::: Is x big?\n  Cold($x, bool) ::: Is x cold?\n  Young($x, bool) ::: Is x young?\n  Round($x, bool) ::: Is x round?\n  White($x, bool) ::: Is x white?\n  Furry($x, bool) ::: Is x furry?\n  Nice($x, bool) ::: Is x nice?\nWe have following known facts from the context:\n  Big(Anne, True)\n  Cold(Anne, True)\n  Young(Anne, True)\n  Round(Dave, True)\n  White(Dave, True)\n  Cold(Erin, True)\n  White(Erin, True)\n  Young(Erin, True)\n  Cold(Gary, True)\n  Young(Gary, True)\nWe have following known rules from the context:\n  rule1: Big($x, True) >>> Cold($x, True)\n  rule2: Round($x, True) >>> Big($x, True)\n  rule3: Round($x, True) && Furry($x, True) >>> Big($x, True)\n  rule4: Cold($x, True) >>> Furry($x, True)\n  rule5: Round(Erin, True) >>> Young(Erin, True)\n  rule6: Furry($x, True) && Big($x, True) >>> Young($x, True)\n  rule7: White($x, True) >>> Round($x, True)\n  rule8: Cold(Gary, True) >>> White(Gary, True)\n  rule9: White($x, True) && Young($x, True) >>> Nice($x, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Big($x, True) >>> Cold($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Cold('Anne', True)\nUnbind $x\nFinish implied with rule1\nUse rule2: Round($x, True) >>> Big($x, True)\nBind $x to 'Dave'\nObtain a new implied fact: Big('Dave', True)\nReuse rule1: Big($x, True) >>> Cold($x, True)\nBind $x to 'Dave'\nObtain a new implied fact: Cold('Dave', True)\nUse rule4: Cold($x, True) >>> Furry($x, True)\nFinish implied with rule4\nUse rule8: Cold(Gary, True) >>> White(Gary, True)\nFinish implied with rule8\nFinish implied with rule1\nUse rule6: Furry($x, True) && Big($x, True) >>> Young($x, True)\nFinish implied with rule6\nFinish implied with rule2\nUse rule3: Round($x, True) && Furry($x, True) >>> Big($x, True)\nBind $x to 'Dave'\nUnbind $x\nFinish implied with rule3\nReuse rule4: Cold($x, True) >>> Furry($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Furry('Anne', True)\nReuse rule3: Round($x, True) && Furry($x, True) >>> Big($x, True)\nBind $x to 'Anne'\nFinish implied with rule3\nReuse rule6: Furry($x, True) && Big($x, True) >>> Young($x, True)\nFinish implied with rule6\nReuse rule3: Round($x, True) && Furry($x, True) >>> Big($x, True)\nBind $x to 'Erin'\nFinish implied with rule3\nReuse rule6: Furry($x, True) && Big($x, True) >>> Young($x, True)\nFinish implied with rule6\nReuse rule3: Round($x, True) && Furry($x, True) >>> Big($x, True)\nBind $x to 'Gary'\nFinish implied with rule3\nReuse rule6: Furry($x, True) && Big($x, True) >>> Young($x, True)\nFinish implied with rule6\nReuse rule3: Round($x, True) && Furry($x, True) >>> Big($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Big('Dave', True)\nFinish implied with rule3\nReuse rule6: Furry($x, True) && Big($x, True) >>> Young($x, True)\nFinish implied with rule6\nFinish implied with rule4\nUse rule5: Round(Erin, True) >>> Young(Erin, True)\nFinish implied with rule5\nReuse rule6: Furry($x, True) && Big($x, True) >>> Young($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Young('Anne', True)\nUnbind $x\nBind $x to 'Erin'\nUnbind $x\nBind $x to 'Gary'\nUnbind $x\nBind $x to 'Dave'\nObtain a new implied fact: Young('Dave', True)\nUse rule9: White($x, True) && Young($x, True) >>> Nice($x, True)\nFinish implied with rule9\nFinish implied with rule6\nUse rule7: White($x, True) >>> Round($x, True)\nBind $x to 'Dave'\nObtain an already known or implied fact: Round('Dave', True)\nUnbind $x\nBind $x to 'Erin'\nObtain a new implied fact: Round('Erin', True)\nReuse rule2: Round($x, True) >>> Big($x, True)\nBind $x to 'Erin'\nObtain a new implied fact: Big('Erin', True)\nReuse rule1: Big($x, True) >>> Cold($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Cold('Erin', True)\nFinish implied with rule1\nReuse rule6: Furry($x, True) && Big($x, True) >>> Young($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Young('Erin', True)\nFinish implied with rule6\nFinish implied with rule2\nReuse rule3: Round($x, True) && Furry($x, True) >>> Big($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Big('Erin', True)\nFinish implied with rule3\nReuse rule5: Round(Erin, True) >>> Young(Erin, True)\nObtain an already known or implied fact: Young('Erin', True)\nFinish implied with rule5\nFinish implied with rule7\nReuse rule8: Cold(Gary, True) >>> White(Gary, True)\nObtain a new implied fact: White('Gary', True)\nReuse rule7: White($x, True) >>> Round($x, True)\nBind $x to 'Gary'\nObtain a new implied fact: Round('Gary', True)\nReuse rule2: Round($x, True) >>> Big($x, True)\nBind $x to 'Gary'\nObtain a new implied fact: Big('Gary', True)\nReuse rule1: Big($x, True) >>> Cold($x, True)\nBind $x to 'Gary'\nObtain an already known or implied fact: Cold('Gary', True)\nFinish implied with rule1\nReuse rule6: Furry($x, True) && Big($x, True) >>> Young($x, True)\nBind $x to 'Gary'\nObtain an already known or implied fact: Young('Gary', True)\nFinish implied with rule6\nFinish implied with rule2\nReuse rule3: Round($x, True) && Furry($x, True) >>> Big($x, True)\nBind $x to 'Gary'\nObtain an already known or implied fact: Big('Gary', True)\nFinish implied with rule3\nReuse rule5: Round(Erin, True) >>> Young(Erin, True)\nFinish implied with rule5\nFinish implied with rule7\nReuse rule9: White($x, True) && Young($x, True) >>> Nice($x, True)\nFinish implied with rule9\nFinish implied with rule8\nReuse rule9: White($x, True) && Young($x, True) >>> Nice($x, True)\nBind $x to 'Dave'\nObtain a new implied fact: Nice('Dave', True)\nUnbind $x\nBind $x to 'Erin'\nObtain a new implied fact: Nice('Erin', True)\nUnbind $x\nBind $x to 'Gary'\nObtain a new implied fact: Nice('Gary', True)\nUnbind $x\nFinish implied with rule9\nAll newly implied Facts: Big('Dave', True), Big('Erin', True), Big('Gary', True), Cold('Dave', True), Furry('Anne', True), Nice('Dave', True), Nice('Erin', True), Nice('Gary', True), Round('Erin', True), Round('Gary', True), White('Gary', True), Young('Dave', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x (Big(x) -> Cold(x))).  [assumption].\n2 (all x (Round(x) -> Big(x))).  [assumption].\n4 (all x (Cold(x) -> Furry(x))).  [assumption].\n10 Furry(Dave).  [goal].\n11 -Big(x) | Cold(x).  [clausify(1)].\n13 -Round(x) | Big(x).  [clausify(2)].\n16 -Cold(x) | Furry(x).  [clausify(4)].\n22 -Round(x) | Cold(x).  [resolve(13,b,11,a)].\n30 -Round(x) | Furry(x).  [resolve(22,b,16,a)].\n31 Round(Dave).  [assumption].\n35 -Furry(Dave).  [deny(10)].\n38 Furry(Dave).  [resolve(30,a,31,a)].\n48 $F.  [resolve(38,a,35,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-296_Q13",
    "context": "Anne is green. Charlie is big. Charlie is quiet. Charlie is round. Erin is green. Erin is kind. Erin is nice. Erin is quiet. Fiona is blue. Fiona is kind. Fiona is quiet. If something is kind then it is nice. If something is round and quiet then it is blue. If Charlie is kind then Charlie is big. All big, blue things are kind. Nice things are quiet. All green things are big. Quiet things are kind. Big things are kind. If Anne is green then Anne is round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not blue.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Green($x, bool) ::: Is x green?\n  Big($x, bool) ::: Is x big?\n  Quiet($x, bool) ::: Is x quiet?\n  Round($x, bool) ::: Is x round?\n  Kind($x, bool) ::: Is x kind?\n  Nice($x, bool) ::: Is x nice?\n  Blue($x, bool) ::: Is x blue?\nWe have following known facts from the context:\n  Green(Anne, True)\n  Big(Charlie, True)\n  Quiet(Charlie, True)\n  Round(Charlie, True)\n  Green(Erin, True)\n  Kind(Erin, True)\n  Nice(Erin, True)\n  Quiet(Erin, True)\n  Blue(Fiona, True)\n  Kind(Fiona, True)\n  Quiet(Fiona, True)\nWe have following known rules from the context:\n  rule1: Kind($x, True) >>> Nice($x, True)\n  rule2: Round($x, True) && Quiet($x, True) >>> Blue($x, True)\n  rule3: Kind(Charlie, True) >>> Big(Charlie, True)\n  rule4: Big($x, True) && Blue($x, True) >>> Kind($x, True)\n  rule5: Nice($x, True) >>> Quiet($x, True)\n  rule6: Green($x, True) >>> Big($x, True)\n  rule7: Quiet($x, True) >>> Kind($x, True)\n  rule8: Big($x, True) >>> Kind($x, True)\n  rule9: Green(Anne, True) >>> Round(Anne, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Kind($x, True) >>> Nice($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Nice('Erin', True)\nUnbind $x\nBind $x to 'Fiona'\nObtain a new implied fact: Nice('Fiona', True)\nUse rule5: Nice($x, True) >>> Quiet($x, True)\nFinish implied with rule5\nFinish implied with rule1\nUse rule2: Round($x, True) && Quiet($x, True) >>> Blue($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Blue('Charlie', True)\nUse rule4: Big($x, True) && Blue($x, True) >>> Kind($x, True)\nFinish implied with rule4\nFinish implied with rule2\nUse rule3: Kind(Charlie, True) >>> Big(Charlie, True)\nFinish implied with rule3\nReuse rule4: Big($x, True) && Blue($x, True) >>> Kind($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Kind('Charlie', True)\nReuse rule1: Kind($x, True) >>> Nice($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Nice('Charlie', True)\nReuse rule5: Nice($x, True) >>> Quiet($x, True)\nFinish implied with rule5\nFinish implied with rule1\nReuse rule3: Kind(Charlie, True) >>> Big(Charlie, True)\nObtain an already known or implied fact: Big('Charlie', True)\nFinish implied with rule3\nFinish implied with rule4\nReuse rule5: Nice($x, True) >>> Quiet($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Quiet('Erin', True)\nUnbind $x\nBind $x to 'Fiona'\nObtain an already known or implied fact: Quiet('Fiona', True)\nUnbind $x\nBind $x to 'Charlie'\nObtain an already known or implied fact: Quiet('Charlie', True)\nUnbind $x\nFinish implied with rule5\nUse rule6: Green($x, True) >>> Big($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Big('Anne', True)\nReuse rule4: Big($x, True) && Blue($x, True) >>> Kind($x, True)\nBind $x to 'Anne'\nFinish implied with rule4\nUse rule8: Big($x, True) >>> Kind($x, True)\nFinish implied with rule8\nReuse rule4: Big($x, True) && Blue($x, True) >>> Kind($x, True)\nBind $x to 'Erin'\nFinish implied with rule4\nReuse rule8: Big($x, True) >>> Kind($x, True)\nFinish implied with rule8\nFinish implied with rule6\nUse rule7: Quiet($x, True) >>> Kind($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Kind('Charlie', True)\nUnbind $x\nBind $x to 'Erin'\nObtain an already known or implied fact: Kind('Erin', True)\nUnbind $x\nBind $x to 'Fiona'\nObtain an already known or implied fact: Kind('Fiona', True)\nUnbind $x\nFinish implied with rule7\nReuse rule8: Big($x, True) >>> Kind($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Kind('Charlie', True)\nUnbind $x\nBind $x to 'Anne'\nObtain a new implied fact: Kind('Anne', True)\nReuse rule1: Kind($x, True) >>> Nice($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Nice('Anne', True)\nReuse rule5: Nice($x, True) >>> Quiet($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Quiet('Anne', True)\nReuse rule2: Round($x, True) && Quiet($x, True) >>> Blue($x, True)\nBind $x to 'Anne'\nFinish implied with rule2\nReuse rule7: Quiet($x, True) >>> Kind($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Kind('Anne', True)\nFinish implied with rule7\nFinish implied with rule5\nFinish implied with rule1\nReuse rule3: Kind(Charlie, True) >>> Big(Charlie, True)\nFinish implied with rule3\nFinish implied with rule8\nUse rule9: Green(Anne, True) >>> Round(Anne, True)\nObtain a new implied fact: Round('Anne', True)\nReuse rule2: Round($x, True) && Quiet($x, True) >>> Blue($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Blue('Anne', True)\nReuse rule4: Big($x, True) && Blue($x, True) >>> Kind($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Kind('Anne', True)\nFinish implied with rule4\nFinish implied with rule2\nFinish implied with rule9\nAll newly implied Facts: Big('Anne', True), Blue('Anne', True), Blue('Charlie', True), Kind('Anne', True), Kind('Charlie', True), Nice('Anne', True), Nice('Charlie', True), Nice('Fiona', True), Quiet('Anne', True), Round('Anne', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Kind(x) -> Nice(x))) # label(non_clause). [assumption].\n2 (all x (Round(x) & Quiet(x) -> Blue(x))) # label(non_clause). [assumption].\n3 Kind(Charlie) -> Big(Charlie) # label(non_clause). [assumption].\n4 (all x (Big(x) & Blue(x) -> Kind(x))) # label(non_clause). [assumption].\n5 (all x (Nice(x) -> Quiet(x))) # label(non_clause). [assumption].\n6 (all x (Green(x) -> Big(x))) # label(non_clause). [assumption].\n7 (all x (Quiet(x) -> Kind(x))) # label(non_clause). [assumption].\n8 (all x (Big(x) -> Kind(x))) # label(non_clause). [assumption].\n9 Green(Anne) -> Round(Anne) # label(non_clause). [assumption].\n10 -Blue(Erin) # label(non_clause) # label(goal). [goal].\n11 Green(Anne). [assumption].\n12 Big(Charlie). [assumption].\n13 Quiet(Charlie). [assumption].\n14 Round(Charlie). [assumption].\n15 Green(Erin). [assumption].\n16 Kind(Erin). [assumption].\n17 Nice(Erin). [assumption].\n18 Quiet(Erin). [assumption].\n19 Blue(Fiona). [assumption].\n20 Kind(Fiona). [assumption].\n21 Quiet(Fiona). [assumption].\n22 -Kind(x) | Nice(x). [clausify(1)].\n23 -Round(x) | -Quiet(x) | Blue(x). [clausify(2)].\n24 -Kind(Charlie) | Big(Charlie). [clausify(3)].\n25 -Big(x) | -Blue(x) | Kind(x). [clausify(4)].\n26 -Nice(x) | Quiet(x). [clausify(5)].\n27 -Green(x) | Big(x). [clausify(6)].\n28 -Quiet(x) | Kind(x). [clausify(7)].\n29 -Big(x) | Kind(x). [clausify(8)].\n30 -Green(Anne) | Round(Anne). [clausify(9)].\n31 Blue(Erin). [deny(10)].\n32 Derived: Big(Anne). [resolve(27,a,11,a)].\n33 Derived: Big(Erin). [resolve(27,a,15,a)].\n34 Derived: Round(Anne). [resolve(30,a,11,a)].\n35 Derived: -Blue(Charlie) | Kind(Charlie). [resolve(25,a,12,a)].\n36 Derived: Kind(Charlie). [resolve(29,a,12,a)].\n37 Derived: -Blue(Anne) | Kind(Anne). [resolve(32,a,25,a)].\n38 Derived: Kind(Anne). [resolve(32,a,29,a)].\n39 Derived: -Blue(Erin) | Kind(Erin). [resolve(33,a,25,a)].\n40 Derived: Kind(Erin). [resolve(33,a,29,a)].\n41 Derived: -Round(Charlie) | Blue(Charlie). [resolve(23,b,13,a)].\n42 Derived: -Round(Fiona) | Blue(Fiona). [resolve(23,b,21,a)].\n43 Derived: -Nice(x) | -Round(x) | Blue(x). [resolve(26,b,23,b)].\n44 Derived: Kind(Fiona). [resolve(28,a,21,a)].\n45 Derived: Kind(x) | -Nice(x). [resolve(28,a,26,b)].\n46 Derived: Blue(Charlie). [resolve(41,a,14,a)].\n47 Derived: -Nice(Anne) | Blue(Anne). [resolve(43,b,34,a)].\n48 Derived: Nice(Erin). [resolve(22,a,16,a)].\n49 Derived: Nice(Fiona). [resolve(22,a,20,a)].\n50 Derived: -Blue(Charlie) | Nice(Charlie). [resolve(35,b,22,a)].\n51 Derived: Nice(Charlie). [resolve(36,a,22,a)].\n52 Derived: -Blue(Anne) | Nice(Anne). [resolve(37,b,22,a)].\n53 Derived: Nice(Anne). [resolve(38,a,22,a)].\n54 Derived: Blue(Anne). [resolve(53,a,47,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Kind(x) -> Nice(x))) # label(non_clause). [assumption].\n2 (all x (Round(x) & Quiet(x) -> Blue(x))) # label(non_clause). [assumption].\n3 Kind(Charlie) -> Big(Charlie) # label(non_clause). [assumption].\n4 (all x (Big(x) & Blue(x) -> Kind(x))) # label(non_clause). [assumption].\n5 (all x (Nice(x) -> Quiet(x))) # label(non_clause). [assumption].\n6 (all x (Green(x) -> Big(x))) # label(non_clause). [assumption].\n7 (all x (Quiet(x) -> Kind(x))) # label(non_clause). [assumption].\n8 (all x (Big(x) -> Kind(x))) # label(non_clause). [assumption].\n9 Green(Anne) -> Round(Anne) # label(non_clause). [assumption].\n10 --Blue(Erin) # label(non_clause) # label(goal). [goal].\n11 Green(Anne). [assumption].\n12 Big(Charlie). [assumption].\n13 Quiet(Charlie). [assumption].\n14 Round(Charlie). [assumption].\n15 Green(Erin). [assumption].\n16 Kind(Erin). [assumption].\n17 Nice(Erin). [assumption].\n18 Quiet(Erin). [assumption].\n19 Blue(Fiona). [assumption].\n20 Kind(Fiona). [assumption].\n21 Quiet(Fiona). [assumption].\n22 -Kind(x) | Nice(x). [clausify(1)].\n23 -Round(x) | -Quiet(x) | Blue(x). [clausify(2)].\n24 -Kind(Charlie) | Big(Charlie). [clausify(3)].\n25 -Big(x) | -Blue(x) | Kind(x). [clausify(4)].\n26 -Nice(x) | Quiet(x). [clausify(5)].\n27 -Green(x) | Big(x). [clausify(6)].\n28 -Quiet(x) | Kind(x). [clausify(7)].\n29 -Big(x) | Kind(x). [clausify(8)].\n30 -Green(Anne) | Round(Anne). [clausify(9)].\n31 -Blue(Erin). [deny(10)].\n32 Derived: Big(Anne). [resolve(27,a,11,a)].\n33 Derived: Big(Erin). [resolve(27,a,15,a)].\n34 Derived: Round(Anne). [resolve(30,a,11,a)].\n35 Derived: -Blue(Charlie) | Kind(Charlie). [resolve(25,a,12,a)].\n36 Derived: Kind(Charlie). [resolve(29,a,12,a)].\n37 Derived: -Blue(Anne) | Kind(Anne). [resolve(32,a,25,a)].\n38 Derived: Kind(Anne). [resolve(32,a,29,a)].\n39 Derived: -Blue(Erin) | Kind(Erin). [resolve(33,a,25,a)].\n40 Derived: Kind(Erin). [resolve(33,a,29,a)].\n41 Derived: -Round(Charlie) | Blue(Charlie). [resolve(23,b,13,a)].\n42 Derived: -Round(Erin) | Blue(Erin). [resolve(23,b,18,a)].\n43 Derived: -Round(Fiona) | Blue(Fiona). [resolve(23,b,21,a)].\n44 Derived: -Nice(x) | -Round(x) | Blue(x). [resolve(26,b,23,b)].\n45 Derived: Kind(Fiona). [resolve(28,a,21,a)].\n46 Derived: Kind(x) | -Nice(x). [resolve(28,a,26,b)].\n47 Derived: Blue(Charlie). [resolve(41,a,14,a)].\n48 Derived: -Nice(Anne) | Blue(Anne). [resolve(44,b,34,a)].\n49 Derived: Nice(Erin). [resolve(22,a,16,a)].\n50 Derived: Nice(Fiona). [resolve(22,a,20,a)].\n51 Derived: -Blue(Charlie) | Nice(Charlie). [resolve(35,b,22,a)].\n52 Derived: Nice(Charlie). [resolve(36,a,22,a)].\n53 Derived: -Blue(Anne) | Nice(Anne). [resolve(37,b,22,a)].\n54 Derived: Nice(Anne). [resolve(38,a,22,a)].\n55 Derived: Blue(Anne). [resolve(54,a,48,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "No Output"
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-203_Q21",
    "context": "Charlie is cold. Charlie is young. Dave is cold. Erin is white. Fiona is nice. Fiona is white. Fiona is young. All blue things are white. If something is nice and blue then it is white. All young, blue things are not green. If something is white then it is nice. If something is nice then it is round. If Charlie is round then Charlie is white. All blue things are young. If something is cold and green then it is young. Round things are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not cold.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Cold($x, bool) ::: Is x cold?\n  Young($x, bool) ::: Is x young?\n  White($x, bool) ::: Is x white?\n  Nice($x, bool) ::: Is x nice?\n  Blue($x, bool) ::: Is x blue?\n  Green($x, bool) ::: Is x green?\n  Round($x, bool) ::: Is x round?\nWe have following known facts from the context:\n  Cold(Charlie, True)\n  Young(Charlie, True)\n  Cold(Dave, True)\n  White(Erin, True)\n  Nice(Fiona, True)\n  White(Fiona, True)\n  Young(Fiona, True)\nWe have following known rules from the context:\n  rule1: Blue($x, True) >>> White($x, True)\n  rule2: Nice($x, True) && Blue($x, True) >>> White($x, True)\n  rule3: Young($x, True) && Blue($x, True) >>> Green($x, False)\n  rule4: White($x, True) >>> Nice($x, True)\n  rule5: Nice($x, True) >>> Round($x, True)\n  rule6: Round(Charlie, True) >>> White(Charlie, True)\n  rule7: Blue($x, True) >>> Young($x, True)\n  rule8: Cold($x, True) && Green($x, True) >>> Young($x, True)\n  rule9: Round($x, True) >>> Blue($x, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Blue($x, True) >>> White($x, True)\nFinish implied with rule1\nUse rule2: Nice($x, True) && Blue($x, True) >>> White($x, True)\nBind $x to 'Fiona'\nUnbind $x\nFinish implied with rule2\nUse rule3: Young($x, True) && Blue($x, True) >>> Green($x, False)\nBind $x to 'Charlie'\nUnbind $x\nBind $x to 'Fiona'\nUnbind $x\nFinish implied with rule3\nUse rule4: White($x, True) >>> Nice($x, True)\nBind $x to 'Erin'\nObtain a new implied fact: Nice('Erin', True)\nReuse rule2: Nice($x, True) && Blue($x, True) >>> White($x, True)\nBind $x to 'Erin'\nFinish implied with rule2\nUse rule5: Nice($x, True) >>> Round($x, True)\nFinish implied with rule5\nFinish implied with rule4\nReuse rule5: Nice($x, True) >>> Round($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Round('Fiona', True)\nUse rule6: Round(Charlie, True) >>> White(Charlie, True)\nFinish implied with rule6\nUse rule9: Round($x, True) >>> Blue($x, True)\nFinish implied with rule9\nReuse rule6: Round(Charlie, True) >>> White(Charlie, True)\nFinish implied with rule6\nReuse rule9: Round($x, True) >>> Blue($x, True)\nFinish implied with rule9\nFinish implied with rule5\nReuse rule6: Round(Charlie, True) >>> White(Charlie, True)\nFinish implied with rule6\nUse rule7: Blue($x, True) >>> Young($x, True)\nFinish implied with rule7\nUse rule8: Cold($x, True) && Green($x, True) >>> Young($x, True)\nBind $x to 'Charlie'\nUnbind $x\nBind $x to 'Dave'\nUnbind $x\nFinish implied with rule8\nReuse rule9: Round($x, True) >>> Blue($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Blue('Fiona', True)\nReuse rule1: Blue($x, True) >>> White($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: White('Fiona', True)\nFinish implied with rule1\nReuse rule2: Nice($x, True) && Blue($x, True) >>> White($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: White('Fiona', True)\nFinish implied with rule2\nReuse rule3: Young($x, True) && Blue($x, True) >>> Green($x, False)\nBind $x to 'Fiona'\nObtain a new implied fact: Green('Fiona', False)\nReuse rule8: Cold($x, True) && Green($x, True) >>> Young($x, True)\nBind $x to 'Fiona'\nFinish implied with rule8\nFinish implied with rule3\nReuse rule7: Blue($x, True) >>> Young($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Young('Fiona', True)\nFinish implied with rule7\nReuse rule1: Blue($x, True) >>> White($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: White('Erin', True)\nFinish implied with rule1\nReuse rule2: Nice($x, True) && Blue($x, True) >>> White($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: White('Erin', True)\nFinish implied with rule2\nReuse rule3: Young($x, True) && Blue($x, True) >>> Green($x, False)\nBind $x to 'Erin'\nFinish implied with rule3\nReuse rule7: Blue($x, True) >>> Young($x, True)\nBind $x to 'Erin'\nObtain a new implied fact: Young('Erin', True)\nReuse rule3: Young($x, True) && Blue($x, True) >>> Green($x, False)\nBind $x to 'Erin'\nObtain a new implied fact: Green('Erin', False)\nReuse rule8: Cold($x, True) && Green($x, True) >>> Young($x, True)\nBind $x to 'Erin'\nFinish implied with rule8\nFinish implied with rule3\nFinish implied with rule7\nFinish implied with rule9\nAll newly implied Facts: Blue('Fiona', True), Green('Erin', False), Green('Fiona', False), Nice('Erin', True), Round('Fiona', True), Young('Erin', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Blue(x) -> White(x))) # label(non_clause). [assumption].\n2 (all x (Nice(x) & Blue(x) -> White(x))) # label(non_clause). [assumption].\n3 (all x (Young(x) & Blue(x) -> -Green(x))) # label(non_clause). [assumption].\n4 (all x (White(x) -> Nice(x))) # label(non_clause). [assumption].\n5 (all x (Nice(x) -> Round(x))) # label(non_clause). [assumption].\n6 Round(Charlie) -> White(Charlie) # label(non_clause). [assumption].\n7 (all x (Blue(x) -> Young(x))) # label(non_clause). [assumption].\n8 (all x (Cold(x) & Green(x) -> Young(x))) # label(non_clause). [assumption].\n9 (all x (Round(x) -> Blue(x))) # label(non_clause). [assumption].\n10 -Cold(Fiona) # label(non_clause) # label(goal). [goal].\n11 Cold(Charlie). [assumption].\n12 Young(Charlie). [assumption].\n13 Cold(Dave). [assumption].\n14 White(Erin). [assumption].\n15 Nice(Fiona). [assumption].\n16 White(Fiona). [assumption].\n17 Young(Fiona). [assumption].\n18 -Blue(x) | White(x). [clausify(1)].\n19 -Nice(x) | -Blue(x) | White(x). [clausify(2)].\n20 -Young(x) | -Blue(x) | -Green(x). [clausify(3)].\n21 -White(x) | Nice(x). [clausify(4)].\n22 -Nice(x) | Round(x). [clausify(5)].\n23 -Round(Charlie) | White(Charlie). [clausify(6)].\n24 -Blue(x) | Young(x). [clausify(7)].\n25 -Cold(x) | -Green(x) | Young(x). [clausify(8)].\n26 -Round(x) | Blue(x). [clausify(9)].\n27 Cold(Fiona). [deny(10)].\n28 Derived: -Green(Charlie) | Young(Charlie). [resolve(25,a,11,a)].\n29 Derived: -Green(Dave) | Young(Dave). [resolve(25,a,13,a)].\n30 Derived: -Green(Fiona) | Young(Fiona). [resolve(27,a,25,a)].\n31 Derived: -Blue(Charlie) | -Green(Charlie). [resolve(20,a,12,a)].\n32 Derived: -Blue(Fiona) | -Green(Fiona). [resolve(20,a,17,a)].\n33 Derived: -Blue(x) | -Blue(x) | -Green(x). [resolve(24,b,20,a)].\n34 Derived: Nice(Erin). [resolve(21,a,14,a)].\n35 Derived: Nice(Fiona). [resolve(21,a,16,a)].\n36 Derived: Nice(x) | -Blue(x). [resolve(21,a,18,b)].\n37 Derived: -Round(Charlie) | Nice(Charlie). [resolve(23,b,21,a)].\n38 Derived: Round(Fiona). [resolve(22,a,15,a)].\n39 Derived: Round(Erin). [resolve(34,a,22,a)].\n40 Derived: -Blue(x) | Round(x). [resolve(36,a,22,a)].\n41 Derived: Blue(Fiona). [resolve(38,a,26,a)].\n42 Derived: Blue(Erin). [resolve(39,a,26,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Blue(x) -> White(x))) # label(non_clause). [assumption].\n2 (all x (Nice(x) & Blue(x) -> White(x))) # label(non_clause). [assumption].\n3 (all x (Young(x) & Blue(x) -> -Green(x))) # label(non_clause). [assumption].\n4 (all x (White(x) -> Nice(x))) # label(non_clause). [assumption].\n5 (all x (Nice(x) -> Round(x))) # label(non_clause). [assumption].\n6 Round(Charlie) -> White(Charlie) # label(non_clause). [assumption].\n7 (all x (Blue(x) -> Young(x))) # label(non_clause). [assumption].\n8 (all x (Cold(x) & Green(x) -> Young(x))) # label(non_clause). [assumption].\n9 (all x (Round(x) -> Blue(x))) # label(non_clause). [assumption].\n10 --Cold(Fiona) # label(non_clause) # label(goal). [goal].\n11 Cold(Charlie). [assumption].\n12 Young(Charlie). [assumption].\n13 Cold(Dave). [assumption].\n14 White(Erin). [assumption].\n15 Nice(Fiona). [assumption].\n16 White(Fiona). [assumption].\n17 Young(Fiona). [assumption].\n18 -Blue(x) | White(x). [clausify(1)].\n19 -Nice(x) | -Blue(x) | White(x). [clausify(2)].\n20 -Young(x) | -Blue(x) | -Green(x). [clausify(3)].\n21 -White(x) | Nice(x). [clausify(4)].\n22 -Nice(x) | Round(x). [clausify(5)].\n23 -Round(Charlie) | White(Charlie). [clausify(6)].\n24 -Blue(x) | Young(x). [clausify(7)].\n25 -Cold(x) | -Green(x) | Young(x). [clausify(8)].\n26 -Round(x) | Blue(x). [clausify(9)].\n27 -Cold(Fiona). [deny(10)].\n28 Derived: -Green(Charlie) | Young(Charlie). [resolve(25,a,11,a)].\n29 Derived: -Green(Dave) | Young(Dave). [resolve(25,a,13,a)].\n30 Derived: -Blue(Charlie) | -Green(Charlie). [resolve(20,a,12,a)].\n31 Derived: -Blue(Fiona) | -Green(Fiona). [resolve(20,a,17,a)].\n32 Derived: -Blue(x) | -Blue(x) | -Green(x). [resolve(24,b,20,a)].\n33 Derived: Nice(Erin). [resolve(21,a,14,a)].\n34 Derived: Nice(Fiona). [resolve(21,a,16,a)].\n35 Derived: Nice(x) | -Blue(x). [resolve(21,a,18,b)].\n36 Derived: -Round(Charlie) | Nice(Charlie). [resolve(23,b,21,a)].\n37 Derived: Round(Fiona). [resolve(22,a,15,a)].\n38 Derived: Round(Erin). [resolve(33,a,22,a)].\n39 Derived: -Blue(x) | Round(x). [resolve(35,a,22,a)].\n40 Derived: Blue(Fiona). [resolve(37,a,26,a)].\n41 Derived: Blue(Erin). [resolve(38,a,26,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "No Output"
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1119_Q6",
    "context": "Anne is blue. Anne is cold. Anne is kind. Anne is quiet. Bob is blue. Bob is kind. Bob is nice. Bob is not quiet. Dave is not furry. Dave is green. Dave is quiet. Fiona is cold. All cold people are blue. Green, nice people are kind. All blue people are kind. Kind, cold people are nice. If someone is nice then they are green. Cold, green people are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not kind.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "B",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Blue($x, bool) ::: Is x blue?\n  Cold($x, bool) ::: Is x cold?\n  Kind($x, bool) ::: Is x kind?\n  Quiet($x, bool) ::: Is x quiet?\n  Nice($x, bool) ::: Is x nice?\n  Furry($x, bool) ::: Is x furry?\n  Green($x, bool) ::: Is x green?\nWe have following known facts from the context:\n  Blue(Anne, True)\n  Cold(Anne, True)\n  Kind(Anne, True)\n  Quiet(Anne, True)\n  Blue(Bob, True)\n  Kind(Bob, True)\n  Nice(Bob, True)\n  Quiet(Bob, False)\n  Furry(Dave, False)\n  Green(Dave, True)\n  Quiet(Dave, True)\n  Cold(Fiona, True)\nWe have following known rules from the context:\n  rule1: Cold($x, True) >>> Blue($x, True)\n  rule2: Green($x, True) && Nice($x, True) >>> Kind($x, True)\n  rule3: Blue($x, True) >>> Kind($x, True)\n  rule4: Kind($x, True) && Cold($x, True) >>> Nice($x, True)\n  rule5: Nice($x, True) >>> Green($x, True)\n  rule6: Cold($x, True) && Green($x, True) >>> Quiet($x, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Cold($x, True) >>> Blue($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Blue('Anne', True)\nUnbind $x\nBind $x to 'Fiona'\nObtain a new implied fact: Blue('Fiona', True)\nUse rule3: Blue($x, True) >>> Kind($x, True)\nFinish implied with rule3\nFinish implied with rule1\nUse rule2: Green($x, True) && Nice($x, True) >>> Kind($x, True)\nBind $x to 'Dave'\nUnbind $x\nFinish implied with rule2\nReuse rule3: Blue($x, True) >>> Kind($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Kind('Anne', True)\nUnbind $x\nBind $x to 'Bob'\nObtain an already known or implied fact: Kind('Bob', True)\nUnbind $x\nBind $x to 'Fiona'\nObtain a new implied fact: Kind('Fiona', True)\nUse rule4: Kind($x, True) && Cold($x, True) >>> Nice($x, True)\nFinish implied with rule4\nFinish implied with rule3\nReuse rule4: Kind($x, True) && Cold($x, True) >>> Nice($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Nice('Anne', True)\nReuse rule2: Green($x, True) && Nice($x, True) >>> Kind($x, True)\nBind $x to 'Anne'\nFinish implied with rule2\nUse rule5: Nice($x, True) >>> Green($x, True)\nFinish implied with rule5\nReuse rule2: Green($x, True) && Nice($x, True) >>> Kind($x, True)\nBind $x to 'Fiona'\nFinish implied with rule2\nReuse rule5: Nice($x, True) >>> Green($x, True)\nFinish implied with rule5\nFinish implied with rule4\nReuse rule5: Nice($x, True) >>> Green($x, True)\nBind $x to 'Bob'\nObtain a new implied fact: Green('Bob', True)\nReuse rule2: Green($x, True) && Nice($x, True) >>> Kind($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Kind('Bob', True)\nFinish implied with rule2\nUse rule6: Cold($x, True) && Green($x, True) >>> Quiet($x, True)\nFinish implied with rule6\nReuse rule2: Green($x, True) && Nice($x, True) >>> Kind($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Kind('Anne', True)\nFinish implied with rule2\nReuse rule6: Cold($x, True) && Green($x, True) >>> Quiet($x, True)\nFinish implied with rule6\nReuse rule2: Green($x, True) && Nice($x, True) >>> Kind($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Kind('Fiona', True)\nFinish implied with rule2\nReuse rule6: Cold($x, True) && Green($x, True) >>> Quiet($x, True)\nFinish implied with rule6\nFinish implied with rule5\nReuse rule6: Cold($x, True) && Green($x, True) >>> Quiet($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Quiet('Anne', True)\nUnbind $x\nBind $x to 'Fiona'\nObtain a new implied fact: Quiet('Fiona', True)\nUnbind $x\nFinish implied with rule6\nAll newly implied Facts: Blue('Fiona', True), Green('Bob', True), Kind('Fiona', True), Nice('Anne', True), Quiet('Fiona', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "B",
        "reasoning": "prove negation of original conclusion:\n1 (all x (Cold(x) -> Blue(x))).  [assumption].\n3 (all x (Blue(x) -> Kind(x))).  [assumption].\n7 --Kind(Fiona).  [goal].\n8 -Blue(x) | Kind(x).  [clausify(3)].\n11 -Cold(x) | Blue(x).  [clausify(1)].\n14 Cold(Fiona).  [assumption].\n16 Kind(x) | -Cold(x).  [resolve(8,a,11,b)].\n17 -Kind(Fiona).  [deny(7)].\n25 Kind(Fiona).  [resolve(16,b,14,a)].\n35 $F.  [resolve(25,a,17,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-177_Q5",
    "context": "Anne is furry. Anne is smart. Bob is kind. Bob is nice. Charlie is big. Charlie is green. Charlie is nice. Charlie is young. Gary is furry. Gary is kind. Gary is nice. Gary is young. If something is young then it is nice. If Anne is green then Anne is big. Smart things are nice. All smart, kind things are green. Young, big things are kind. Kind, smart things are furry. If something is nice and big then it is young. All nice things are kind. If Anne is young and Anne is big then Anne is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is kind.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Furry($x, bool) ::: Is x furry?\n  Smart($x, bool) ::: Is x smart?\n  Kind($x, bool) ::: Is x kind?\n  Nice($x, bool) ::: Is x nice?\n  Big($x, bool) ::: Is x big?\n  Green($x, bool) ::: Is x green?\n  Young($x, bool) ::: Is x young?\nWe have following known facts from the context:\n  Furry(Anne, True)\n  Smart(Anne, True)\n  Kind(Bob, True)\n  Nice(Bob, True)\n  Big(Charlie, True)\n  Green(Charlie, True)\n  Nice(Charlie, True)\n  Young(Charlie, True)\n  Furry(Gary, True)\n  Kind(Gary, True)\n  Nice(Gary, True)\n  Young(Gary, True)\nWe have following known rules from the context:\n  rule1: Young($x, True) >>> Nice($x, True)\n  rule2: Smart($x, True) >>> Nice($x, True)\n  rule3: Smart($x, True) && Kind($x, True) >>> Green($x, True)\n  rule4: Young($x, True) && Big($x, True) >>> Kind($x, True)\n  rule5: Kind($x, True) && Smart($x, True) >>> Furry($x, True)\n  rule6: Nice($x, True) && Big($x, True) >>> Young($x, True)\n  rule7: Nice($x, True) >>> Kind($x, True)\n  rule8: Green(Anne, True) >>> Big(Anne, True)\n  rule9: Young(Anne, True) && Big(Anne, True) >>> Nice(Anne, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Young($x, True) >>> Nice($x, True)\nBind $x to 'Charlie'\nObtain an already known or implied fact: Nice('Charlie', True)\nUnbind $x\nBind $x to 'Gary'\nObtain an already known or implied fact: Nice('Gary', True)\nUnbind $x\nFinish implied with rule1\nUse rule2: Smart($x, True) >>> Nice($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Nice('Anne', True)\nUse rule6: Nice($x, True) && Big($x, True) >>> Young($x, True)\nFinish implied with rule6\nUse rule7: Nice($x, True) >>> Kind($x, True)\nFinish implied with rule7\nFinish implied with rule2\nUse rule3: Smart($x, True) && Kind($x, True) >>> Green($x, True)\nBind $x to 'Anne'\nUnbind $x\nFinish implied with rule3\nUse rule4: Young($x, True) && Big($x, True) >>> Kind($x, True)\nBind $x to 'Charlie'\nObtain a new implied fact: Kind('Charlie', True)\nReuse rule3: Smart($x, True) && Kind($x, True) >>> Green($x, True)\nBind $x to 'Charlie'\nFinish implied with rule3\nUse rule5: Kind($x, True) && Smart($x, True) >>> Furry($x, True)\nFinish implied with rule5\nFinish implied with rule4\nReuse rule5: Kind($x, True) && Smart($x, True) >>> Furry($x, True)\nBind $x to 'Bob'\nUnbind $x\nBind $x to 'Gary'\nUnbind $x\nBind $x to 'Charlie'\nUnbind $x\nFinish implied with rule5\nReuse rule6: Nice($x, True) && Big($x, True) >>> Young($x, True)\nBind $x to 'Bob'\nUnbind $x\nBind $x to 'Charlie'\nObtain an already known or implied fact: Young('Charlie', True)\nUnbind $x\nBind $x to 'Gary'\nUnbind $x\nBind $x to 'Anne'\nUnbind $x\nFinish implied with rule6\nReuse rule7: Nice($x, True) >>> Kind($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Kind('Bob', True)\nUnbind $x\nBind $x to 'Charlie'\nObtain an already known or implied fact: Kind('Charlie', True)\nUnbind $x\nBind $x to 'Gary'\nObtain an already known or implied fact: Kind('Gary', True)\nUnbind $x\nBind $x to 'Anne'\nObtain a new implied fact: Kind('Anne', True)\nReuse rule3: Smart($x, True) && Kind($x, True) >>> Green($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Green('Anne', True)\nUse rule8: Green(Anne, True) >>> Big(Anne, True)\nFinish implied with rule8\nFinish implied with rule3\nReuse rule5: Kind($x, True) && Smart($x, True) >>> Furry($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Furry('Anne', True)\nFinish implied with rule5\nFinish implied with rule7\nReuse rule8: Green(Anne, True) >>> Big(Anne, True)\nObtain a new implied fact: Big('Anne', True)\nReuse rule4: Young($x, True) && Big($x, True) >>> Kind($x, True)\nBind $x to 'Anne'\nFinish implied with rule4\nReuse rule6: Nice($x, True) && Big($x, True) >>> Young($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Young('Anne', True)\nReuse rule1: Young($x, True) >>> Nice($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Nice('Anne', True)\nFinish implied with rule1\nReuse rule4: Young($x, True) && Big($x, True) >>> Kind($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Kind('Anne', True)\nFinish implied with rule4\nUse rule9: Young(Anne, True) && Big(Anne, True) >>> Nice(Anne, True)\nFinish implied with rule9\nFinish implied with rule6\nReuse rule9: Young(Anne, True) && Big(Anne, True) >>> Nice(Anne, True)\nFinish implied with rule9\nFinish implied with rule8\nReuse rule9: Young(Anne, True) && Big(Anne, True) >>> Nice(Anne, True)\nObtain an already known or implied fact: Nice('Anne', True)\nFinish implied with rule9\nAll newly implied Facts: Big('Anne', True), Green('Anne', True), Kind('Anne', True), Kind('Charlie', True), Nice('Anne', True), Young('Anne', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n2 (all x (Smart(x) -> Nice(x))).  [assumption].\n7 (all x (Nice(x) -> Kind(x))).  [assumption].\n10 Kind(Anne).  [goal].\n11 -Smart(x) | Nice(x).  [clausify(2)].\n12 Smart(Anne).  [assumption].\n14 -Kind(Anne).  [deny(10)].\n18 -Nice(x) | Kind(x).  [clausify(7)].\n25 Nice(Anne).  [resolve(11,a,12,a)].\n26 -Nice(Anne).  [resolve(14,a,18,b)].\n37 $F.  [resolve(26,a,25,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-315_Q16",
    "context": "Bob is blue. Bob is cold. Bob is green. Dave is blue. Dave is cold. Dave is green. Dave is kind. Dave is smart. Dave is white. Erin is smart. Fiona is blue. Blue people are smart. If Fiona is green and Fiona is blue then Fiona is big. Smart people are cold. If Bob is kind and Bob is blue then Bob is not green. If someone is blue then they are white. Green people are white. All big people are kind. If someone is cold then they are green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is big.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 9)"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n4 (all x (Kind(x) & Blue(x) -> -Green(x))).  [assumption].\n12 Blue(Dave).  [assumption].\n15 -Kind(x) | -Blue(x) | -Green(x).  [clausify(4)].\n23 Green(Dave).  [assumption].\n28 -Kind(Dave) | -Green(Dave).  [resolve(15,b,12,a)].\n34 Kind(Dave).  [assumption].\n36 -Kind(Dave).  [resolve(28,b,23,a)].\n49 $F.  [resolve(36,a,34,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-29_Q21",
    "context": "The bald eagle is big. The bald eagle is red. The bald eagle sees the tiger. The bald eagle visits the bear. The bear needs the bald eagle. The bear sees the bald eagle. The bear does not see the tiger. The rabbit is big. The rabbit needs the bald eagle. The rabbit needs the bear. The rabbit visits the tiger. The tiger needs the bald eagle. The tiger needs the rabbit. The tiger visits the bear. If something is big then it needs the tiger. If something needs the tiger and it sees the bald eagle then the tiger is big. If something needs the tiger and it visits the bear then the tiger needs the rabbit. If the bald eagle visits the bear and the bald eagle needs the tiger then the bear needs the tiger. If something needs the tiger then it is red. If the bear sees the rabbit then the rabbit sees the tiger. If something is blue then it visits the bear. If something is blue and it needs the tiger then it does not visit the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not visit the rabbit.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Big($x, bool) ::: Is x big?\n  Red($x, bool) ::: Is x red?\n  Sees($x, $y, bool) ::: Does x see y?\n  Visits($x, $y, bool) ::: Does x visit y?\n  Needs($x, $y, bool) ::: Does x need y?\n  Blue($x, bool) ::: Is x blue?\nWe have following known facts from the context:\n  Big(bald_eagle, True)\n  Red(bald_eagle, True)\n  Sees(bald_eagle, tiger, True)\n  Visits(bald_eagle, bear, True)\n  Needs(bear, bald_eagle, True)\n  Sees(bear, bald_eagle, True)\n  Sees(bear, tiger, False)\n  Big(rabbit, True)\n  Needs(rabbit, bald_eagle, True)\n  Needs(rabbit, bear, True)\n  Visits(rabbit, tiger, True)\n  Needs(tiger, bald_eagle, True)\n  Needs(tiger, rabbit, True)\n  Visits(tiger, bear, True)\nWe have following known rules from the context:\n  rule1: Big($x, True) >>> Needs($x, tiger, True)\n  rule2: Needs($x, tiger, True) && Sees($x, bald_eagle, True) >>> Big(tiger, True)\n  rule3: Needs($x, tiger, True) && Visits($x, bear, True) >>> Needs(tiger, rabbit, True)\n  rule4: Visits(bald_eagle, bear, True) && Needs(bald_eagle, tiger, True) >>> Needs(bear, tiger, True)\n  rule5: Needs($x, tiger, True) >>> Red($x, True)\n  rule6: Sees(bear, rabbit, True) >>> Sees(rabbit, tiger, True)\n  rule7: Blue($x, True) >>> Visits($x, bear, True)\n  rule8: Blue($x, True) && Needs($x, tiger, True) >>> Visits($x, bald_eagle, False)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Big($x, True) >>> Needs($x, tiger, True)\nBind $x to 'bald_eagle'\nObtain a new implied fact: Needs('bald_eagle', 'tiger', True)\nUse rule2: Needs($x, tiger, True) && Sees($x, bald_eagle, True) >>> Big(tiger, True)\nFinish implied with rule2\nUse rule3: Needs($x, tiger, True) && Visits($x, bear, True) >>> Needs(tiger, rabbit, True)\nFinish implied with rule3\nUse rule4: Visits(bald_eagle, bear, True) && Needs(bald_eagle, tiger, True) >>> Needs(bear, tiger, True)\nFinish implied with rule4\nUse rule5: Needs($x, tiger, True) >>> Red($x, True)\nFinish implied with rule5\nUse rule8: Blue($x, True) && Needs($x, tiger, True) >>> Visits($x, bald_eagle, False)\nFinish implied with rule8\nReuse rule2: Needs($x, tiger, True) && Sees($x, bald_eagle, True) >>> Big(tiger, True)\nFinish implied with rule2\nReuse rule3: Needs($x, tiger, True) && Visits($x, bear, True) >>> Needs(tiger, rabbit, True)\nFinish implied with rule3\nReuse rule4: Visits(bald_eagle, bear, True) && Needs(bald_eagle, tiger, True) >>> Needs(bear, tiger, True)\nFinish implied with rule4\nReuse rule5: Needs($x, tiger, True) >>> Red($x, True)\nFinish implied with rule5\nReuse rule8: Blue($x, True) && Needs($x, tiger, True) >>> Visits($x, bald_eagle, False)\nFinish implied with rule8\nFinish implied with rule1\nReuse rule2: Needs($x, tiger, True) && Sees($x, bald_eagle, True) >>> Big(tiger, True)\nBind $x to 'bald_eagle'\nUnbind $x\nBind $x to 'rabbit'\nUnbind $x\nFinish implied with rule2\nReuse rule3: Needs($x, tiger, True) && Visits($x, bear, True) >>> Needs(tiger, rabbit, True)\nBind $x to 'bald_eagle'\nObtain an already known or implied fact: Needs('tiger', 'rabbit', True)\nUnbind $x\nBind $x to 'rabbit'\nUnbind $x\nFinish implied with rule3\nReuse rule4: Visits(bald_eagle, bear, True) && Needs(bald_eagle, tiger, True) >>> Needs(bear, tiger, True)\nObtain a new implied fact: Needs('bear', 'tiger', True)\nReuse rule2: Needs($x, tiger, True) && Sees($x, bald_eagle, True) >>> Big(tiger, True)\nBind $x to 'bear'\nObtain a new implied fact: Big('tiger', True)\nReuse rule1: Big($x, True) >>> Needs($x, tiger, True)\nBind $x to 'tiger'\nObtain a new implied fact: Needs('tiger', 'tiger', True)\nReuse rule2: Needs($x, tiger, True) && Sees($x, bald_eagle, True) >>> Big(tiger, True)\nBind $x to 'tiger'\nFinish implied with rule2\nReuse rule3: Needs($x, tiger, True) && Visits($x, bear, True) >>> Needs(tiger, rabbit, True)\nBind $x to 'tiger'\nObtain an already known or implied fact: Needs('tiger', 'rabbit', True)\nFinish implied with rule3\nReuse rule4: Visits(bald_eagle, bear, True) && Needs(bald_eagle, tiger, True) >>> Needs(bear, tiger, True)\nFinish implied with rule4\nReuse rule5: Needs($x, tiger, True) >>> Red($x, True)\nFinish implied with rule5\nReuse rule8: Blue($x, True) && Needs($x, tiger, True) >>> Visits($x, bald_eagle, False)\nFinish implied with rule8\nFinish implied with rule1\nFinish implied with rule2\nReuse rule3: Needs($x, tiger, True) && Visits($x, bear, True) >>> Needs(tiger, rabbit, True)\nBind $x to 'bear'\nFinish implied with rule3\nReuse rule4: Visits(bald_eagle, bear, True) && Needs(bald_eagle, tiger, True) >>> Needs(bear, tiger, True)\nFinish implied with rule4\nReuse rule5: Needs($x, tiger, True) >>> Red($x, True)\nFinish implied with rule5\nReuse rule8: Blue($x, True) && Needs($x, tiger, True) >>> Visits($x, bald_eagle, False)\nFinish implied with rule8\nFinish implied with rule4\nReuse rule5: Needs($x, tiger, True) >>> Red($x, True)\nBind $x to 'bald_eagle'\nObtain an already known or implied fact: Red('bald_eagle', True)\nUnbind $x\nBind $x to 'rabbit'\nObtain a new implied fact: Red('rabbit', True)\nUnbind $x\nBind $x to 'bear'\nObtain a new implied fact: Red('bear', True)\nUnbind $x\nBind $x to 'tiger'\nObtain a new implied fact: Red('tiger', True)\nUnbind $x\nFinish implied with rule5\nUse rule6: Sees(bear, rabbit, True) >>> Sees(rabbit, tiger, True)\nFinish implied with rule6\nUse rule7: Blue($x, True) >>> Visits($x, bear, True)\nFinish implied with rule7\nReuse rule8: Blue($x, True) && Needs($x, tiger, True) >>> Visits($x, bald_eagle, False)\nFinish implied with rule8\nAll newly implied Facts: Big('tiger', True), Needs('bald_eagle', 'tiger', True), Needs('bear', 'tiger', True), Needs('tiger', 'tiger', True), Red('bear', True), Red('rabbit', True), Red('tiger', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Big(x) -> Needs(x,Tiger))) # label(non_clause). [assumption].\n2 (all x (Needs(x,Tiger) & Sees(x,Bald_eagle) -> Big(Tiger))) # label(non_clause). [assumption].\n3 (all x (Needs(x,Tiger) & Visits(x,Bear) -> Needs(Tiger,Rabbit))) # label(non_clause). [assumption].\n4 Visits(Bald_eagle,Bear) & Needs(Bald_eagle,Tiger) -> Needs(Bear,Tiger) # label(non_clause). [assumption].\n5 (all x (Needs(x,Tiger) -> Red(x))) # label(non_clause). [assumption].\n6 Sees(Bear,Rabbit) -> Sees(Rabbit,Tiger) # label(non_clause). [assumption].\n7 (all x (Blue(x) -> Visits(x,Bear))) # label(non_clause). [assumption].\n8 (all x (Blue(x) & Needs(x,Tiger) -> -Visits(x,Bald_eagle))) # label(non_clause). [assumption].\n9 -Visits(Bear,Rabbit) # label(non_clause) # label(goal). [goal].\n10 Big(Bald_eagle). [assumption].\n11 Red(Bald_eagle). [assumption].\n12 Sees(Bald_eagle,Tiger). [assumption].\n13 Visits(Bald_eagle,Bear). [assumption].\n14 Needs(Bear,Bald_eagle). [assumption].\n15 Sees(Bear,Bald_eagle). [assumption].\n16 -Sees(Bear,Tiger). [assumption].\n17 Big(Rabbit). [assumption].\n18 Needs(Rabbit,Bald_eagle). [assumption].\n19 Needs(Rabbit,Bear). [assumption].\n20 Visits(Rabbit,Tiger). [assumption].\n21 Needs(Tiger,Bald_eagle). [assumption].\n22 Needs(Tiger,Rabbit). [assumption].\n23 Visits(Tiger,Bear). [assumption].\n24 -Big(x) | Needs(x,Tiger). [clausify(1)].\n25 -Needs(x,Tiger) | -Sees(x,Bald_eagle) | Big(Tiger). [clausify(2)].\n26 -Needs(x,Tiger) | -Visits(x,Bear) | Needs(Tiger,Rabbit). [clausify(3)].\n27 -Visits(Bald_eagle,Bear) | -Needs(Bald_eagle,Tiger) | Needs(Bear,Tiger). [clausify(4)].\n28 -Needs(x,Tiger) | Red(x). [clausify(5)].\n29 -Sees(Bear,Rabbit) | Sees(Rabbit,Tiger). [clausify(6)].\n30 -Blue(x) | Visits(x,Bear). [clausify(7)].\n31 -Blue(x) | -Needs(x,Tiger) | -Visits(x,Bald_eagle). [clausify(8)].\n32 Visits(Bear,Rabbit). [deny(9)].\n33 Derived: Needs(Bald_eagle,Tiger). [resolve(24,a,10,a)].\n34 Derived: Needs(Rabbit,Tiger). [resolve(24,a,17,a)].\n35 Derived: -Needs(x,Tiger) | -Sees(x,Bald_eagle) | Needs(Tiger,Tiger). [resolve(25,c,24,a)].\n36 Derived: -Needs(Bald_eagle,Tiger) | Needs(Tiger,Rabbit). [resolve(26,b,13,a)].\n37 Derived: -Needs(Tiger,Tiger) | Needs(Tiger,Rabbit). [resolve(26,b,23,a)].\n38 Derived: -Needs(Bald_eagle,Tiger) | Needs(Bear,Tiger). [resolve(27,a,13,a)].\n39 Derived: -Blue(x) | -Needs(x,Tiger) | Needs(Tiger,Rabbit). [resolve(30,b,26,b)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Big(x) -> Needs(x,Tiger))) # label(non_clause). [assumption].\n2 (all x (Needs(x,Tiger) & Sees(x,Bald_eagle) -> Big(Tiger))) # label(non_clause). [assumption].\n3 (all x (Needs(x,Tiger) & Visits(x,Bear) -> Needs(Tiger,Rabbit))) # label(non_clause). [assumption].\n4 Visits(Bald_eagle,Bear) & Needs(Bald_eagle,Tiger) -> Needs(Bear,Tiger) # label(non_clause). [assumption].\n5 (all x (Needs(x,Tiger) -> Red(x))) # label(non_clause). [assumption].\n6 Sees(Bear,Rabbit) -> Sees(Rabbit,Tiger) # label(non_clause). [assumption].\n7 (all x (Blue(x) -> Visits(x,Bear))) # label(non_clause). [assumption].\n8 (all x (Blue(x) & Needs(x,Tiger) -> -Visits(x,Bald_eagle))) # label(non_clause). [assumption].\n9 --Visits(Bear,Rabbit) # label(non_clause) # label(goal). [goal].\n10 Big(Bald_eagle). [assumption].\n11 Red(Bald_eagle). [assumption].\n12 Sees(Bald_eagle,Tiger). [assumption].\n13 Visits(Bald_eagle,Bear). [assumption].\n14 Needs(Bear,Bald_eagle). [assumption].\n15 Sees(Bear,Bald_eagle). [assumption].\n16 -Sees(Bear,Tiger). [assumption].\n17 Big(Rabbit). [assumption].\n18 Needs(Rabbit,Bald_eagle). [assumption].\n19 Needs(Rabbit,Bear). [assumption].\n20 Visits(Rabbit,Tiger). [assumption].\n21 Needs(Tiger,Bald_eagle). [assumption].\n22 Needs(Tiger,Rabbit). [assumption].\n23 Visits(Tiger,Bear). [assumption].\n24 -Big(x) | Needs(x,Tiger). [clausify(1)].\n25 -Needs(x,Tiger) | -Sees(x,Bald_eagle) | Big(Tiger). [clausify(2)].\n26 -Needs(x,Tiger) | -Visits(x,Bear) | Needs(Tiger,Rabbit). [clausify(3)].\n27 -Visits(Bald_eagle,Bear) | -Needs(Bald_eagle,Tiger) | Needs(Bear,Tiger). [clausify(4)].\n28 -Needs(x,Tiger) | Red(x). [clausify(5)].\n29 -Sees(Bear,Rabbit) | Sees(Rabbit,Tiger). [clausify(6)].\n30 -Blue(x) | Visits(x,Bear). [clausify(7)].\n31 -Blue(x) | -Needs(x,Tiger) | -Visits(x,Bald_eagle). [clausify(8)].\n32 -Visits(Bear,Rabbit). [deny(9)].\n33 Derived: Needs(Bald_eagle,Tiger). [resolve(24,a,10,a)].\n34 Derived: Needs(Rabbit,Tiger). [resolve(24,a,17,a)].\n35 Derived: -Needs(x,Tiger) | -Sees(x,Bald_eagle) | Needs(Tiger,Tiger). [resolve(25,c,24,a)].\n36 Derived: -Needs(Bald_eagle,Tiger) | Needs(Tiger,Rabbit). [resolve(26,b,13,a)].\n37 Derived: -Needs(Tiger,Tiger) | Needs(Tiger,Rabbit). [resolve(26,b,23,a)].\n38 Derived: -Needs(Bald_eagle,Tiger) | Needs(Bear,Tiger). [resolve(27,a,13,a)].\n39 Derived: -Blue(x) | -Needs(x,Tiger) | Needs(Tiger,Rabbit). [resolve(30,b,26,b)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "SyntaxError: unmatched ')'"
      }
    }
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-891_Q9",
    "context": "Bob is green. Bob is kind. Charlie is green. Charlie is not smart. Erin is not young. Fiona is nice. Fiona is young. Green, smart things are quiet. If something is kind then it is green. Smart things are young. Young things are kind. Quiet things are furry. All quiet, nice things are furry. Nice, green things are smart. If Bob is kind and Bob is not green then Bob is furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is quiet.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "A",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Green($x, bool) ::: Is x green?\n  Kind($x, bool) ::: Is x kind?\n  Smart($x, bool) ::: Is x smart?\n  Young($x, bool) ::: Is x young?\n  Nice($x, bool) ::: Is x nice?\n  Quiet($x, bool) ::: Is x quiet?\n  Furry($x, bool) ::: Is x furry?\nWe have following known facts from the context:\n  Green(Bob, True)\n  Kind(Bob, True)\n  Green(Charlie, True)\n  Smart(Charlie, False)\n  Young(Erin, False)\n  Nice(Fiona, True)\n  Young(Fiona, True)\nWe have following known rules from the context:\n  rule1: Green($x, True) && Smart($x, True) >>> Quiet($x, True)\n  rule2: Kind($x, True) >>> Green($x, True)\n  rule3: Smart($x, True) >>> Young($x, True)\n  rule4: Young($x, True) >>> Kind($x, True)\n  rule5: Quiet($x, True) >>> Furry($x, True)\n  rule6: Quiet($x, True) && Nice($x, True) >>> Furry($x, True)\n  rule7: Nice($x, True) && Green($x, True) >>> Smart($x, True)\n  rule8: Kind(Bob, True) && Green(Bob, False) >>> Furry(Bob, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Green($x, True) && Smart($x, True) >>> Quiet($x, True)\nBind $x to 'Bob'\nUnbind $x\nBind $x to 'Charlie'\nUnbind $x\nFinish implied with rule1\nUse rule2: Kind($x, True) >>> Green($x, True)\nBind $x to 'Bob'\nObtain an already known or implied fact: Green('Bob', True)\nUnbind $x\nFinish implied with rule2\nUse rule3: Smart($x, True) >>> Young($x, True)\nFinish implied with rule3\nUse rule4: Young($x, True) >>> Kind($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Kind('Fiona', True)\nReuse rule2: Kind($x, True) >>> Green($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Green('Fiona', True)\nReuse rule1: Green($x, True) && Smart($x, True) >>> Quiet($x, True)\nBind $x to 'Fiona'\nFinish implied with rule1\nUse rule7: Nice($x, True) && Green($x, True) >>> Smart($x, True)\nFinish implied with rule7\nUse rule8: Kind(Bob, True) && Green(Bob, False) >>> Furry(Bob, True)\nFinish implied with rule8\nFinish implied with rule2\nReuse rule8: Kind(Bob, True) && Green(Bob, False) >>> Furry(Bob, True)\nFinish implied with rule8\nFinish implied with rule4\nUse rule5: Quiet($x, True) >>> Furry($x, True)\nFinish implied with rule5\nUse rule6: Quiet($x, True) && Nice($x, True) >>> Furry($x, True)\nFinish implied with rule6\nReuse rule7: Nice($x, True) && Green($x, True) >>> Smart($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Smart('Fiona', True)\nReuse rule1: Green($x, True) && Smart($x, True) >>> Quiet($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Quiet('Fiona', True)\nReuse rule5: Quiet($x, True) >>> Furry($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Furry('Fiona', True)\nFinish implied with rule5\nReuse rule6: Quiet($x, True) && Nice($x, True) >>> Furry($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Furry('Fiona', True)\nFinish implied with rule6\nFinish implied with rule1\nReuse rule3: Smart($x, True) >>> Young($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Young('Fiona', True)\nFinish implied with rule3\nFinish implied with rule7\nReuse rule8: Kind(Bob, True) && Green(Bob, False) >>> Furry(Bob, True)\nFinish implied with rule8\nAll newly implied Facts: Furry('Fiona', True), Green('Fiona', True), Kind('Fiona', True), Quiet('Fiona', True), Smart('Fiona', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x (Green(x) & Smart(x) -> Quiet(x))).  [assumption].\n2 (all x (Kind(x) -> Green(x))).  [assumption].\n4 (all x (Young(x) -> Kind(x))).  [assumption].\n7 (all x (Nice(x) & Green(x) -> Smart(x))).  [assumption].\n9 Quiet(Fiona).  [goal].\n10 -Green(x) | -Smart(x) | Quiet(x).  [clausify(1)].\n13 -Kind(x) | Green(x).  [clausify(2)].\n14 -Nice(x) | -Green(x) | Smart(x).  [clausify(7)].\n16 -Kind(x) | -Smart(x) | Quiet(x).  [resolve(13,b,10,a)].\n18 -Young(x) | Kind(x).  [clausify(4)].\n19 -Nice(x) | Smart(x) | -Kind(x).  [resolve(14,b,13,b)].\n27 -Smart(x) | Quiet(x) | -Young(x).  [resolve(16,a,18,b)].\n29 -Nice(x) | Smart(x) | -Young(x).  [resolve(19,c,18,b)].\n31 Nice(Fiona).  [assumption].\n35 -Nice(x) | -Young(x) | Quiet(x) | -Young(x).  [resolve(29,b,27,a)].\n36 -Young(Fiona) | Quiet(Fiona) | -Young(Fiona).  [resolve(35,a,31,a)].\n38 -Quiet(Fiona).  [deny(9)].\n40 Young(Fiona).  [assumption].\n41 -Young(Fiona) | -Young(Fiona).  [resolve(36,b,38,a)].\n42 $F.  [copy(41),merge(b),unit_del(a,40)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-992_Q8",
    "context": "The bear is nice. The bear likes the cat. The bear sees the dog. The cat eats the bear. The cat is cold. The cat sees the bear. The dog eats the bear. The dog eats the lion. The dog is blue. The dog sees the cat. The lion eats the cat. The lion is cold. The lion likes the bear. The lion likes the cat. If someone is big then they eat the dog. If someone is cold then they are nice. If someone is blue and they see the bear then they see the dog. If someone eats the dog then the dog is nice. If someone is blue and they see the dog then they are big. If someone eats the bear and they are nice then they are blue. If someone eats the bear and they see the dog then the dog is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not see the dog.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "B",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Nice($x, bool) ::: Is x nice?\n  Likes($x, $y, bool) ::: Does x like y?\n  Sees($x, $y, bool) ::: Does x see y?\n  Eats($x, $y, bool) ::: Does x eat y?\n  Cold($x, bool) ::: Is x cold?\n  Blue($x, bool) ::: Is x blue?\n  Big($x, bool) ::: Is x big?\nWe have following known facts from the context:\n  Nice(bear, True)\n  Likes(bear, cat, True)\n  Sees(bear, dog, True)\n  Eats(cat, bear, True)\n  Cold(cat, True)\n  Sees(cat, bear, True)\n  Eats(dog, bear, True)\n  Eats(dog, lion, True)\n  Blue(dog, True)\n  Sees(dog, cat, True)\n  Eats(lion, cat, True)\n  Cold(lion, True)\n  Likes(lion, bear, True)\n  Likes(lion, cat, True)\nWe have following known rules from the context:\n  rule1: Big($x, True) >>> Eats($x, dog, True)\n  rule2: Cold($x, True) >>> Nice($x, True)\n  rule3: Blue($x, True) && Sees($x, bear, True) >>> Sees($x, dog, True)\n  rule4: Eats($x, dog, True) >>> Nice(dog, True)\n  rule5: Blue($x, True) && Sees($x, dog, True) >>> Big($x, True)\n  rule6: Eats($x, bear, True) && Nice($x, True) >>> Blue($x, True)\n  rule7: Eats($x, bear, True) && Sees($x, dog, True) >>> Big(dog, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Big($x, True) >>> Eats($x, dog, True)\nFinish implied with rule1\nUse rule2: Cold($x, True) >>> Nice($x, True)\nBind $x to 'cat'\nObtain a new implied fact: Nice('cat', True)\nUse rule6: Eats($x, bear, True) && Nice($x, True) >>> Blue($x, True)\nFinish implied with rule6\nReuse rule6: Eats($x, bear, True) && Nice($x, True) >>> Blue($x, True)\nFinish implied with rule6\nFinish implied with rule2\nUse rule3: Blue($x, True) && Sees($x, bear, True) >>> Sees($x, dog, True)\nBind $x to 'dog'\nUnbind $x\nFinish implied with rule3\nUse rule4: Eats($x, dog, True) >>> Nice(dog, True)\nFinish implied with rule4\nUse rule5: Blue($x, True) && Sees($x, dog, True) >>> Big($x, True)\nBind $x to 'dog'\nUnbind $x\nFinish implied with rule5\nReuse rule6: Eats($x, bear, True) && Nice($x, True) >>> Blue($x, True)\nBind $x to 'cat'\nObtain a new implied fact: Blue('cat', True)\nReuse rule3: Blue($x, True) && Sees($x, bear, True) >>> Sees($x, dog, True)\nBind $x to 'cat'\nObtain a new implied fact: Sees('cat', 'dog', True)\nReuse rule3: Blue($x, True) && Sees($x, bear, True) >>> Sees($x, dog, True)\nBind $x to 'cat'\nFinish implied with rule3\nReuse rule5: Blue($x, True) && Sees($x, dog, True) >>> Big($x, True)\nBind $x to 'cat'\nObtain a new implied fact: Big('cat', True)\nReuse rule1: Big($x, True) >>> Eats($x, dog, True)\nBind $x to 'cat'\nObtain a new implied fact: Eats('cat', 'dog', True)\nReuse rule4: Eats($x, dog, True) >>> Nice(dog, True)\nBind $x to 'cat'\nObtain a new implied fact: Nice('dog', True)\nReuse rule6: Eats($x, bear, True) && Nice($x, True) >>> Blue($x, True)\nBind $x to 'dog'\nObtain an already known or implied fact: Blue('dog', True)\nFinish implied with rule6\nFinish implied with rule4\nReuse rule6: Eats($x, bear, True) && Nice($x, True) >>> Blue($x, True)\nBind $x to 'cat'\nFinish implied with rule6\nUse rule7: Eats($x, bear, True) && Sees($x, dog, True) >>> Big(dog, True)\nFinish implied with rule7\nFinish implied with rule1\nFinish implied with rule5\nReuse rule7: Eats($x, bear, True) && Sees($x, dog, True) >>> Big(dog, True)\nFinish implied with rule7\nFinish implied with rule3\nReuse rule5: Blue($x, True) && Sees($x, dog, True) >>> Big($x, True)\nBind $x to 'cat'\nObtain an already known or implied fact: Big('cat', True)\nFinish implied with rule5\nFinish implied with rule6\nReuse rule7: Eats($x, bear, True) && Sees($x, dog, True) >>> Big(dog, True)\nBind $x to 'cat'\nObtain a new implied fact: Big('dog', True)\nReuse rule1: Big($x, True) >>> Eats($x, dog, True)\nBind $x to 'dog'\nObtain a new implied fact: Eats('dog', 'dog', True)\nReuse rule4: Eats($x, dog, True) >>> Nice(dog, True)\nBind $x to 'dog'\nObtain an already known or implied fact: Nice('dog', True)\nFinish implied with rule4\nReuse rule6: Eats($x, bear, True) && Nice($x, True) >>> Blue($x, True)\nBind $x to 'dog'\nFinish implied with rule6\nReuse rule7: Eats($x, bear, True) && Sees($x, dog, True) >>> Big(dog, True)\nBind $x to 'dog'\nFinish implied with rule7\nFinish implied with rule1\nFinish implied with rule7\nAll newly implied Facts: Big('cat', True), Big('dog', True), Blue('cat', True), Eats('cat', 'dog', True), Eats('dog', 'dog', True), Nice('cat', True), Nice('dog', True), Sees('cat', 'dog', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "B",
        "reasoning": "prove negation of original conclusion:\n2 (all x (Cold(x) -> Nice(x))).  [assumption].\n3 (all x (Blue(x) & Sees(x,Bear) -> Sees(x,Dog))).  [assumption].\n6 (all x (Eats(x,Bear) & Nice(x) -> Blue(x))).  [assumption].\n8 --Sees(Cat,Dog).  [goal].\n9 -Eats(x,Bear) | -Nice(x) | Blue(x).  [clausify(6)].\n11 -Cold(x) | Nice(x).  [clausify(2)].\n13 -Eats(x,Bear) | Blue(x) | -Cold(x).  [resolve(9,b,11,b)].\n14 Cold(Cat).  [assumption].\n16 -Blue(x) | -Sees(x,Bear) | Sees(x,Dog).  [clausify(3)].\n21 -Eats(Cat,Bear) | Blue(Cat).  [resolve(13,c,14,a)].\n24 Eats(Cat,Bear).  [assumption].\n31 -Eats(Cat,Bear) | -Sees(Cat,Bear) | Sees(Cat,Dog).  [resolve(21,b,16,a)].\n36 Sees(Cat,Bear).  [assumption].\n38 -Sees(Cat,Dog).  [deny(8)].\n40 -Sees(Cat,Bear) | Sees(Cat,Dog).  [resolve(31,a,24,a)].\n41 -Sees(Cat,Bear).  [resolve(40,b,38,a)].\n42 $F.  [resolve(41,a,36,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "B",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-242_Q23",
    "context": "The bald eagle chases the cow. The bald eagle is not kind. The bald eagle is round. The bear chases the tiger. The cow is red. The cow is round. The tiger sees the cow. If someone is young and they see the bald eagle then they see the bear. If someone chases the bear then the bear is young. If someone chases the tiger then they are rough. If someone chases the tiger then the tiger eats the bear. If the tiger is round and the tiger is kind then the tiger chases the bear. If someone is young then they see the bald eagle. If someone chases the cow then they chase the bear. If someone sees the bear then the bear chases the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle does not eat the bear.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 3)"
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Young(x) & Sees(x,Bald_eagle) -> Sees(x,Bear))) # label(non_clause). [assumption].\n2 (all x (Chases(x,Bear) -> Young(Bear))) # label(non_clause). [assumption].\n3 (all x (Chases(x,Tiger) -> Rough(x))) # label(non_clause). [assumption].\n4 (all x (Chases(x,Tiger) -> Eats(Tiger,Bear))) # label(non_clause). [assumption].\n5 (all x (Round(Tiger) & Kind(Tiger) -> Chases(Tiger,Bear))) # label(non_clause). [assumption].\n6 (all x (Young(x) -> Sees(x,Bald_eagle))) # label(non_clause). [assumption].\n7 (all x (Chases(x,Cow) -> Chases(x,Bear))) # label(non_clause). [assumption].\n8 (all x (Sees(x,Bear) -> Chases(Bear,Cow))) # label(non_clause). [assumption].\n9 -Eats(Bald_eagle,Bear) # label(non_clause) # label(goal). [goal].\n10 Chases(Bald_eagle,Cow). [assumption].\n11 -Kind(Bald_eagle). [assumption].\n12 Round(Bald_eagle). [assumption].\n13 Chases(Bear,Tiger). [assumption].\n14 Red(Cow). [assumption].\n15 Round(Cow). [assumption].\n16 Sees(Tiger,Cow). [assumption].\n17 -Young(x) | -Sees(x,Bald_eagle) | Sees(x,Bear). [clausify(1)].\n18 -Chases(x,Bear) | Young(Bear). [clausify(2)].\n19 -Chases(x,Tiger) | Rough(x). [clausify(3)].\n20 -Chases(x,Tiger) | Eats(Tiger,Bear). [clausify(4)].\n21 -Round(Tiger) | -Kind(Tiger) | Chases(Tiger,Bear). [clausify(5)].\n22 -Young(x) | Sees(x,Bald_eagle). [clausify(6)].\n23 -Chases(x,Cow) | Chases(x,Bear). [clausify(7)].\n24 -Sees(x,Bear) | Chases(Bear,Cow). [clausify(8)].\n25 Eats(Bald_eagle,Bear). [deny(9)].\n26 Derived: -Chases(x,Bear) | -Sees(Bear,Bald_eagle) | Sees(Bear,Bear). [resolve(18,b,17,a)].\n27 Derived: Sees(Bear,Bald_eagle) | -Chases(x,Bear). [resolve(22,a,18,b)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Young(x) & Sees(x,Bald_eagle) -> Sees(x,Bear))) # label(non_clause). [assumption].\n2 (all x (Chases(x,Bear) -> Young(Bear))) # label(non_clause). [assumption].\n3 (all x (Chases(x,Tiger) -> Rough(x))) # label(non_clause). [assumption].\n4 (all x (Chases(x,Tiger) -> Eats(Tiger,Bear))) # label(non_clause). [assumption].\n5 (all x (Round(Tiger) & Kind(Tiger) -> Chases(Tiger,Bear))) # label(non_clause). [assumption].\n6 (all x (Young(x) -> Sees(x,Bald_eagle))) # label(non_clause). [assumption].\n7 (all x (Chases(x,Cow) -> Chases(x,Bear))) # label(non_clause). [assumption].\n8 (all x (Sees(x,Bear) -> Chases(Bear,Cow))) # label(non_clause). [assumption].\n9 --Eats(Bald_eagle,Bear) # label(non_clause) # label(goal). [goal].\n10 Chases(Bald_eagle,Cow). [assumption].\n11 -Kind(Bald_eagle). [assumption].\n12 Round(Bald_eagle). [assumption].\n13 Chases(Bear,Tiger). [assumption].\n14 Red(Cow). [assumption].\n15 Round(Cow). [assumption].\n16 Sees(Tiger,Cow). [assumption].\n17 -Young(x) | -Sees(x,Bald_eagle) | Sees(x,Bear). [clausify(1)].\n18 -Chases(x,Bear) | Young(Bear). [clausify(2)].\n19 -Chases(x,Tiger) | Rough(x). [clausify(3)].\n20 -Chases(x,Tiger) | Eats(Tiger,Bear). [clausify(4)].\n21 -Round(Tiger) | -Kind(Tiger) | Chases(Tiger,Bear). [clausify(5)].\n22 -Young(x) | Sees(x,Bald_eagle). [clausify(6)].\n23 -Chases(x,Cow) | Chases(x,Bear). [clausify(7)].\n24 -Sees(x,Bear) | Chases(Bear,Cow). [clausify(8)].\n25 -Eats(Bald_eagle,Bear). [deny(9)].\n26 Derived: -Chases(x,Bear) | -Sees(Bear,Bald_eagle) | Sees(Bear,Bear). [resolve(18,b,17,a)].\n27 Derived: Sees(Bear,Bald_eagle) | -Chases(x,Bear). [resolve(22,a,18,b)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "No Output"
      }
    }
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-70_Q11",
    "context": "The bald eagle chases the rabbit. The bald eagle chases the tiger. The lion needs the rabbit. The rabbit does not chase the lion. The rabbit needs the bald eagle. The rabbit needs the lion. The tiger visits the rabbit. If something chases the rabbit then it is big. If something needs the tiger then it is big. If something needs the lion and it visits the rabbit then it chases the lion. If something is big then it chases the lion. If something chases the tiger then the tiger needs the rabbit. If something visits the tiger then the tiger is not green. If something chases the lion then the lion chases the rabbit. If something chases the tiger then it visits the bald eagle. If something chases the rabbit and it does not visit the lion then the lion does not need the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion chases the lion.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "A",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "invalid syntax (rules.krb, line 15)"
      },
      "FOL": {
        "predict": "A",
        "reasoning": "prove original conclusion:\n1 (all x (Chases(x,Rabbit) -> Big(x))).  [assumption].\n4 (all x (Big(x) -> Chases(x,Lion))).  [assumption].\n7 (all x (Chases(x,Lion) -> Chases(Lion,Rabbit))).  [assumption].\n10 Chases(Lion,Lion).  [goal].\n23 -Big(x) | Chases(x,Lion).  [clausify(4)].\n24 -Chases(x,Rabbit) | Big(x).  [clausify(1)].\n25 Chases(Bald_eagle,Rabbit).  [assumption].\n28 -Chases(x,Lion) | Chases(Lion,Rabbit).  [clausify(7)].\n29 -Chases(Lion,Lion).  [deny(10)].\n30 Chases(x,Lion) | -Chases(x,Rabbit).  [resolve(23,a,24,b)].\n31 -Chases(Lion,Rabbit).  [resolve(30,a,29,a)].\n33 Chases(Bald_eagle,Lion).  [ur(30,b,25,a)].\n34 -Chases(x,Lion).  [resolve(31,a,28,b)].\n35 $F.  [resolve(34,a,33,a)].",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "N/A",
        "status_code": "success",
        "error_message": ""
      }
    }
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-165_Q13",
    "context": "Anne is furry. Anne is nice. Anne is rough. Anne is white. Erin is furry. Erin is rough. Erin is white. Fiona is big. Fiona is nice. Fiona is round. Harry is nice. Harry is rough. All furry things are white. If Harry is red then Harry is round. All round, red things are furry. If Harry is rough then Harry is round. Nice, red things are big. Round, red things are white. All nice, white things are red. If something is round then it is furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not big.",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "answer": "C",
    "roles": {
      "LP": {
        "predict": "C",
        "reasoning": "We first define following predicates and corresponding natural language explanations:\n  Furry($x, bool) ::: Is x furry?\n  Nice($x, bool) ::: Is x nice?\n  Rough($x, bool) ::: Is x rough?\n  White($x, bool) ::: Is x white?\n  Big($x, bool) ::: Is x big?\n  Round($x, bool) ::: Is x round?\n  Red($x, bool) ::: Is x red?\nWe have following known facts from the context:\n  Furry(Anne, True)\n  Nice(Anne, True)\n  Rough(Anne, True)\n  White(Anne, True)\n  Furry(Erin, True)\n  Rough(Erin, True)\n  White(Erin, True)\n  Big(Fiona, True)\n  Nice(Fiona, True)\n  Round(Fiona, True)\n  Nice(Harry, True)\n  Rough(Harry, True)\nWe have following known rules from the context:\n  rule1: Furry($x, True) >>> White($x, True)\n  rule2: Red($x, True) && Round($x, True) >>> Furry($x, True)\n  rule3: Nice($x, True) && White($x, True) >>> Red($x, True)\n  rule4: Round($x, True) >>> Furry($x, True)\n  rule5: Rough($x, True) >>> Round($x, True)\n  rule6: Nice($x, True) && Red($x, True) >>> Big($x, True)\n  rule7: Round($x, True) && Red($x, True) >>> White($x, True)\n  rule8: Red($x, True) && Round($x, True) >>> Furry($x, True)\nNow begin reasoning to obtain all implied facts:\nUse rule1: Furry($x, True) >>> White($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: White('Anne', True)\nUnbind $x\nBind $x to 'Erin'\nObtain an already known or implied fact: White('Erin', True)\nUnbind $x\nFinish implied with rule1\nUse rule2: Red($x, True) && Round($x, True) >>> Furry($x, True)\nFinish implied with rule2\nUse rule3: Nice($x, True) && White($x, True) >>> Red($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Red('Anne', True)\nReuse rule2: Red($x, True) && Round($x, True) >>> Furry($x, True)\nBind $x to 'Anne'\nFinish implied with rule2\nUse rule6: Nice($x, True) && Red($x, True) >>> Big($x, True)\nFinish implied with rule6\nUse rule7: Round($x, True) && Red($x, True) >>> White($x, True)\nFinish implied with rule7\nUse rule8: Red($x, True) && Round($x, True) >>> Furry($x, True)\nFinish implied with rule8\nFinish implied with rule3\nUse rule4: Round($x, True) >>> Furry($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Furry('Fiona', True)\nReuse rule1: Furry($x, True) >>> White($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: White('Fiona', True)\nReuse rule3: Nice($x, True) && White($x, True) >>> Red($x, True)\nBind $x to 'Fiona'\nObtain a new implied fact: Red('Fiona', True)\nReuse rule2: Red($x, True) && Round($x, True) >>> Furry($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: Furry('Fiona', True)\nFinish implied with rule2\nReuse rule6: Nice($x, True) && Red($x, True) >>> Big($x, True)\nFinish implied with rule6\nReuse rule7: Round($x, True) && Red($x, True) >>> White($x, True)\nFinish implied with rule7\nReuse rule8: Red($x, True) && Round($x, True) >>> Furry($x, True)\nFinish implied with rule8\nFinish implied with rule3\nFinish implied with rule1\nFinish implied with rule4\nUse rule5: Rough($x, True) >>> Round($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Round('Anne', True)\nReuse rule2: Red($x, True) && Round($x, True) >>> Furry($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Furry('Anne', True)\nFinish implied with rule2\nReuse rule4: Round($x, True) >>> Furry($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Furry('Anne', True)\nFinish implied with rule4\nReuse rule7: Round($x, True) && Red($x, True) >>> White($x, True)\nFinish implied with rule7\nReuse rule8: Red($x, True) && Round($x, True) >>> Furry($x, True)\nFinish implied with rule8\nReuse rule2: Red($x, True) && Round($x, True) >>> Furry($x, True)\nBind $x to 'Erin'\nFinish implied with rule2\nReuse rule4: Round($x, True) >>> Furry($x, True)\nBind $x to 'Erin'\nObtain an already known or implied fact: Furry('Erin', True)\nFinish implied with rule4\nReuse rule7: Round($x, True) && Red($x, True) >>> White($x, True)\nFinish implied with rule7\nReuse rule8: Red($x, True) && Round($x, True) >>> Furry($x, True)\nFinish implied with rule8\nReuse rule2: Red($x, True) && Round($x, True) >>> Furry($x, True)\nBind $x to 'Harry'\nFinish implied with rule2\nReuse rule4: Round($x, True) >>> Furry($x, True)\nBind $x to 'Harry'\nObtain a new implied fact: Furry('Harry', True)\nReuse rule1: Furry($x, True) >>> White($x, True)\nBind $x to 'Harry'\nObtain a new implied fact: White('Harry', True)\nReuse rule3: Nice($x, True) && White($x, True) >>> Red($x, True)\nBind $x to 'Harry'\nObtain a new implied fact: Red('Harry', True)\nReuse rule2: Red($x, True) && Round($x, True) >>> Furry($x, True)\nBind $x to 'Harry'\nObtain an already known or implied fact: Furry('Harry', True)\nFinish implied with rule2\nReuse rule6: Nice($x, True) && Red($x, True) >>> Big($x, True)\nFinish implied with rule6\nReuse rule7: Round($x, True) && Red($x, True) >>> White($x, True)\nFinish implied with rule7\nReuse rule8: Red($x, True) && Round($x, True) >>> Furry($x, True)\nFinish implied with rule8\nFinish implied with rule3\nFinish implied with rule1\nFinish implied with rule4\nReuse rule7: Round($x, True) && Red($x, True) >>> White($x, True)\nFinish implied with rule7\nReuse rule8: Red($x, True) && Round($x, True) >>> Furry($x, True)\nFinish implied with rule8\nFinish implied with rule5\nReuse rule6: Nice($x, True) && Red($x, True) >>> Big($x, True)\nBind $x to 'Anne'\nObtain a new implied fact: Big('Anne', True)\nUnbind $x\nBind $x to 'Fiona'\nObtain an already known or implied fact: Big('Fiona', True)\nUnbind $x\nBind $x to 'Harry'\nObtain a new implied fact: Big('Harry', True)\nUnbind $x\nFinish implied with rule6\nReuse rule7: Round($x, True) && Red($x, True) >>> White($x, True)\nBind $x to 'Fiona'\nObtain an already known or implied fact: White('Fiona', True)\nUnbind $x\nBind $x to 'Anne'\nObtain an already known or implied fact: White('Anne', True)\nUnbind $x\nBind $x to 'Erin'\nUnbind $x\nBind $x to 'Harry'\nObtain an already known or implied fact: White('Harry', True)\nUnbind $x\nFinish implied with rule7\nReuse rule8: Red($x, True) && Round($x, True) >>> Furry($x, True)\nBind $x to 'Anne'\nObtain an already known or implied fact: Furry('Anne', True)\nUnbind $x\nBind $x to 'Fiona'\nObtain an already known or implied fact: Furry('Fiona', True)\nUnbind $x\nBind $x to 'Harry'\nObtain an already known or implied fact: Furry('Harry', True)\nUnbind $x\nFinish implied with rule8\nAll newly implied Facts: Big('Anne', True), Big('Harry', True), Furry('Fiona', True), Furry('Harry', True), Red('Anne', True), Red('Fiona', True), Red('Harry', True), Round('Anne', True), White('Fiona', True), White('Harry', True)\nFinish reasoning",
        "status_code": "success",
        "error_message": ""
      },
      "FOL": {
        "predict": "C",
        "reasoning": "trying to prove original conclusion:\n1 (all x (Furry(x) -> White(x))) # label(non_clause). [assumption].\n2 (all x (Red(x) & Round(x) -> Furry(x))) # label(non_clause). [assumption].\n3 (all x (Nice(x) & White(x) -> Red(x))) # label(non_clause). [assumption].\n4 (all x (Round(x) -> Furry(x))) # label(non_clause). [assumption].\n5 (all x (Rough(x) -> Round(x))) # label(non_clause). [assumption].\n6 (all x (Nice(x) & Red(x) -> Big(x))) # label(non_clause). [assumption].\n7 (all x (Round(x) & Red(x) -> White(x))) # label(non_clause). [assumption].\n8 -Big(Erin) # label(non_clause) # label(goal). [goal].\n9 Furry(Anne). [assumption].\n10 Nice(Anne). [assumption].\n11 Rough(Anne). [assumption].\n12 White(Anne). [assumption].\n13 Furry(Erin). [assumption].\n14 Rough(Erin). [assumption].\n15 White(Erin). [assumption].\n16 Big(Fiona). [assumption].\n17 Nice(Fiona). [assumption].\n18 Round(Fiona). [assumption].\n19 Nice(Harry). [assumption].\n20 Rough(Harry). [assumption].\n21 -Furry(x) | White(x). [clausify(1)].\n22 -Red(x) | -Round(x) | Furry(x). [clausify(2)].\n23 -Nice(x) | -White(x) | Red(x). [clausify(3)].\n24 -Round(x) | Furry(x). [clausify(4)].\n25 -Rough(x) | Round(x). [clausify(5)].\n26 -Nice(x) | -Red(x) | Big(x). [clausify(6)].\n27 -Round(x) | -Red(x) | White(x). [clausify(7)].\n28 Big(Erin). [deny(8)].\n29 Derived: White(Anne). [resolve(21,a,9,a)].\n30 Derived: White(Erin). [resolve(21,a,13,a)].\n31 Derived: -Round(x) | White(x). [resolve(24,b,21,a)].\n32 Derived: -White(Anne) | Red(Anne). [resolve(23,a,10,a)].\n33 Derived: -White(Fiona) | Red(Fiona). [resolve(23,a,17,a)].\n34 Derived: -White(Harry) | Red(Harry). [resolve(23,a,19,a)].\n35 Derived: -Red(Anne) | Big(Anne). [resolve(26,a,10,a)].\n36 Derived: -Red(Fiona) | Big(Fiona). [resolve(26,a,17,a)].\n37 Derived: -Red(Harry) | Big(Harry). [resolve(26,a,19,a)].\n38 Derived: Round(Anne). [resolve(25,a,11,a)].\n39 Derived: Round(Erin). [resolve(25,a,14,a)].\n40 Derived: Round(Harry). [resolve(25,a,20,a)].\n41 Derived: Red(Anne). [resolve(32,a,12,a)].\n42 Derived: Red(Fiona) | -Round(Fiona). [resolve(33,a,31,b)].\n43 Derived: Red(Harry) | -Round(Harry). [resolve(34,a,31,b)].\n44 Derived: Red(Fiona). [resolve(42,b,18,a)].\n45 Derived: Red(Harry). [resolve(43,b,40,a)].\n-- Search terminated, no contradiction found --\n\ntrying to prove negation of original conclusion:\n1 (all x (Furry(x) -> White(x))) # label(non_clause). [assumption].\n2 (all x (Red(x) & Round(x) -> Furry(x))) # label(non_clause). [assumption].\n3 (all x (Nice(x) & White(x) -> Red(x))) # label(non_clause). [assumption].\n4 (all x (Round(x) -> Furry(x))) # label(non_clause). [assumption].\n5 (all x (Rough(x) -> Round(x))) # label(non_clause). [assumption].\n6 (all x (Nice(x) & Red(x) -> Big(x))) # label(non_clause). [assumption].\n7 (all x (Round(x) & Red(x) -> White(x))) # label(non_clause). [assumption].\n8 --Big(Erin) # label(non_clause) # label(goal). [goal].\n9 Furry(Anne). [assumption].\n10 Nice(Anne). [assumption].\n11 Rough(Anne). [assumption].\n12 White(Anne). [assumption].\n13 Furry(Erin). [assumption].\n14 Rough(Erin). [assumption].\n15 White(Erin). [assumption].\n16 Big(Fiona). [assumption].\n17 Nice(Fiona). [assumption].\n18 Round(Fiona). [assumption].\n19 Nice(Harry). [assumption].\n20 Rough(Harry). [assumption].\n21 -Furry(x) | White(x). [clausify(1)].\n22 -Red(x) | -Round(x) | Furry(x). [clausify(2)].\n23 -Nice(x) | -White(x) | Red(x). [clausify(3)].\n24 -Round(x) | Furry(x). [clausify(4)].\n25 -Rough(x) | Round(x). [clausify(5)].\n26 -Nice(x) | -Red(x) | Big(x). [clausify(6)].\n27 -Round(x) | -Red(x) | White(x). [clausify(7)].\n28 -Big(Erin). [deny(8)].\n29 Derived: White(Anne). [resolve(21,a,9,a)].\n30 Derived: White(Erin). [resolve(21,a,13,a)].\n31 Derived: -Round(x) | White(x). [resolve(24,b,21,a)].\n32 Derived: -White(Anne) | Red(Anne). [resolve(23,a,10,a)].\n33 Derived: -White(Fiona) | Red(Fiona). [resolve(23,a,17,a)].\n34 Derived: -White(Harry) | Red(Harry). [resolve(23,a,19,a)].\n35 Derived: -Red(Anne) | Big(Anne). [resolve(26,a,10,a)].\n36 Derived: -Red(Fiona) | Big(Fiona). [resolve(26,a,17,a)].\n37 Derived: -Red(Harry) | Big(Harry). [resolve(26,a,19,a)].\n38 Derived: Round(Anne). [resolve(25,a,11,a)].\n39 Derived: Round(Erin). [resolve(25,a,14,a)].\n40 Derived: Round(Harry). [resolve(25,a,20,a)].\n41 Derived: Red(Anne). [resolve(32,a,12,a)].\n42 Derived: Red(Fiona) | -Round(Fiona). [resolve(33,a,31,b)].\n43 Derived: Red(Harry) | -Round(Harry). [resolve(34,a,31,b)].\n44 Derived: Red(Fiona). [resolve(42,b,18,a)].\n45 Derived: Red(Harry). [resolve(43,b,40,a)].\n-- Search terminated, no contradiction found --\n\nSo: Unknown",
        "status_code": "success",
        "error_message": ""
      },
      "SAT": {
        "predict": "A",
        "reasoning": "",
        "status_code": "execution error",
        "error_message": "No Output"
      }
    }
  }
]