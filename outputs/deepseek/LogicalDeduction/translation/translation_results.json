[
    {
        "id": "logical_deduction_0",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, a blue book, a white book, a purple book, and a yellow book. The blue book is to the right of the yellow book. The white book is to the left of the yellow book. The blue book is the second from the right. The purple book is the second from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the second from the left.",
            "B) The blue book is the second from the left.",
            "C) The white book is the second from the left.",
            "D) The purple book is the second from the left.",
            "E) The yellow book is the second from the left."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nQuery:\nSecondFromLeft(green,  True)   ::: Option A\nSecondFromLeft(blue,   True)   ::: Option B\nSecondFromLeft(white,  True)   ::: Option C\nSecondFromLeft(purple, True)   ::: Option D\nSecondFromLeft(yellow, True)   ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nSecondFromRight(x) ::: Book x is the second book from the right.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(blue) ::: Option B\nSecondFromLeft(white) ::: Option C\nSecondFromLeft(purple) ::: Option D\nSecondFromLeft(yellow) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Blue) == 2) ::: B) The blue book is the second from the left.\nis_valid(pos(White) == 2) ::: C) The white book is the second from the left.\nis_valid(pos(Purple) == 2) ::: D) The purple book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: E) The yellow book is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nQuery:\nSecondFromLeft(green,  True)   ::: Option A\nSecondFromLeft(blue,   True)   ::: Option B\nSecondFromLeft(white,  True)   ::: Option C\nSecondFromLeft(purple, True)   ::: Option D\nSecondFromLeft(yellow, True)   ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nSecondFromRight(x) ::: Book x is the second book from the right.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(blue) ::: Option B\nSecondFromLeft(white) ::: Option C\nSecondFromLeft(purple) ::: Option D\nSecondFromLeft(yellow) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Blue) == 2) ::: B) The blue book is the second from the left.\nis_valid(pos(White) == 2) ::: C) The white book is the second from the left.\nis_valid(pos(Purple) == 2) ::: D) The purple book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: E) The yellow book is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_1",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a sedan, a tractor, a minivan, and a limousine. The tractor is newer than the minivan. The tractor is older than the limousine. The convertible is older than the sedan. The convertible is the second-newest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the second-newest.",
            "B) The sedan is the second-newest.",
            "C) The tractor is the second-newest.",
            "D) The minivan is the second-newest.",
            "E) The limousine is the second-newest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(tractor, True)             ::: The tractor.\nVehicle(minivan, True)             ::: The minivan.\nVehicle(limousine, True)           ::: The limousine.\nNewer(tractor, minivan, True)      ::: The tractor is newer than the minivan.\nNewer(limousine, tractor, True)    ::: The limousine is newer than the tractor.\nOlder(convertible, sedan, True)    ::: The convertible is older than the sedan.\nSecondNewest(convertible, True)    ::: The convertible is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(convertible, True)    ::: Option A\nSecondNewest(sedan, True)          ::: Option B\nSecondNewest(tractor, True)        ::: Option C\nSecondNewest(minivan, True)        ::: Option D\nSecondNewest(limousine, True)      ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, minivan) ::: The tractor is newer than the minivan.\nNewer(limousine, tractor) ::: The limousine is newer than the tractor.\nOlder(convertible, sedan) ::: The convertible is older than the sedan.\nSecondNewest(convertible) ::: The convertible is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(sedan) ::: Option B\nSecondNewest(tractor) ::: Option C\nSecondNewest(minivan) ::: Option D\nSecondNewest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, Tractor, Minivan, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Minivan) ::: The tractor is newer than the minivan\nNewer(Limousine, Tractor) ::: The limousine is newer than the tractor\nOlder(Convertible, Sedan) ::: The convertible is older than the sedan\nSecondNewest(Convertible) ::: The convertible is the second-newest\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest\nis_valid(SecondNewest(Sedan)) ::: B) The sedan is the second-newest\nis_valid(SecondNewest(Tractor)) ::: C) The tractor is the second-newest\nis_valid(SecondNewest(Minivan)) ::: D) The minivan is the second-newest\nis_valid(SecondNewest(Limousine)) ::: E) The limousine is the second-newest"
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(tractor, True)             ::: The tractor.\nVehicle(minivan, True)             ::: The minivan.\nVehicle(limousine, True)           ::: The limousine.\nNewer(tractor, minivan, True)      ::: The tractor is newer than the minivan.\nNewer(limousine, tractor, True)    ::: The limousine is newer than the tractor.\nOlder(convertible, sedan, True)    ::: The convertible is older than the sedan.\nSecondNewest(convertible, True)    ::: The convertible is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(convertible, True)    ::: Option A\nSecondNewest(sedan, True)          ::: Option B\nSecondNewest(tractor, True)        ::: Option C\nSecondNewest(minivan, True)        ::: Option D\nSecondNewest(limousine, True)      ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, minivan) ::: The tractor is newer than the minivan.\nNewer(limousine, tractor) ::: The limousine is newer than the tractor.\nOlder(convertible, sedan) ::: The convertible is older than the sedan.\nSecondNewest(convertible) ::: The convertible is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(sedan) ::: Option B\nSecondNewest(tractor) ::: Option C\nSecondNewest(minivan) ::: Option D\nSecondNewest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, Tractor, Minivan, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Minivan) ::: The tractor is newer than the minivan\nNewer(Limousine, Tractor) ::: The limousine is newer than the tractor\nOlder(Convertible, Sedan) ::: The convertible is older than the sedan\nSecondNewest(Convertible) ::: The convertible is the second-newest\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest\nis_valid(SecondNewest(Sedan)) ::: B) The sedan is the second-newest\nis_valid(SecondNewest(Tractor)) ::: C) The tractor is the second-newest\nis_valid(SecondNewest(Minivan)) ::: D) The minivan is the second-newest\nis_valid(SecondNewest(Limousine)) ::: E) The limousine is the second-newest"
            }
        ]
    },
    {
        "id": "logical_deduction_2",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a station wagon, a sedan, a tractor, a motorcyle, and a limousine. The tractor is newer than the motorcyle. The motorcyle is newer than the sedan. The limousine is the oldest. The station wagon is the newest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The station wagon is the oldest.",
            "B) The sedan is the oldest.",
            "C) The tractor is the oldest.",
            "D) The motorcyle is the oldest.",
            "E) The limousine is the oldest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest among the five vehicles.\nNewest($x, bool)                   ::: Vehicle $x is the newest among the five vehicles.\nFacts:\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(tractor, True)             ::: The tractor.\nVehicle(motorcyle, True)           ::: The motorcyle.\nVehicle(limousine, True)           ::: The limousine.\nNewer(tractor, motorcyle, True)    ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan, True)      ::: The motorcyle is newer than the sedan.\nOldest(limousine, True)            ::: The limousine is the oldest.\nNewest(station_wagon, True)        ::: The station wagon is the newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($x, True) >>> (Older($x, station_wagon, True) && Older($x, sedan, True) && Older($x, tractor, True) && Older($x, motorcyle, True)) ::: The oldest vehicle is older than all others.\nNewest($x, True) >>> (Newer($x, sedan, True) && Newer($x, tractor, True) && Newer($x, motorcyle, True) && Newer($x, limousine, True)) ::: The newest vehicle is newer than all others.\nQuery:\nOldest(station_wagon, True)  ::: Option A\nOldest(sedan, True)          ::: Option B\nOldest(tractor, True)        ::: Option C\nOldest(motorcyle, True)      ::: Option D\nOldest(limousine, True)      ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nOldest(x) ::: Vehicle x is the oldest among the five vehicles.\nNewest(x) ::: Vehicle x is the newest among the five vehicles.\nPremises:\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, motorcyle) ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan) ::: The motorcyle is newer than the sedan.\nOldest(limousine) ::: The limousine is the oldest.\nNewest(station_wagon) ::: The station wagon is the newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x (Oldest(x) \u2192 (Older(x, station_wagon) \u2227 Older(x, sedan) \u2227 Older(x, tractor) \u2227 Older(x, motorcyle))) ::: The oldest vehicle is older than all others.\n\u2200x (Newest(x) \u2192 (Newer(x, sedan) \u2227 Newer(x, tractor) \u2227 Newer(x, motorcyle) \u2227 Newer(x, limousine))) ::: The newest vehicle is newer than all others.\nConclusion:\nOldest(station_wagon) ::: Option A\nOldest(sedan) ::: Option B\nOldest(tractor) ::: Option C\nOldest(motorcyle) ::: Option D\nOldest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([StationWagon, Sedan, Tractor, Motorcycle, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Motorcycle) ::: The tractor is newer than the motorcycle\nNewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan\nOldest(Limousine) ::: The limousine is the oldest\nNewest(StationWagon) ::: The station wagon is the newest\nForAll([x:Vehicle], Implies(Oldest(x), And(Older(x, StationWagon), Older(x, Sedan), Older(x, Tractor), Older(x, Motorcycle)))) ::: The oldest is older than all others\nForAll([x:Vehicle], Implies(Newest(x), And(Newer(x, Sedan), Newer(x, Tractor), Newer(x, Motorcycle), Newer(x, Limousine)))) ::: The newest is newer than all others\n# Options\nis_valid(Oldest(StationWagon)) ::: A) The station wagon is the oldest.\nis_valid(Oldest(Sedan)) ::: B) The sedan is the oldest.\nis_valid(Oldest(Tractor)) ::: C) The tractor is the oldest.\nis_valid(Oldest(Motorcycle)) ::: D) The motorcycle is the oldest.\nis_valid(Oldest(Limousine)) ::: E) The limousine is the oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest among the five vehicles.\nNewest($x, bool)                   ::: Vehicle $x is the newest among the five vehicles.\nFacts:\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(tractor, True)             ::: The tractor.\nVehicle(motorcyle, True)           ::: The motorcyle.\nVehicle(limousine, True)           ::: The limousine.\nNewer(tractor, motorcyle, True)    ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan, True)      ::: The motorcyle is newer than the sedan.\nOldest(limousine, True)            ::: The limousine is the oldest.\nNewest(station_wagon, True)        ::: The station wagon is the newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($x, True) >>> (Older($x, station_wagon, True) && Older($x, sedan, True) && Older($x, tractor, True) && Older($x, motorcyle, True)) ::: The oldest vehicle is older than all others.\nNewest($x, True) >>> (Newer($x, sedan, True) && Newer($x, tractor, True) && Newer($x, motorcyle, True) && Newer($x, limousine, True)) ::: The newest vehicle is newer than all others.\nQuery:\nOldest(station_wagon, True)  ::: Option A\nOldest(sedan, True)          ::: Option B\nOldest(tractor, True)        ::: Option C\nOldest(motorcyle, True)      ::: Option D\nOldest(limousine, True)      ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nOldest(x) ::: Vehicle x is the oldest among the five vehicles.\nNewest(x) ::: Vehicle x is the newest among the five vehicles.\nPremises:\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, motorcyle) ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan) ::: The motorcyle is newer than the sedan.\nOldest(limousine) ::: The limousine is the oldest.\nNewest(station_wagon) ::: The station wagon is the newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x (Oldest(x) \u2192 (Older(x, station_wagon) \u2227 Older(x, sedan) \u2227 Older(x, tractor) \u2227 Older(x, motorcyle))) ::: The oldest vehicle is older than all others.\n\u2200x (Newest(x) \u2192 (Newer(x, sedan) \u2227 Newer(x, tractor) \u2227 Newer(x, motorcyle) \u2227 Newer(x, limousine))) ::: The newest vehicle is newer than all others.\nConclusion:\nOldest(station_wagon) ::: Option A\nOldest(sedan) ::: Option B\nOldest(tractor) ::: Option C\nOldest(motorcyle) ::: Option D\nOldest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([StationWagon, Sedan, Tractor, Motorcycle, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Motorcycle) ::: The tractor is newer than the motorcycle\nNewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan\nOldest(Limousine) ::: The limousine is the oldest\nNewest(StationWagon) ::: The station wagon is the newest\nForAll([x:Vehicle], Implies(Oldest(x), And(Older(x, StationWagon), Older(x, Sedan), Older(x, Tractor), Older(x, Motorcycle)))) ::: The oldest is older than all others\nForAll([x:Vehicle], Implies(Newest(x), And(Newer(x, Sedan), Newer(x, Tractor), Newer(x, Motorcycle), Newer(x, Limousine)))) ::: The newest is newer than all others\n# Options\nis_valid(Oldest(StationWagon)) ::: A) The station wagon is the oldest.\nis_valid(Oldest(Sedan)) ::: B) The sedan is the oldest.\nis_valid(Oldest(Tractor)) ::: C) The tractor is the oldest.\nis_valid(Oldest(Motorcycle)) ::: D) The motorcycle is the oldest.\nis_valid(Oldest(Limousine)) ::: E) The limousine is the oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_3",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, plums, apples, peaches, and kiwis. The apples are less expensive than the peaches. The plums are the cheapest. The kiwis are the second-cheapest. The watermelons are more expensive than the peaches.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the most expensive.",
            "B) The plums are the most expensive.",
            "C) The apples are the most expensive.",
            "D) The peaches are the most expensive.",
            "E) The kiwis are the most expensive."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest.\nSecondCheapest($x, bool)          ::: Fruit $x is the second-cheapest.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nFacts:\nFruit(watermelons, True)          ::: The watermelons.\nFruit(plums, True)                ::: The plums.\nFruit(apples, True)               ::: The apples.\nFruit(peaches, True)              ::: The peaches.\nFruit(kiwis, True)                ::: The kiwis.\nCheaper(apples, peaches, True)    ::: The apples are less expensive than the peaches.\nCheapest(plums, True)             ::: The plums are the cheapest.\nSecondCheapest(kiwis, True)       ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons, True) ::: The watermelons are more expensive than the peaches.\nRules:\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nCheapest($x, True) >>> Cheaper($x, watermelons, True) && Cheaper($x, plums, True) && Cheaper($x, apples, True) && Cheaper($x, peaches, True) && Cheaper($x, kiwis, True) ::: The cheapest fruit is cheaper than all others.\nSecondCheapest($x, True) >>> Cheaper(plums, $x, True) && !Cheapest($x, True) && !MostExpensive($x, True) ::: The second-cheapest is more expensive than the cheapest but not the most expensive.\nCheaper($a, $b, True) >>> !Cheaper($b, $a, True) ::: Cheaper is asymmetric.\nMostExpensive($x, True) >>> Cheaper(watermelons, $x, True) && Cheaper(plums, $x, True) && Cheaper(apples, $x, True) && Cheaper(peaches, $x, True) && Cheaper(kiwis, $x, True) ::: The most expensive fruit is more expensive than all others.\nQuery:\nMostExpensive(watermelons, True)  ::: Option A\nMostExpensive(plums, True)        ::: Option B\nMostExpensive(apples, True)       ::: Option C\nMostExpensive(peaches, True)      ::: Option D\nMostExpensive(kiwis, True)        ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nCheapest(x) ::: x is the cheapest.\nSecondCheapest(x) ::: x is the second-cheapest.\nMostExpensive(x) ::: x is the most expensive.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(plums) ::: The plums.\nFruit(apples) ::: The apples.\nFruit(peaches) ::: The peaches.\nFruit(kiwis) ::: The kiwis.\nCheaper(apples, peaches) ::: The apples are less expensive than the peaches.\nCheapest(plums) ::: The plums are the cheapest.\nSecondCheapest(kiwis) ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons) ::: The watermelons are more expensive than the peaches.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (Cheapest(x) \u2192 (Cheaper(x, watermelons) \u2227 Cheaper(x, plums) \u2227 Cheaper(x, apples) \u2227 Cheaper(x, peaches) \u2227 Cheaper(x, kiwis))) ::: The cheapest is cheaper than all others.\n\u2200x (SecondCheapest(x) \u2192 (Cheaper(plums, x) \u2227 \u00acCheapest(x) \u2227 \u00acMostExpensive(x))) ::: The second-cheapest is more expensive than the cheapest but not the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x (MostExpensive(x) \u2192 (Cheaper(watermelons, x) \u2227 Cheaper(plums, x) \u2227 Cheaper(apples, x) \u2227 Cheaper(peaches, x) \u2227 Cheaper(kiwis, x))) ::: The most expensive is more expensive than all others.\nConclusion:\nMostExpensive(watermelons) ::: Option A\nMostExpensive(plums) ::: Option B\nMostExpensive(apples) ::: Option C\nMostExpensive(peaches) ::: Option D\nMostExpensive(kiwis) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Watermelons, Plums, Apples, Peaches, Kiwis])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Apples) < price(Peaches) ::: The apples are less expensive than the peaches.\nprice(Plums) == 1 ::: The plums are the cheapest.\nprice(Kiwis) == 2 ::: The kiwis are the second-cheapest.\nprice(Peaches) < price(Watermelons) ::: The watermelons are more expensive than the peaches.\n# Options\nis_valid(price(Watermelons) == 5) ::: A) The watermelons are the most expensive.\nis_valid(price(Plums) == 5) ::: B) The plums are the most expensive.\nis_valid(price(Apples) == 5) ::: C) The apples are the most expensive.\nis_valid(price(Peaches) == 5) ::: D) The peaches are the most expensive.\nis_valid(price(Kiwis) == 5) ::: E) The kiwis are the most expensive."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest.\nSecondCheapest($x, bool)          ::: Fruit $x is the second-cheapest.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nFacts:\nFruit(watermelons, True)          ::: The watermelons.\nFruit(plums, True)                ::: The plums.\nFruit(apples, True)               ::: The apples.\nFruit(peaches, True)              ::: The peaches.\nFruit(kiwis, True)                ::: The kiwis.\nCheaper(apples, peaches, True)    ::: The apples are less expensive than the peaches.\nCheapest(plums, True)             ::: The plums are the cheapest.\nSecondCheapest(kiwis, True)       ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons, True) ::: The watermelons are more expensive than the peaches.\nRules:\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nCheapest($x, True) >>> Cheaper($x, watermelons, True) && Cheaper($x, plums, True) && Cheaper($x, apples, True) && Cheaper($x, peaches, True) && Cheaper($x, kiwis, True) ::: The cheapest fruit is cheaper than all others.\nSecondCheapest($x, True) >>> Cheaper(plums, $x, True) && !Cheapest($x, True) && !MostExpensive($x, True) ::: The second-cheapest is more expensive than the cheapest but not the most expensive.\nCheaper($a, $b, True) >>> !Cheaper($b, $a, True) ::: Cheaper is asymmetric.\nMostExpensive($x, True) >>> Cheaper(watermelons, $x, True) && Cheaper(plums, $x, True) && Cheaper(apples, $x, True) && Cheaper(peaches, $x, True) && Cheaper(kiwis, $x, True) ::: The most expensive fruit is more expensive than all others.\nQuery:\nMostExpensive(watermelons, True)  ::: Option A\nMostExpensive(plums, True)        ::: Option B\nMostExpensive(apples, True)       ::: Option C\nMostExpensive(peaches, True)      ::: Option D\nMostExpensive(kiwis, True)        ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nCheapest(x) ::: x is the cheapest.\nSecondCheapest(x) ::: x is the second-cheapest.\nMostExpensive(x) ::: x is the most expensive.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(plums) ::: The plums.\nFruit(apples) ::: The apples.\nFruit(peaches) ::: The peaches.\nFruit(kiwis) ::: The kiwis.\nCheaper(apples, peaches) ::: The apples are less expensive than the peaches.\nCheapest(plums) ::: The plums are the cheapest.\nSecondCheapest(kiwis) ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons) ::: The watermelons are more expensive than the peaches.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (Cheapest(x) \u2192 (Cheaper(x, watermelons) \u2227 Cheaper(x, plums) \u2227 Cheaper(x, apples) \u2227 Cheaper(x, peaches) \u2227 Cheaper(x, kiwis))) ::: The cheapest is cheaper than all others.\n\u2200x (SecondCheapest(x) \u2192 (Cheaper(plums, x) \u2227 \u00acCheapest(x) \u2227 \u00acMostExpensive(x))) ::: The second-cheapest is more expensive than the cheapest but not the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x (MostExpensive(x) \u2192 (Cheaper(watermelons, x) \u2227 Cheaper(plums, x) \u2227 Cheaper(apples, x) \u2227 Cheaper(peaches, x) \u2227 Cheaper(kiwis, x))) ::: The most expensive is more expensive than all others.\nConclusion:\nMostExpensive(watermelons) ::: Option A\nMostExpensive(plums) ::: Option B\nMostExpensive(apples) ::: Option C\nMostExpensive(peaches) ::: Option D\nMostExpensive(kiwis) ::: Option E",
                "SAT": "# Declarations\nfruits = EnumSort([Watermelons, Plums, Apples, Peaches, Kiwis])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Apples) < price(Peaches) ::: The apples are less expensive than the peaches.\nprice(Plums) == 1 ::: The plums are the cheapest.\nprice(Kiwis) == 2 ::: The kiwis are the second-cheapest.\nprice(Peaches) < price(Watermelons) ::: The watermelons are more expensive than the peaches.\n# Options\nis_valid(price(Watermelons) == 5) ::: A) The watermelons are the most expensive.\nis_valid(price(Plums) == 5) ::: B) The plums are the most expensive.\nis_valid(price(Apples) == 5) ::: C) The apples are the most expensive.\nis_valid(price(Peaches) == 5) ::: D) The peaches are the most expensive.\nis_valid(price(Kiwis) == 5) ::: E) The kiwis are the most expensive."
            }
        ]
    },
    {
        "id": "logical_deduction_4",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a crow, a falcon, a robin, and a blue jay. The robin is to the right of the cardinal. The cardinal is to the right of the blue jay. The blue jay is the second from the left. The crow is the rightmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the second from the left.",
            "B) The crow is the second from the left.",
            "C) The falcon is the second from the left.",
            "D) The robin is the second from the left.",
            "E) The blue jay is the second from the left."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow,     True)            ::: The crow.\nBird(falcon,   True)            ::: The falcon.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromLeft($s, True) && LeftOf($s, $rm, True) && LeftOf($rm, $x, True) >>> SecondFromLeft($x, False) ::: If $s is second from left, then no other bird is second from left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(crow,     True)  ::: Option B\nSecondFromLeft(falcon,   True)  ::: Option C\nSecondFromLeft(robin,    True)  ::: Option D\nSecondFromLeft(blue_jay, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2200y (y \u2260 x \u2192 \u00acSecondFromLeft(y))) ::: Only one bird can be second from left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(falcon) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(blue_jay) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Cardinal, Crow, Falcon, Robin, BlueJay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Cardinal) ::: The robin is to the right of the cardinal.\npos(Cardinal) > pos(BlueJay) ::: The cardinal is to the right of the blue jay.\npos(BlueJay) == 2 ::: The blue jay is the second from the left.\npos(Crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Falcon) == 2) ::: C) The falcon is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: E) The blue jay is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow,     True)            ::: The crow.\nBird(falcon,   True)            ::: The falcon.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromLeft($s, True) && LeftOf($s, $rm, True) && LeftOf($rm, $x, True) >>> SecondFromLeft($x, False) ::: If $s is second from left, then no other bird is second from left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(crow,     True)  ::: Option B\nSecondFromLeft(falcon,   True)  ::: Option C\nSecondFromLeft(robin,    True)  ::: Option D\nSecondFromLeft(blue_jay, True)  ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2200y (y \u2260 x \u2192 \u00acSecondFromLeft(y))) ::: Only one bird can be second from left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(falcon) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(blue_jay) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Cardinal, Crow, Falcon, Robin, BlueJay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Cardinal) ::: The robin is to the right of the cardinal.\npos(Cardinal) > pos(BlueJay) ::: The cardinal is to the right of the blue jay.\npos(BlueJay) == 2 ::: The blue jay is the second from the left.\npos(Crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Falcon) == 2) ::: C) The falcon is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: E) The blue jay is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_5",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a sedan, a station wagon, a bus, and a limousine. The sedan is newer than the station wagon. The limousine is the newest. The bus is the second-newest. The convertible is the second-oldest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the second-oldest.",
            "B) The sedan is the second-oldest.",
            "C) The station wagon is the second-oldest.",
            "D) The bus is the second-oldest.",
            "E) The limousine is the second-oldest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(convertible, True)          ::: The convertible.\nVehicle(sedan, True)                ::: The sedan.\nVehicle(station_wagon, True)        ::: The station wagon.\nVehicle(bus, True)                  ::: The bus.\nVehicle(limousine, True)            ::: The limousine.\nNewer(sedan, station_wagon, True)   ::: The sedan is newer than the station wagon.\nNewest(limousine, True)             ::: The limousine is the newest.\nSecondNewest(bus, True)             ::: The bus is the second-newest.\nSecondOldest(convertible, True)     ::: The convertible is the second-oldest.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nSecondNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newest($e, True) ::: The second-newest is newer than all except the newest.\nSecondOldest($a, True) >>> Newer($b, $a, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is newer than all except the oldest.\nQuery:\nSecondOldest(convertible, True)    ::: Option A\nSecondOldest(sedan, True)          ::: Option B\nSecondOldest(station_wagon, True)   ::: Option C\nSecondOldest(bus, True)            ::: Option D\nSecondOldest(limousine, True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(limousine) ::: The limousine.\nNewer(sedan, station_wagon) ::: The sedan is newer than the station wagon.\nNewest(limousine) ::: The limousine is the newest.\nSecondNewest(bus) ::: The bus is the second-newest.\nSecondOldest(convertible) ::: The convertible is the second-oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (SecondNewest(x) \u2192 (\u2203y (Newest(y) \u2227 \u2200z (z \u2260 y \u2192 (z = x \u2228 Newer(x, z)))))) ::: The second-newest is newer than all except the newest.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (\u00acNewer(y, x) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z))))) ::: The second-oldest is newer than all except the oldest.\nConclusion:\nSecondOldest(convertible) ::: Option A\nSecondOldest(sedan) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, StationWagon, Bus, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: The newest is newer than all others\nForAll([x:Vehicle], Implies(SecondNewest(x), Exists([y:Vehicle], And(Newest(y), ForAll([z:Vehicle], Implies(z != y, Or(z == x, Newer(x, z))))))) ::: The second-newest is newer than all except the newest\nForAll([x:Vehicle], Implies(SecondOldest(x), Exists([y:Vehicle], And(Not(Newer(y, x)), ForAll([z:Vehicle], Implies(z != y, Newer(x, z)))))) ::: The second-oldest is newer than all except the oldest\nNewer(Sedan, StationWagon) ::: The sedan is newer than the station wagon\nNewest(Limousine) ::: The limousine is the newest\nSecondNewest(Bus) ::: The bus is the second-newest\nSecondOldest(Convertible) ::: The convertible is the second-oldest\n# Options\nis_valid(SecondOldest(Convertible)) ::: A) The convertible is the second-oldest.\nis_valid(SecondOldest(Sedan)) ::: B) The sedan is the second-oldest.\nis_valid(SecondOldest(StationWagon)) ::: C) The station wagon is the second-oldest.\nis_valid(SecondOldest(Bus)) ::: D) The bus is the second-oldest.\nis_valid(SecondOldest(Limousine)) ::: E) The limousine is the second-oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(convertible, True)          ::: The convertible.\nVehicle(sedan, True)                ::: The sedan.\nVehicle(station_wagon, True)        ::: The station wagon.\nVehicle(bus, True)                  ::: The bus.\nVehicle(limousine, True)            ::: The limousine.\nNewer(sedan, station_wagon, True)   ::: The sedan is newer than the station wagon.\nNewest(limousine, True)             ::: The limousine is the newest.\nSecondNewest(bus, True)             ::: The bus is the second-newest.\nSecondOldest(convertible, True)     ::: The convertible is the second-oldest.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nSecondNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newest($e, True) ::: The second-newest is newer than all except the newest.\nSecondOldest($a, True) >>> Newer($b, $a, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is newer than all except the oldest.\nQuery:\nSecondOldest(convertible, True)    ::: Option A\nSecondOldest(sedan, True)          ::: Option B\nSecondOldest(station_wagon, True)   ::: Option C\nSecondOldest(bus, True)            ::: Option D\nSecondOldest(limousine, True)       ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(limousine) ::: The limousine.\nNewer(sedan, station_wagon) ::: The sedan is newer than the station wagon.\nNewest(limousine) ::: The limousine is the newest.\nSecondNewest(bus) ::: The bus is the second-newest.\nSecondOldest(convertible) ::: The convertible is the second-oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (SecondNewest(x) \u2192 (\u2203y (Newest(y) \u2227 \u2200z (z \u2260 y \u2192 (z = x \u2228 Newer(x, z)))))) ::: The second-newest is newer than all except the newest.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (\u00acNewer(y, x) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z))))) ::: The second-oldest is newer than all except the oldest.\nConclusion:\nSecondOldest(convertible) ::: Option A\nSecondOldest(sedan) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, StationWagon, Bus, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: The newest is newer than all others\nForAll([x:Vehicle], Implies(SecondNewest(x), Exists([y:Vehicle], And(Newest(y), ForAll([z:Vehicle], Implies(z != y, Or(z == x, Newer(x, z))))))) ::: The second-newest is newer than all except the newest\nForAll([x:Vehicle], Implies(SecondOldest(x), Exists([y:Vehicle], And(Not(Newer(y, x)), ForAll([z:Vehicle], Implies(z != y, Newer(x, z)))))) ::: The second-oldest is newer than all except the oldest\nNewer(Sedan, StationWagon) ::: The sedan is newer than the station wagon\nNewest(Limousine) ::: The limousine is the newest\nSecondNewest(Bus) ::: The bus is the second-newest\nSecondOldest(Convertible) ::: The convertible is the second-oldest\n# Options\nis_valid(SecondOldest(Convertible)) ::: A) The convertible is the second-oldest.\nis_valid(SecondOldest(Sedan)) ::: B) The sedan is the second-oldest.\nis_valid(SecondOldest(StationWagon)) ::: C) The station wagon is the second-oldest.\nis_valid(SecondOldest(Bus)) ::: D) The bus is the second-oldest.\nis_valid(SecondOldest(Limousine)) ::: E) The limousine is the second-oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_6",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a crow, a robin, a quail, a blue jay, and a falcon. The robin is to the left of the quail. The falcon is the third from the left. The crow is to the left of the falcon. The blue jay is the leftmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The crow is the third from the left.",
            "B) The robin is the third from the left.",
            "C) The quail is the third from the left.",
            "D) The blue jay is the third from the left.",
            "E) The falcon is the third from the left."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nPosition($x, $n, bool)          ::: Bird $x is at position $n from the left (1-based index).\nFacts:\nBird(crow,    True)             ::: The crow.\nBird(robin,   True)             ::: The robin.\nBird(quail,   True)             ::: The quail.\nBird(blue_jay, True)            ::: The blue jay.\nBird(falcon,  True)             ::: The falcon.\nLeftOf(robin, quail, True)      ::: The robin is to the left of the quail.\nPosition(falcon, 3, True)       ::: The falcon is the third from the left.\nLeftOf(crow, falcon, True)      ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1, True)     ::: The blue jay is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($a, $n, True) && Position($b, $m, True) && $n < $m >>> LeftOf($a, $b, True) ::: If $a is at a lower position than $b, then $a is left of $b.\nPosition($a, $n, True) && Position($b, $m, True) && $n > $m >>> RightOf($a, $b, True) ::: If $a is at a higher position than $b, then $a is right of $b.\nQuery:\nPosition(crow, 3, True)         ::: Option A\nPosition(robin, 3, True)        ::: Option B\nPosition(quail, 3, True)        ::: Option C\nPosition(blue_jay, 3, True)     ::: Option D\nPosition(falcon, 3, True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nPosition(x, n) ::: Bird x is at position n from the left (1-based index).\nPremises:\nBird(crow) ::: The crow.\nBird(robin) ::: The robin.\nBird(quail) ::: The quail.\nBird(blue_jay) ::: The blue jay.\nBird(falcon) ::: The falcon.\nLeftOf(robin, quail) ::: The robin is to the left of the quail.\nPosition(falcon, 3) ::: The falcon is the third from the left.\nLeftOf(crow, falcon) ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1) ::: The blue jay is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x \u2200y \u2200n \u2200m (Position(x, n) \u2227 Position(y, m) \u2227 n < m \u2192 LeftOf(x, y)) ::: Lower position implies left-of.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each bird has a unique position.\n\u2200n \u2203x Position(x, n) ::: Each position is occupied by some bird.\nConclusion:\nPosition(crow, 3) ::: Option A\nPosition(robin, 3) ::: Option B\nPosition(quail, 3) ::: Option C\nPosition(blue_jay, 3) ::: Option D\nPosition(falcon, 3) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Crow, Robin, Quail, BlueJay, Falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) < pos(Quail) ::: The robin is to the left of the quail.\npos(Falcon) == 3 ::: The falcon is the third from the left.\npos(Crow) < pos(Falcon) ::: The crow is to the left of the falcon.\npos(BlueJay) == 1 ::: The blue jay is the leftmost.\n# Options\nis_valid(pos(Crow) == 3) ::: A) The crow is the third from the left.\nis_valid(pos(Robin) == 3) ::: B) The robin is the third from the left.\nis_valid(pos(Quail) == 3) ::: C) The quail is the third from the left.\nis_valid(pos(BlueJay) == 3) ::: D) The blue jay is the third from the left.\nis_valid(pos(Falcon) == 3) ::: E) The falcon is the third from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nPosition($x, $n, bool)          ::: Bird $x is at position $n from the left (1-based index).\nFacts:\nBird(crow,    True)             ::: The crow.\nBird(robin,   True)             ::: The robin.\nBird(quail,   True)             ::: The quail.\nBird(blue_jay, True)            ::: The blue jay.\nBird(falcon,  True)             ::: The falcon.\nLeftOf(robin, quail, True)      ::: The robin is to the left of the quail.\nPosition(falcon, 3, True)       ::: The falcon is the third from the left.\nLeftOf(crow, falcon, True)      ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1, True)     ::: The blue jay is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($a, $n, True) && Position($b, $m, True) && $n < $m >>> LeftOf($a, $b, True) ::: If $a is at a lower position than $b, then $a is left of $b.\nPosition($a, $n, True) && Position($b, $m, True) && $n > $m >>> RightOf($a, $b, True) ::: If $a is at a higher position than $b, then $a is right of $b.\nQuery:\nPosition(crow, 3, True)         ::: Option A\nPosition(robin, 3, True)        ::: Option B\nPosition(quail, 3, True)        ::: Option C\nPosition(blue_jay, 3, True)     ::: Option D\nPosition(falcon, 3, True)       ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nPosition(x, n) ::: Bird x is at position n from the left (1-based index).\nPremises:\nBird(crow) ::: The crow.\nBird(robin) ::: The robin.\nBird(quail) ::: The quail.\nBird(blue_jay) ::: The blue jay.\nBird(falcon) ::: The falcon.\nLeftOf(robin, quail) ::: The robin is to the left of the quail.\nPosition(falcon, 3) ::: The falcon is the third from the left.\nLeftOf(crow, falcon) ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1) ::: The blue jay is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x \u2200y \u2200n \u2200m (Position(x, n) \u2227 Position(y, m) \u2227 n < m \u2192 LeftOf(x, y)) ::: Lower position implies left-of.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each bird has a unique position.\n\u2200n \u2203x Position(x, n) ::: Each position is occupied by some bird.\nConclusion:\nPosition(crow, 3) ::: Option A\nPosition(robin, 3) ::: Option B\nPosition(quail, 3) ::: Option C\nPosition(blue_jay, 3) ::: Option D\nPosition(falcon, 3) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Crow, Robin, Quail, BlueJay, Falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) < pos(Quail) ::: The robin is to the left of the quail.\npos(Falcon) == 3 ::: The falcon is the third from the left.\npos(Crow) < pos(Falcon) ::: The crow is to the left of the falcon.\npos(BlueJay) == 1 ::: The blue jay is the leftmost.\n# Options\nis_valid(pos(Crow) == 3) ::: A) The crow is the third from the left.\nis_valid(pos(Robin) == 3) ::: B) The robin is the third from the left.\nis_valid(pos(Quail) == 3) ::: C) The quail is the third from the left.\nis_valid(pos(BlueJay) == 3) ::: D) The blue jay is the third from the left.\nis_valid(pos(Falcon) == 3) ::: E) The falcon is the third from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_7",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a robin, a blue jay, a quail, and a raven. The robin is to the right of the raven. The cardinal is the leftmost. The raven is to the right of the blue jay. The blue jay is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the second from the left.",
            "B) The robin is the second from the left.",
            "C) The blue jay is the second from the left.",
            "D) The quail is the second from the left.",
            "E) The raven is the second from the left."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven,   True)   ::: The robin is to the right of the raven.\nLeftMost(cardinal, True)        ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay, True)   ::: The blue jay is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(quail,    True)  ::: Option D\nSecondFromLeft(raven,    True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftMost(cardinal) ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay) ::: The blue jay is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(quail) ::: Option D\nSecondFromLeft(raven) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([cardinal, robin, blue_jay, quail, raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(robin) > pos(raven) ::: The robin is to the right of the raven.\npos(cardinal) == 1 ::: The cardinal is the leftmost.\npos(raven) > pos(blue_jay) ::: The raven is to the right of the blue jay.\npos(blue_jay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(quail) == 2) ::: D) The quail is the second from the left.\nis_valid(pos(raven) == 2) ::: E) The raven is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven,   True)   ::: The robin is to the right of the raven.\nLeftMost(cardinal, True)        ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay, True)   ::: The blue jay is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(quail,    True)  ::: Option D\nSecondFromLeft(raven,    True)  ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftMost(cardinal) ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay) ::: The blue jay is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(quail) ::: Option D\nSecondFromLeft(raven) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([cardinal, robin, blue_jay, quail, raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(robin) > pos(raven) ::: The robin is to the right of the raven.\npos(cardinal) == 1 ::: The cardinal is the leftmost.\npos(raven) > pos(blue_jay) ::: The raven is to the right of the blue jay.\npos(blue_jay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(quail) == 2) ::: D) The quail is the second from the left.\nis_valid(pos(raven) == 2) ::: E) The raven is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_8",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a robin, a blue jay, a hawk, and a hummingbird. The owl is the second from the right. The robin is the second from the left. The robin is to the right of the blue jay. The hummingbird is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the rightmost.",
            "B) The robin is the rightmost.",
            "C) The blue jay is the rightmost.",
            "D) The hawk is the rightmost.",
            "E) The hummingbird is the rightmost."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, owl, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, hawk, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: The second from the left implies three birds to its right.\nQuery:\nRightMost(owl, True)            ::: Option A\nRightMost(robin, True)          ::: Option B\nRightMost(blue_jay, True)       ::: Option C\nRightMost(hawk, True)           ::: Option D\nRightMost(hummingbird, True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay) \u2227 RightOf(x, hawk) \u2192 RightMost(x)) ::: A bird to the right of all others is right-most.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z \u2203w (LeftOf(x, y) \u2227 LeftOf(y, z) \u2227 LeftOf(z, w))) ::: Second from left implies three birds to its right.\nConclusion:\nRightMost(owl) ::: Option A\nRightMost(robin) ::: Option B\nRightMost(blue_jay) ::: Option C\nRightMost(hawk) ::: Option D\nRightMost(hummingbird) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right (position 4 in 1-5 ordering)\npos(Robin) == 2 ::: The robin is the second from the left\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk\n# Options\nis_valid(pos(Owl) == 5) ::: A) The owl is the rightmost\nis_valid(pos(Robin) == 5) ::: B) The robin is the rightmost\nis_valid(pos(BlueJay) == 5) ::: C) The blue jay is the rightmost\nis_valid(pos(Hawk) == 5) ::: D) The hawk is the rightmost\nis_valid(pos(Hummingbird) == 5) ::: E) The hummingbird is the rightmost"
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, owl, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, hawk, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: The second from the left implies three birds to its right.\nQuery:\nRightMost(owl, True)            ::: Option A\nRightMost(robin, True)          ::: Option B\nRightMost(blue_jay, True)       ::: Option C\nRightMost(hawk, True)           ::: Option D\nRightMost(hummingbird, True)    ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay) \u2227 RightOf(x, hawk) \u2192 RightMost(x)) ::: A bird to the right of all others is right-most.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z \u2203w (LeftOf(x, y) \u2227 LeftOf(y, z) \u2227 LeftOf(z, w))) ::: Second from left implies three birds to its right.\nConclusion:\nRightMost(owl) ::: Option A\nRightMost(robin) ::: Option B\nRightMost(blue_jay) ::: Option C\nRightMost(hawk) ::: Option D\nRightMost(hummingbird) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right (position 4 in 1-5 ordering)\npos(Robin) == 2 ::: The robin is the second from the left\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk\n# Options\nis_valid(pos(Owl) == 5) ::: A) The owl is the rightmost\nis_valid(pos(Robin) == 5) ::: B) The robin is the rightmost\nis_valid(pos(BlueJay) == 5) ::: C) The blue jay is the rightmost\nis_valid(pos(Hawk) == 5) ::: D) The hawk is the rightmost\nis_valid(pos(Hummingbird) == 5) ::: E) The hummingbird is the rightmost"
            }
        ]
    },
    {
        "id": "logical_deduction_9",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a brown book, an orange book, a red book, a purple book, and a black book. The purple book is to the left of the black book. The red book is to the right of the brown book. The orange book is the second from the left. The black book is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The brown book is the second from the right.",
            "B) The orange book is the second from the right.",
            "C) The red book is the second from the right.",
            "D) The purple book is the second from the right.",
            "E) The black book is the second from the right."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nPosition($x, $n, bool)          ::: Book $x is at position $n from the left (1-based index).\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(brown,  True)              ::: The brown book.\nBook(orange, True)              ::: The orange book.\nBook(red,    True)              ::: The red book.\nBook(purple, True)              ::: The purple book.\nBook(black,  True)              ::: The black book.\nLeftOf(purple, black, True)     ::: The purple book is to the left of the black book.\nRightOf(red, brown, True)       ::: The red book is to the right of the brown book.\nPosition(orange, 2, True)       ::: The orange book is the second from the left.\nPosition(black, 3, True)        ::: The black book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($x, $n, True) >>> Position($y, $n+1, True) && LeftOf($x, $y, True) ::: If $x is at position $n, then $y is at position $n+1 and $x is left of $y.\nPosition($x, $n, True) && Position($y, $n-1, True) >>> LeftOf($y, $x, True) ::: If $x is at position $n and $y is at position $n-1, then $y is left of $x.\nPosition($x, 5, True) >>> SecondFromRight($y, True) && Position($y, 4, True) ::: If $x is at position 5 (rightmost), then $y at position 4 is second from the right.\nPosition($x, 4, True) >>> SecondFromRight($x, True) ::: If $x is at position 4, then $x is second from the right.\nQuery:\nSecondFromRight(brown,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(red,    True)  ::: Option C\nSecondFromRight(purple, True)  ::: Option D\nSecondFromRight(black,  True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, n) ::: Book x is at position n from the left (1-based index).\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(brown) ::: The brown book.\nBook(orange) ::: The orange book.\nBook(red) ::: The red book.\nBook(purple) ::: The purple book.\nBook(black) ::: The black book.\nLeftOf(purple, black) ::: The purple book is to the left of the black book.\nLeftOf(brown, red) ::: The brown book is to the left of the red book.\nPosition(orange, 2) ::: The orange book is the second from the left.\nPosition(black, 3) ::: The black book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each book has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position has a unique book.\n\u2200x \u2200y (Position(x, n) \u2227 Position(y, n+1) \u2192 LeftOf(x, y)) ::: Adjacent positions imply ordering.\n\u2200x (Position(x, 5) \u2192 \u2203y (Position(y, 4) \u2227 SecondFromRight(y))) ::: The book at position 4 is second from the right.\n\u2200x (Position(x, 4) \u2192 SecondFromRight(x)) ::: The book at position 4 is second from the right.\nConclusion:\nSecondFromRight(brown) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(red) ::: Option C\nSecondFromRight(purple) ::: Option D\nSecondFromRight(black) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Brown, Orange, Red, Purple, Black])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) < pos(Black) ::: The purple book is to the left of the black book.\npos(Red) > pos(Brown) ::: The red book is to the right of the brown book.\npos(Orange) == 2 ::: The orange book is the second from the left.\npos(Black) == 3 ::: The black book is the third from the left.\n# Options\nis_valid(pos(Brown) == 4) ::: A) The brown book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Red) == 4) ::: C) The red book is the second from the right.\nis_valid(pos(Purple) == 4) ::: D) The purple book is the second from the right.\nis_valid(pos(Black) == 4) ::: E) The black book is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nPosition($x, $n, bool)          ::: Book $x is at position $n from the left (1-based index).\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(brown,  True)              ::: The brown book.\nBook(orange, True)              ::: The orange book.\nBook(red,    True)              ::: The red book.\nBook(purple, True)              ::: The purple book.\nBook(black,  True)              ::: The black book.\nLeftOf(purple, black, True)     ::: The purple book is to the left of the black book.\nRightOf(red, brown, True)       ::: The red book is to the right of the brown book.\nPosition(orange, 2, True)       ::: The orange book is the second from the left.\nPosition(black, 3, True)        ::: The black book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($x, $n, True) >>> Position($y, $n+1, True) && LeftOf($x, $y, True) ::: If $x is at position $n, then $y is at position $n+1 and $x is left of $y.\nPosition($x, $n, True) && Position($y, $n-1, True) >>> LeftOf($y, $x, True) ::: If $x is at position $n and $y is at position $n-1, then $y is left of $x.\nPosition($x, 5, True) >>> SecondFromRight($y, True) && Position($y, 4, True) ::: If $x is at position 5 (rightmost), then $y at position 4 is second from the right.\nPosition($x, 4, True) >>> SecondFromRight($x, True) ::: If $x is at position 4, then $x is second from the right.\nQuery:\nSecondFromRight(brown,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(red,    True)  ::: Option C\nSecondFromRight(purple, True)  ::: Option D\nSecondFromRight(black,  True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, n) ::: Book x is at position n from the left (1-based index).\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(brown) ::: The brown book.\nBook(orange) ::: The orange book.\nBook(red) ::: The red book.\nBook(purple) ::: The purple book.\nBook(black) ::: The black book.\nLeftOf(purple, black) ::: The purple book is to the left of the black book.\nLeftOf(brown, red) ::: The brown book is to the left of the red book.\nPosition(orange, 2) ::: The orange book is the second from the left.\nPosition(black, 3) ::: The black book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each book has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position has a unique book.\n\u2200x \u2200y (Position(x, n) \u2227 Position(y, n+1) \u2192 LeftOf(x, y)) ::: Adjacent positions imply ordering.\n\u2200x (Position(x, 5) \u2192 \u2203y (Position(y, 4) \u2227 SecondFromRight(y))) ::: The book at position 4 is second from the right.\n\u2200x (Position(x, 4) \u2192 SecondFromRight(x)) ::: The book at position 4 is second from the right.\nConclusion:\nSecondFromRight(brown) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(red) ::: Option C\nSecondFromRight(purple) ::: Option D\nSecondFromRight(black) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Brown, Orange, Red, Purple, Black])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) < pos(Black) ::: The purple book is to the left of the black book.\npos(Red) > pos(Brown) ::: The red book is to the right of the brown book.\npos(Orange) == 2 ::: The orange book is the second from the left.\npos(Black) == 3 ::: The black book is the third from the left.\n# Options\nis_valid(pos(Brown) == 4) ::: A) The brown book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Red) == 4) ::: C) The red book is the second from the right.\nis_valid(pos(Purple) == 4) ::: D) The purple book is the second from the right.\nis_valid(pos(Black) == 4) ::: E) The black book is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_10",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a robin, a blue jay, a hawk, and a hummingbird. The owl is the second from the right. The robin is the second from the left. The robin is to the right of the blue jay. The hummingbird is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the second from the left.",
            "B) The robin is the second from the left.",
            "C) The blue jay is the second from the left.",
            "D) The hawk is the second from the left.",
            "E) The hummingbird is the second from the left."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: $a is second from left implies there are three birds to its right.\nSecondFromRight($a, True) >>> RightOf($a, $b, True) && RightOf($b, $c, True) && RightOf($c, $d, True) ::: $a is second from right implies there are three birds to its left.\nQuery:\nSecondFromLeft(owl, True)       ::: Option A\nSecondFromLeft(robin, True)     ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(hawk, True)      ::: Option D\nSecondFromLeft(hummingbird, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z \u2203w (LeftOf(y, x) \u2227 LeftOf(x, z) \u2227 LeftOf(z, w))) ::: x is second from left implies three birds to its right.\n\u2200x (SecondFromRight(x) \u2192 \u2203y \u2203z \u2203w (RightOf(y, x) \u2227 RightOf(x, z) \u2227 RightOf(z, w))) ::: x is second from right implies three birds to its left.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(hawk) ::: Option D\nSecondFromLeft(hummingbird) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([owl, robin, blue_jay, hawk, hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(owl) == 4 ::: The owl is the second from the right.\npos(robin) == 2 ::: The robin is the second from the left.\npos(robin) > pos(blue_jay) ::: The robin is to the right of the blue jay.\npos(hummingbird) > pos(hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(hawk) == 2) ::: D) The hawk is the second from the left.\nis_valid(pos(hummingbird) == 2) ::: E) The hummingbird is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: $a is second from left implies there are three birds to its right.\nSecondFromRight($a, True) >>> RightOf($a, $b, True) && RightOf($b, $c, True) && RightOf($c, $d, True) ::: $a is second from right implies there are three birds to its left.\nQuery:\nSecondFromLeft(owl, True)       ::: Option A\nSecondFromLeft(robin, True)     ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(hawk, True)      ::: Option D\nSecondFromLeft(hummingbird, True) ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z \u2203w (LeftOf(y, x) \u2227 LeftOf(x, z) \u2227 LeftOf(z, w))) ::: x is second from left implies three birds to its right.\n\u2200x (SecondFromRight(x) \u2192 \u2203y \u2203z \u2203w (RightOf(y, x) \u2227 RightOf(x, z) \u2227 RightOf(z, w))) ::: x is second from right implies three birds to its left.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(hawk) ::: Option D\nSecondFromLeft(hummingbird) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([owl, robin, blue_jay, hawk, hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(owl) == 4 ::: The owl is the second from the right.\npos(robin) == 2 ::: The robin is the second from the left.\npos(robin) > pos(blue_jay) ::: The robin is to the right of the blue jay.\npos(hummingbird) > pos(hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(hawk) == 2) ::: D) The hawk is the second from the left.\nis_valid(pos(hummingbird) == 2) ::: E) The hummingbird is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_11",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a truck, a bus, a sedan, and a motorcyle. The bus is newer than the truck. The truck is newer than the convertible. The sedan is the second-oldest. The motorcyle is newer than the bus.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the newest.",
            "B) The truck is the newest.",
            "C) The bus is the newest.",
            "D) The sedan is the newest.",
            "E) The motorcyle is the newest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(truck, True)               ::: The truck.\nVehicle(bus, True)                 ::: The bus.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(motorcyle, True)           ::: The motorcyle.\nNewer(bus, truck, True)            ::: The bus is newer than the truck.\nNewer(truck, convertible, True)    ::: The truck is newer than the convertible.\nNewer(motorcyle, bus, True)        ::: The motorcyle is newer than the bus.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nNewer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) >>> Newest($a, True) ::: A vehicle that is newer than all the other four is the newest.\nNewer($b, $a, True) && Newer($c, $a, True) && Newer($d, $a, True) && Newer($e, $a, True) >>> Oldest($a, True) ::: A vehicle that is older than all the other four is the oldest.\nQuery:\nNewest(convertible, True)          ::: Option A\nNewest(truck, True)               ::: Option B\nNewest(bus, True)                 ::: Option C\nNewest(sedan, True)               ::: Option D\nNewest(motorcyle, True)           ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(truck) ::: The truck.\nVehicle(bus) ::: The bus.\nVehicle(sedan) ::: The sedan.\nVehicle(motorcyle) ::: The motorcyle.\nNewer(bus, truck) ::: The bus is newer than the truck.\nNewer(truck, convertible) ::: The truck is newer than the convertible.\nNewer(motorcyle, bus) ::: The motorcyle is newer than the bus.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: Newer is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Newest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(x, y)))) ::: A vehicle is newest if it is newer than all others.\n\u2200x (Oldest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(y, x)))) ::: A vehicle is oldest if it is older than all others.\nConclusion:\nNewest(convertible) ::: Option A\nNewest(truck) ::: Option B\nNewest(bus) ::: Option C\nNewest(sedan) ::: Option D\nNewest(motorcyle) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Truck, Bus, Sedan, Motorcycle])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\n# Constraints\nNewer(Bus, Truck) ::: The bus is newer than the truck.\nNewer(Truck, Convertible) ::: The truck is newer than the convertible.\nNewer(Motorcycle, Bus) ::: The motorcycle is newer than the bus.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: Newer is asymmetric.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z)) ::: Newer is transitive.\nForAll([x:Vehicle], Implies(And(Vehicle(x), ForAll([y:Vehicle], Implies(And(Vehicle(y), Not(y == x)), Newer(x, y)))), Newest(x))) ::: A vehicle is newest if it is newer than all others.\nForAll([x:Vehicle], Implies(And(Vehicle(x), ForAll([y:Vehicle], Implies(And(Vehicle(y), Not(y == x)), Newer(y, x))), Oldest(x))) ::: A vehicle is oldest if it is older than all others.\n# Options\nis_valid(Newest(Convertible)) ::: A) The convertible is the newest.\nis_valid(Newest(Truck)) ::: B) The truck is the newest.\nis_valid(Newest(Bus)) ::: C) The bus is the newest.\nis_valid(Newest(Sedan)) ::: D) The sedan is the newest.\nis_valid(Newest(Motorcycle)) ::: E) The motorcycle is the newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(truck, True)               ::: The truck.\nVehicle(bus, True)                 ::: The bus.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(motorcyle, True)           ::: The motorcyle.\nNewer(bus, truck, True)            ::: The bus is newer than the truck.\nNewer(truck, convertible, True)    ::: The truck is newer than the convertible.\nNewer(motorcyle, bus, True)        ::: The motorcyle is newer than the bus.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nNewer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) >>> Newest($a, True) ::: A vehicle that is newer than all the other four is the newest.\nNewer($b, $a, True) && Newer($c, $a, True) && Newer($d, $a, True) && Newer($e, $a, True) >>> Oldest($a, True) ::: A vehicle that is older than all the other four is the oldest.\nQuery:\nNewest(convertible, True)          ::: Option A\nNewest(truck, True)               ::: Option B\nNewest(bus, True)                 ::: Option C\nNewest(sedan, True)               ::: Option D\nNewest(motorcyle, True)           ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(truck) ::: The truck.\nVehicle(bus) ::: The bus.\nVehicle(sedan) ::: The sedan.\nVehicle(motorcyle) ::: The motorcyle.\nNewer(bus, truck) ::: The bus is newer than the truck.\nNewer(truck, convertible) ::: The truck is newer than the convertible.\nNewer(motorcyle, bus) ::: The motorcyle is newer than the bus.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: Newer is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Newest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(x, y)))) ::: A vehicle is newest if it is newer than all others.\n\u2200x (Oldest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(y, x)))) ::: A vehicle is oldest if it is older than all others.\nConclusion:\nNewest(convertible) ::: Option A\nNewest(truck) ::: Option B\nNewest(bus) ::: Option C\nNewest(sedan) ::: Option D\nNewest(motorcyle) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Truck, Bus, Sedan, Motorcycle])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\n# Constraints\nNewer(Bus, Truck) ::: The bus is newer than the truck.\nNewer(Truck, Convertible) ::: The truck is newer than the convertible.\nNewer(Motorcycle, Bus) ::: The motorcycle is newer than the bus.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: Newer is asymmetric.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z)) ::: Newer is transitive.\nForAll([x:Vehicle], Implies(And(Vehicle(x), ForAll([y:Vehicle], Implies(And(Vehicle(y), Not(y == x)), Newer(x, y)))), Newest(x))) ::: A vehicle is newest if it is newer than all others.\nForAll([x:Vehicle], Implies(And(Vehicle(x), ForAll([y:Vehicle], Implies(And(Vehicle(y), Not(y == x)), Newer(y, x))), Oldest(x))) ::: A vehicle is oldest if it is older than all others.\n# Options\nis_valid(Newest(Convertible)) ::: A) The convertible is the newest.\nis_valid(Newest(Truck)) ::: B) The truck is the newest.\nis_valid(Newest(Bus)) ::: C) The bus is the newest.\nis_valid(Newest(Sedan)) ::: D) The sedan is the newest.\nis_valid(Newest(Motorcycle)) ::: E) The motorcycle is the newest."
            }
        ]
    },
    {
        "id": "logical_deduction_12",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn a golf tournament, there were five golfers: Eve, Rob, Ana, Eli, and Mya. Eli finished below Mya. Eve finished first. Ana finished below Eli. Rob finished second.",
        "question": "Which of the following is true?",
        "options": [
            "A) Eve finished third.",
            "B) Rob finished third.",
            "C) Ana finished third.",
            "D) Eli finished third.",
            "E) Mya finished third."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedBelow($x, $y, bool)        ::: Golfer $x finished below golfer $y.\nFinishedFirst($x, bool)            ::: Golfer $x finished first.\nFinishedSecond($x, bool)           ::: Golfer $x finished second.\nFinishedThird($x, bool)            ::: Golfer $x finished third.\nFacts:\nGolfer(Eve, True)                  ::: Eve is one of the golfers.\nGolfer(Rob, True)                  ::: Rob is one of the golfers.\nGolfer(Ana, True)                  ::: Ana is one of the golfers.\nGolfer(Eli, True)                  ::: Eli is one of the golfers.\nGolfer(Mya, True)                  ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya, True)      ::: Eli finished below Mya.\nFinishedFirst(Eve, True)           ::: Eve finished first.\nFinishedBelow(Ana, Eli, True)      ::: Ana finished below Eli.\nFinishedSecond(Rob, True)          ::: Rob finished second.\nRules:\nFinishedBelow($a, $b, True) >>> !FinishedBelow($b, $a, True) ::: If $a finished below $b, then $b did not finish below $a.\nFinishedFirst($a, True) >>> !FinishedBelow($a, $b, True) ::: If $a finished first, then $a did not finish below any other golfer.\nFinishedSecond($a, True) >>> !FinishedBelow($a, $b, True) && FinishedBelow($b, $a, True) ::: If $a finished second, then $a did not finish below any other golfer except the first.\nFinishedThird($a, True) >>> FinishedBelow($a, $b, True) && FinishedBelow($a, $c, True) && !FinishedBelow($a, $d, True) ::: If $a finished third, then $a finished below two golfers and not below the remaining two.\nQuery:\nFinishedThird(Eve, True)  ::: Option A\nFinishedThird(Rob, True)  ::: Option B\nFinishedThird(Ana, True)  ::: Option C\nFinishedThird(Eli, True)  ::: Option D\nFinishedThird(Mya, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedFirst(x) ::: Golfer x finished first.\nFinishedSecond(x) ::: Golfer x finished second.\nFinishedThird(x) ::: Golfer x finished third.\nPremises:\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya) ::: Eli finished below Mya.\nFinishedFirst(Eve) ::: Eve finished first.\nFinishedBelow(Ana, Eli) ::: Ana finished below Eli.\nFinishedSecond(Rob) ::: Rob finished second.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 \u00acFinishedBelow(y, x)) ::: If x finished below y, then y did not finish below x.\n\u2200x (FinishedFirst(x) \u2192 \u2200y \u00acFinishedBelow(x, y)) ::: If x finished first, then x did not finish below any other golfer.\n\u2200x (FinishedSecond(x) \u2192 (\u2200y \u00acFinishedBelow(x, y) \u2228 (\u2203z (FinishedFirst(z) \u2227 FinishedBelow(y, x))) ::: If x finished second, then x did not finish below any other golfer except the first.\n\u2200x (FinishedThird(x) \u2192 (\u2203y \u2203z (FinishedBelow(x, y) \u2227 FinishedBelow(x, z) \u2227 y \u2260 z) \u2227 \u2200w (\u00acFinishedBelow(x, w) \u2228 w = y \u2228 w = z))) ::: If x finished third, then x finished below two golfers and not below the remaining two.\nConclusion:\nFinishedThird(Eve) ::: Option A\nFinishedThird(Rob) ::: Option B\nFinishedThird(Ana) ::: Option C\nFinishedThird(Eli) ::: Option D\nFinishedThird(Mya) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nGolfers = EnumSort([Eve, Rob, Ana, Eli, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Eve) == 1 ::: Eve finished first.\npos(Rob) == 2 ::: Rob finished second.\npos(Eli) > pos(Mya) ::: Eli finished below Mya.\npos(Ana) > pos(Eli) ::: Ana finished below Eli.\n# Options\nis_valid(pos(Eve) == 3) ::: A) Eve finished third.\nis_valid(pos(Rob) == 3) ::: B) Rob finished third.\nis_valid(pos(Ana) == 3) ::: C) Ana finished third.\nis_valid(pos(Eli) == 3) ::: D) Eli finished third.\nis_valid(pos(Mya) == 3) ::: E) Mya finished third."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedBelow($x, $y, bool)        ::: Golfer $x finished below golfer $y.\nFinishedFirst($x, bool)            ::: Golfer $x finished first.\nFinishedSecond($x, bool)           ::: Golfer $x finished second.\nFinishedThird($x, bool)            ::: Golfer $x finished third.\nFacts:\nGolfer(Eve, True)                  ::: Eve is one of the golfers.\nGolfer(Rob, True)                  ::: Rob is one of the golfers.\nGolfer(Ana, True)                  ::: Ana is one of the golfers.\nGolfer(Eli, True)                  ::: Eli is one of the golfers.\nGolfer(Mya, True)                  ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya, True)      ::: Eli finished below Mya.\nFinishedFirst(Eve, True)           ::: Eve finished first.\nFinishedBelow(Ana, Eli, True)      ::: Ana finished below Eli.\nFinishedSecond(Rob, True)          ::: Rob finished second.\nRules:\nFinishedBelow($a, $b, True) >>> !FinishedBelow($b, $a, True) ::: If $a finished below $b, then $b did not finish below $a.\nFinishedFirst($a, True) >>> !FinishedBelow($a, $b, True) ::: If $a finished first, then $a did not finish below any other golfer.\nFinishedSecond($a, True) >>> !FinishedBelow($a, $b, True) && FinishedBelow($b, $a, True) ::: If $a finished second, then $a did not finish below any other golfer except the first.\nFinishedThird($a, True) >>> FinishedBelow($a, $b, True) && FinishedBelow($a, $c, True) && !FinishedBelow($a, $d, True) ::: If $a finished third, then $a finished below two golfers and not below the remaining two.\nQuery:\nFinishedThird(Eve, True)  ::: Option A\nFinishedThird(Rob, True)  ::: Option B\nFinishedThird(Ana, True)  ::: Option C\nFinishedThird(Eli, True)  ::: Option D\nFinishedThird(Mya, True)  ::: Option E",
                "FOL": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedFirst(x) ::: Golfer x finished first.\nFinishedSecond(x) ::: Golfer x finished second.\nFinishedThird(x) ::: Golfer x finished third.\nPremises:\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya) ::: Eli finished below Mya.\nFinishedFirst(Eve) ::: Eve finished first.\nFinishedBelow(Ana, Eli) ::: Ana finished below Eli.\nFinishedSecond(Rob) ::: Rob finished second.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 \u00acFinishedBelow(y, x)) ::: If x finished below y, then y did not finish below x.\n\u2200x (FinishedFirst(x) \u2192 \u2200y \u00acFinishedBelow(x, y)) ::: If x finished first, then x did not finish below any other golfer.\n\u2200x (FinishedSecond(x) \u2192 (\u2200y \u00acFinishedBelow(x, y) \u2228 (\u2203z (FinishedFirst(z) \u2227 FinishedBelow(y, x))) ::: If x finished second, then x did not finish below any other golfer except the first.\n\u2200x (FinishedThird(x) \u2192 (\u2203y \u2203z (FinishedBelow(x, y) \u2227 FinishedBelow(x, z) \u2227 y \u2260 z) \u2227 \u2200w (\u00acFinishedBelow(x, w) \u2228 w = y \u2228 w = z))) ::: If x finished third, then x finished below two golfers and not below the remaining two.\nConclusion:\nFinishedThird(Eve) ::: Option A\nFinishedThird(Rob) ::: Option B\nFinishedThird(Ana) ::: Option C\nFinishedThird(Eli) ::: Option D\nFinishedThird(Mya) ::: Option E",
                "SAT": "# Declarations\nGolfers = EnumSort([Eve, Rob, Ana, Eli, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Eve) == 1 ::: Eve finished first.\npos(Rob) == 2 ::: Rob finished second.\npos(Eli) > pos(Mya) ::: Eli finished below Mya.\npos(Ana) > pos(Eli) ::: Ana finished below Eli.\n# Options\nis_valid(pos(Eve) == 3) ::: A) Eve finished third.\nis_valid(pos(Rob) == 3) ::: B) Rob finished third.\nis_valid(pos(Ana) == 3) ::: C) Ana finished third.\nis_valid(pos(Eli) == 3) ::: D) Eli finished third.\nis_valid(pos(Mya) == 3) ::: E) Mya finished third."
            }
        ]
    },
    {
        "id": "logical_deduction_13",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: apples, mangoes, oranges, plums, and pears. The oranges are more expensive than the mangoes. The plums are the cheapest. The apples are less expensive than the mangoes. The pears are more expensive than the oranges.",
        "question": "Which of the following is true?",
        "options": [
            "A) The apples are the cheapest.",
            "B) The mangoes are the cheapest.",
            "C) The oranges are the cheapest.",
            "D) The plums are the cheapest.",
            "E) The pears are the cheapest."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)     ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(apples,  True)            ::: Apples.\nFruit(mangoes, True)            ::: Mangoes.\nFruit(oranges, True)            ::: Oranges.\nFruit(plums,   True)            ::: Plums.\nFruit(pears,   True)            ::: Pears.\nMoreExpensive(oranges, mangoes, True) ::: The oranges are more expensive than the mangoes.\nCheapest(plums, True)           ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples, True) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges, True) ::: The pears are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($b, $a, False) ::: If $a is more expensive than $b, then $b is not more expensive than $a.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nCheapest($x, True) >>> MoreExpensive($x, $y, False) && MoreExpensive($y, $x, True) ::: The cheapest fruit is less expensive than all others.\nQuery:\nCheapest(apples,  True)  ::: Option A\nCheapest(mangoes, True)  ::: Option B\nCheapest(oranges, True)  ::: Option C\nCheapest(plums,   True)  ::: Option D\nCheapest(pears,   True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(apples) ::: Apples.\nFruit(mangoes) ::: Mangoes.\nFruit(oranges) ::: Oranges.\nFruit(plums) ::: Plums.\nFruit(pears) ::: Pears.\nMoreExpensive(oranges, mangoes) ::: The oranges are more expensive than the mangoes.\nCheapest(plums) ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges) ::: The pears are more expensive than the oranges.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 \u00acMoreExpensive(y, x)) ::: MoreExpensive is asymmetric.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x (Cheapest(x) \u2194 (\u2200y (x \u2260 y \u2192 MoreExpensive(y, x))) ::: The cheapest fruit is less expensive than all others.\nConclusion:\nCheapest(apples) ::: Option A\nCheapest(mangoes) ::: Option B\nCheapest(oranges) ::: Option C\nCheapest(plums) ::: Option D\nCheapest(pears) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Apples, Mangoes, Oranges, Plums, Pears])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Oranges) > price(Mangoes) ::: The oranges are more expensive than the mangoes.\nprice(Plums) == 1 ::: The plums are the cheapest (assign lowest price value).\nprice(Apples) < price(Mangoes) ::: The apples are less expensive than the mangoes.\nprice(Pears) > price(Oranges) ::: The pears are more expensive than the oranges.\nForAll([f:fruits], price(f) >= 1) ::: All prices must be positive.\n# Options\nis_valid(price(Apples) == 1) ::: A) The apples are the cheapest.\nis_valid(price(Mangoes) == 1) ::: B) The mangoes are the cheapest.\nis_valid(price(Oranges) == 1) ::: C) The oranges are the cheapest.\nis_valid(price(Plums) == 1) ::: D) The plums are the cheapest.\nis_valid(price(Pears) == 1) ::: E) The pears are the cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)     ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(apples,  True)            ::: Apples.\nFruit(mangoes, True)            ::: Mangoes.\nFruit(oranges, True)            ::: Oranges.\nFruit(plums,   True)            ::: Plums.\nFruit(pears,   True)            ::: Pears.\nMoreExpensive(oranges, mangoes, True) ::: The oranges are more expensive than the mangoes.\nCheapest(plums, True)           ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples, True) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges, True) ::: The pears are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($b, $a, False) ::: If $a is more expensive than $b, then $b is not more expensive than $a.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nCheapest($x, True) >>> MoreExpensive($x, $y, False) && MoreExpensive($y, $x, True) ::: The cheapest fruit is less expensive than all others.\nQuery:\nCheapest(apples,  True)  ::: Option A\nCheapest(mangoes, True)  ::: Option B\nCheapest(oranges, True)  ::: Option C\nCheapest(plums,   True)  ::: Option D\nCheapest(pears,   True)  ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(apples) ::: Apples.\nFruit(mangoes) ::: Mangoes.\nFruit(oranges) ::: Oranges.\nFruit(plums) ::: Plums.\nFruit(pears) ::: Pears.\nMoreExpensive(oranges, mangoes) ::: The oranges are more expensive than the mangoes.\nCheapest(plums) ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges) ::: The pears are more expensive than the oranges.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 \u00acMoreExpensive(y, x)) ::: MoreExpensive is asymmetric.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x (Cheapest(x) \u2194 (\u2200y (x \u2260 y \u2192 MoreExpensive(y, x))) ::: The cheapest fruit is less expensive than all others.\nConclusion:\nCheapest(apples) ::: Option A\nCheapest(mangoes) ::: Option B\nCheapest(oranges) ::: Option C\nCheapest(plums) ::: Option D\nCheapest(pears) ::: Option E",
                "SAT": "# Declarations\nfruits = EnumSort([Apples, Mangoes, Oranges, Plums, Pears])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Oranges) > price(Mangoes) ::: The oranges are more expensive than the mangoes.\nprice(Plums) == 1 ::: The plums are the cheapest (assign lowest price value).\nprice(Apples) < price(Mangoes) ::: The apples are less expensive than the mangoes.\nprice(Pears) > price(Oranges) ::: The pears are more expensive than the oranges.\nForAll([f:fruits], price(f) >= 1) ::: All prices must be positive.\n# Options\nis_valid(price(Apples) == 1) ::: A) The apples are the cheapest.\nis_valid(price(Mangoes) == 1) ::: B) The mangoes are the cheapest.\nis_valid(price(Oranges) == 1) ::: C) The oranges are the cheapest.\nis_valid(price(Plums) == 1) ::: D) The plums are the cheapest.\nis_valid(price(Pears) == 1) ::: E) The pears are the cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_14",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: mangoes, kiwis, plums, pears, and watermelons. The kiwis are less expensive than the plums. The pears are the third-most expensive. The kiwis are the second-cheapest. The watermelons are the most expensive.",
        "question": "Which of the following is true?",
        "options": [
            "A) The mangoes are the third-most expensive.",
            "B) The kiwis are the third-most expensive.",
            "C) The plums are the third-most expensive.",
            "D) The pears are the third-most expensive.",
            "E) The watermelons are the third-most expensive."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nExpensiveRank($x, $n, bool)      ::: Fruit $x is the $n-th most expensive (1 = most expensive).\nFacts:\nFruit(mangoes, True)             ::: The mangoes.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(plums, True)               ::: The plums.\nFruit(pears, True)               ::: The pears.\nFruit(watermelons, True)         ::: The watermelons.\nCheaper(kiwis, plums, True)      ::: The kiwis are less expensive than the plums.\nExpensiveRank(pears, 3, True)    ::: The pears are the third-most expensive.\nExpensiveRank(kiwis, 4, True)    ::: The kiwis are the second-cheapest (i.e., fourth-most expensive).\nExpensiveRank(watermelons, 1, True) ::: The watermelons are the most expensive.\nRules:\nCheaper($a, $b, True) >>> ExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n > $m ::: If $a is cheaper than $b, then $a's rank is higher (less expensive) than $b's.\nExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n < $m >>> Cheaper($b, $a, True) ::: If $a's rank is lower (more expensive) than $b's, then $b is cheaper than $a.\nQuery:\nExpensiveRank(mangoes, 3, True)  ::: Option A\nExpensiveRank(kiwis, 3, True)    ::: Option B\nExpensiveRank(plums, 3, True)    ::: Option C\nExpensiveRank(pears, 3, True)    ::: Option D\nExpensiveRank(watermelons, 3, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nRank(fruit, pos) ::: fruit has price position pos, where pos \u2208 {one,two,three,four,five}; one = most expensive, five = cheapest.\nCheaper(x, y) ::: x is cheaper (less expensive) than y.\nPremises:\nRank(watermelons, one) ::: Watermelons are the most expensive.\nRank(pears, three) ::: Pears are the third-most expensive.\nRank(kiwis, four) ::: Kiwis are the second-cheapest.\nCheaper(kiwis, plums) ::: Kiwis are cheaper than plums.\n\u2200f \u2200p \u2200q ((Rank(f, p) \u2227 Rank(f, q)) \u2192 (p = q)) ::: One rank per fruit.\n\u2200p \u2200f \u2200g ((Rank(f, p) \u2227 Rank(g, p)) \u2192 (f = g)) ::: One fruit per rank.\nRank(mangoes, one) \u2228 Rank(mangoes, two) \u2228 Rank(mangoes, three) \u2228 Rank(mangoes, four) \u2228 Rank(mangoes, five) ::: Mangoes occupy some rank.\nRank(plums, one) \u2228 Rank(plums, two) \u2228 Rank(plums, three) \u2228 Rank(plums, four) \u2228 Rank(plums, five) ::: Plums occupy some rank.\n\u2200x \u2200y (Cheaper(x, y) \u2194 (Rank(x, p) \u2227 Rank(y, q) \u2227 (p > q))) ::: Cheaper relation defined via ranks.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: \"Cheaper\" is asymmetric.\nConclusion:\nRank(mangoes, three) ::: Option A.\nRank(kiwis, three) ::: Option B.\nRank(plums, three) ::: Option C.\nRank(pears, three) ::: Option D.\nRank(watermelons, three) ::: Option E."
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Mangoes, Kiwis, Plums, Pears, Watermelons])\nranks = IntSort([1, 2, 3, 4, 5])\nrank = Function([fruits] -> [ranks])\n# Constraints\nDistinct([f:fruits], rank(f)) ::: Each fruit has a unique rank\nrank(Kiwis) < rank(Plums) ::: The kiwis are less expensive than the plums.\nrank(Pears) == 3 ::: The pears are the third-most expensive.\nrank(Kiwis) == 4 ::: The kiwis are the second-cheapest (fourth-most expensive).\nrank(Watermelons) == 1 ::: The watermelons are the most expensive.\n# Options\nis_valid(rank(Mangoes) == 3) ::: A) The mangoes are the third-most expensive.\nis_valid(rank(Kiwis) == 3) ::: B) The kiwis are the third-most expensive.\nis_valid(rank(Plums) == 3) ::: C) The plums are the third-most expensive.\nis_valid(rank(Pears) == 3) ::: D) The pears are the third-most expensive.\nis_valid(rank(Watermelons) == 3) ::: E) The watermelons are the third-most expensive."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nExpensiveRank($x, $n, bool)      ::: Fruit $x is the $n-th most expensive (1 = most expensive).\nFacts:\nFruit(mangoes, True)             ::: The mangoes.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(plums, True)               ::: The plums.\nFruit(pears, True)               ::: The pears.\nFruit(watermelons, True)         ::: The watermelons.\nCheaper(kiwis, plums, True)      ::: The kiwis are less expensive than the plums.\nExpensiveRank(pears, 3, True)    ::: The pears are the third-most expensive.\nExpensiveRank(kiwis, 4, True)    ::: The kiwis are the second-cheapest (i.e., fourth-most expensive).\nExpensiveRank(watermelons, 1, True) ::: The watermelons are the most expensive.\nRules:\nCheaper($a, $b, True) >>> ExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n > $m ::: If $a is cheaper than $b, then $a's rank is higher (less expensive) than $b's.\nExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n < $m >>> Cheaper($b, $a, True) ::: If $a's rank is lower (more expensive) than $b's, then $b is cheaper than $a.\nQuery:\nExpensiveRank(mangoes, 3, True)  ::: Option A\nExpensiveRank(kiwis, 3, True)    ::: Option B\nExpensiveRank(plums, 3, True)    ::: Option C\nExpensiveRank(pears, 3, True)    ::: Option D\nExpensiveRank(watermelons, 3, True) ::: Option E",
                "FOL": "Predicates:\nRank(fruit, pos) ::: fruit has price position pos, where pos \u2208 {one,two,three,four,five}; one = most expensive, five = cheapest.\nCheaper(x, y) ::: x is cheaper (less expensive) than y.\nPremises:\nRank(watermelons, one) ::: Watermelons are the most expensive.\nRank(pears, three) ::: Pears are the third-most expensive.\nRank(kiwis, four) ::: Kiwis are the second-cheapest.\nCheaper(kiwis, plums) ::: Kiwis are cheaper than plums.\n\u2200f \u2200p \u2200q ((Rank(f, p) \u2227 Rank(f, q)) \u2192 (p = q)) ::: One rank per fruit.\n\u2200p \u2200f \u2200g ((Rank(f, p) \u2227 Rank(g, p)) \u2192 (f = g)) ::: One fruit per rank.\nRank(mangoes, one) \u2228 Rank(mangoes, two) \u2228 Rank(mangoes, three) \u2228 Rank(mangoes, four) \u2228 Rank(mangoes, five) ::: Mangoes occupy some rank.\nRank(plums, one) \u2228 Rank(plums, two) \u2228 Rank(plums, three) \u2228 Rank(plums, four) \u2228 Rank(plums, five) ::: Plums occupy some rank.\n\u2200x \u2200y (Cheaper(x, y) \u2194 (Rank(x, p) \u2227 Rank(y, q) \u2227 (p > q))) ::: Cheaper relation defined via ranks.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: \"Cheaper\" is asymmetric.\nConclusion:\nRank(mangoes, three) ::: Option A.\nRank(kiwis, three) ::: Option B.\nRank(plums, three) ::: Option C.\nRank(pears, three) ::: Option D.\nRank(watermelons, three) ::: Option E.",
                "SAT": "# Declarations\nfruits = EnumSort([Mangoes, Kiwis, Plums, Pears, Watermelons])\nranks = IntSort([1, 2, 3, 4, 5])\nrank = Function([fruits] -> [ranks])\n# Constraints\nDistinct([f:fruits], rank(f)) ::: Each fruit has a unique rank\nrank(Kiwis) < rank(Plums) ::: The kiwis are less expensive than the plums.\nrank(Pears) == 3 ::: The pears are the third-most expensive.\nrank(Kiwis) == 4 ::: The kiwis are the second-cheapest (fourth-most expensive).\nrank(Watermelons) == 1 ::: The watermelons are the most expensive.\n# Options\nis_valid(rank(Mangoes) == 3) ::: A) The mangoes are the third-most expensive.\nis_valid(rank(Kiwis) == 3) ::: B) The kiwis are the third-most expensive.\nis_valid(rank(Plums) == 3) ::: C) The plums are the third-most expensive.\nis_valid(rank(Pears) == 3) ::: D) The pears are the third-most expensive.\nis_valid(rank(Watermelons) == 3) ::: E) The watermelons are the third-most expensive."
            }
        ]
    },
    {
        "id": "logical_deduction_15",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, an orange book, a gray book, a yellow book, and a purple book. The green book is the rightmost. The gray book is to the right of the orange book. The purple book is to the left of the yellow book. The purple book is to the right of the gray book.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the second from the left.",
            "B) The orange book is the second from the left.",
            "C) The gray book is the second from the left.",
            "D) The yellow book is the second from the left.",
            "E) The purple book is the second from the left."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(orange, True)              ::: The orange book.\nBook(gray,   True)              ::: The gray book.\nBook(yellow, True)              ::: The yellow book.\nBook(purple, True)              ::: The purple book.\nRightMost(green, True)          ::: The green book is the rightmost.\nRightOf(gray, orange, True)     ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow, True)    ::: The purple book is to the left of the yellow book.\nRightOf(purple, gray, True)     ::: The purple book is to the right of the gray book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) >>> SecondFromLeft($b, True) ::: The second book in the sequence is second from the left.\nQuery:\nSecondFromLeft(green,  True)  ::: Option A\nSecondFromLeft(orange, True)  ::: Option B\nSecondFromLeft(gray,   True)  ::: Option C\nSecondFromLeft(yellow, True)  ::: Option D\nSecondFromLeft(purple, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(orange) ::: The orange book.\nBook(gray) ::: The gray book.\nBook(yellow) ::: The yellow book.\nBook(purple) ::: The purple book.\nRightMost(green) ::: The green book is the rightmost.\nLeftOf(orange, gray) ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow) ::: The purple book is to the left of the yellow book.\nLeftOf(gray, purple) ::: The purple book is to the right of the gray book.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x (RightMost(x) \u2194 (Book(x) \u2227 \u00ac\u2203y LeftOf(x, y))) ::: RightMost definition.\n\u2200x (SecondFromLeft(x) \u2194 (Book(x) \u2227 \u2203y (LeftOf(y, x) \u2227 \u00ac\u2203z LeftOf(z, y)))) ::: SecondFromLeft definition.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(orange) ::: Option B\nSecondFromLeft(gray) ::: Option C\nSecondFromLeft(yellow) ::: Option D\nSecondFromLeft(purple) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Green, Orange, Gray, Yellow, Purple])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Green) == 5 ::: The green book is the rightmost.\npos(Gray) > pos(Orange) ::: The gray book is to the right of the orange book.\npos(Purple) < pos(Yellow) ::: The purple book is to the left of the yellow book.\npos(Purple) > pos(Gray) ::: The purple book is to the right of the gray book.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Orange) == 2) ::: B) The orange book is the second from the left.\nis_valid(pos(Gray) == 2) ::: C) The gray book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: D) The yellow book is the second from the left.\nis_valid(pos(Purple) == 2) ::: E) The purple book is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(orange, True)              ::: The orange book.\nBook(gray,   True)              ::: The gray book.\nBook(yellow, True)              ::: The yellow book.\nBook(purple, True)              ::: The purple book.\nRightMost(green, True)          ::: The green book is the rightmost.\nRightOf(gray, orange, True)     ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow, True)    ::: The purple book is to the left of the yellow book.\nRightOf(purple, gray, True)     ::: The purple book is to the right of the gray book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) >>> SecondFromLeft($b, True) ::: The second book in the sequence is second from the left.\nQuery:\nSecondFromLeft(green,  True)  ::: Option A\nSecondFromLeft(orange, True)  ::: Option B\nSecondFromLeft(gray,   True)  ::: Option C\nSecondFromLeft(yellow, True)  ::: Option D\nSecondFromLeft(purple, True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(orange) ::: The orange book.\nBook(gray) ::: The gray book.\nBook(yellow) ::: The yellow book.\nBook(purple) ::: The purple book.\nRightMost(green) ::: The green book is the rightmost.\nLeftOf(orange, gray) ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow) ::: The purple book is to the left of the yellow book.\nLeftOf(gray, purple) ::: The purple book is to the right of the gray book.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x (RightMost(x) \u2194 (Book(x) \u2227 \u00ac\u2203y LeftOf(x, y))) ::: RightMost definition.\n\u2200x (SecondFromLeft(x) \u2194 (Book(x) \u2227 \u2203y (LeftOf(y, x) \u2227 \u00ac\u2203z LeftOf(z, y)))) ::: SecondFromLeft definition.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(orange) ::: Option B\nSecondFromLeft(gray) ::: Option C\nSecondFromLeft(yellow) ::: Option D\nSecondFromLeft(purple) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Green, Orange, Gray, Yellow, Purple])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Green) == 5 ::: The green book is the rightmost.\npos(Gray) > pos(Orange) ::: The gray book is to the right of the orange book.\npos(Purple) < pos(Yellow) ::: The purple book is to the left of the yellow book.\npos(Purple) > pos(Gray) ::: The purple book is to the right of the gray book.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Orange) == 2) ::: B) The orange book is the second from the left.\nis_valid(pos(Gray) == 2) ::: C) The gray book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: D) The yellow book is the second from the left.\nis_valid(pos(Purple) == 2) ::: E) The purple book is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_16",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, oranges, loquats, plums, and kiwis. The plums are less expensive than the kiwis. The plums are more expensive than the watermelons. The loquats are more expensive than the kiwis. The oranges are the most expensive.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the second-cheapest.",
            "B) The oranges are the second-cheapest.",
            "C) The loquats are the second-cheapest.",
            "D) The plums are the second-cheapest.",
            "E) The kiwis are the second-cheapest."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is strictly cheaper than fruit $y.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is strictly more expensive than fruit $y.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second cheapest.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(oranges, True)             ::: The oranges.\nFruit(loquats, True)             ::: The loquats.\nFruit(plums, True)               ::: The plums.\nFruit(kiwis, True)               ::: The kiwis.\nCheaper(plums, kiwis, True)      ::: The plums are less expensive than the kiwis.\nMoreExpensive(plums, watermelons, True) ::: The plums are more expensive than the watermelons.\nMoreExpensive(loquats, kiwis, True) ::: The loquats are more expensive than the kiwis.\nMostExpensive(oranges, True)     ::: The oranges are the most expensive.\nRules:\nCheaper($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is cheaper than $b, then $b is more expensive than $a.\nMoreExpensive($a, $b, True) >>> Cheaper($b, $a, True) ::: If $a is more expensive than $b, then $b is cheaper than $a.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nMostExpensive($m, True) >>> MoreExpensive($m, watermelons, True) && MoreExpensive($m, oranges, True) && MoreExpensive($m, loquats, True) && MoreExpensive($m, plums, True) && MoreExpensive($m, kiwis, True) ::: The most expensive fruit is more expensive than all others.\nCheaper(watermelons, $s, True) && Cheaper($s, plums, True) && Cheaper($s, kiwis, True) && Cheaper($s, loquats, True) >>> SecondCheapest($s, True) ::: The fruit that is cheaper than plums, kiwis, and loquats but more expensive than watermelons is the second cheapest.\nQuery:\nSecondCheapest(watermelons, True)  ::: Option A\nSecondCheapest(oranges, True)      ::: Option B\nSecondCheapest(loquats, True)      ::: Option C\nSecondCheapest(plums, True)        ::: Option D\nSecondCheapest(kiwis, True)        ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nMostExpensive(x) ::: x is the most expensive.\nSecondCheapest(x) ::: x is the second cheapest.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(oranges) ::: The oranges.\nFruit(loquats) ::: The loquats.\nFruit(plums) ::: The plums.\nFruit(kiwis) ::: The kiwis.\nCheaper(plums, kiwis) ::: The plums are cheaper than the kiwis.\nCheaper(watermelons, plums) ::: The watermelons are cheaper than the plums.\nCheaper(kiwis, loquats) ::: The kiwis are cheaper than the loquats.\nMostExpensive(oranges) ::: The oranges are the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (MostExpensive(x) \u2192 \u2200y (Fruit(y) \u2227 y \u2260 x \u2192 Cheaper(y, x))) ::: The most expensive is more expensive than all others.\n\u2200x (SecondCheapest(x) \u2194 (Cheaper(watermelons, x) \u2227 Cheaper(x, plums) \u2227 Cheaper(x, kiwis) \u2227 Cheaper(x, loquats))) ::: The second cheapest is more expensive than watermelons but cheaper than plums, kiwis, and loquats.\nConclusion:\nSecondCheapest(watermelons) ::: Option A\nSecondCheapest(oranges) ::: Option B\nSecondCheapest(loquats) ::: Option C\nSecondCheapest(plums) ::: Option D\nSecondCheapest(kiwis) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nFruit = EnumSort([Watermelons, Oranges, Loquats, Plums, Kiwis])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Plums) < price(Kiwis) ::: The plums are less expensive than the kiwis.\nprice(Plums) > price(Watermelons) ::: The plums are more expensive than the watermelons.\nprice(Loquats) > price(Kiwis) ::: The loquats are more expensive than the kiwis.\nprice(Oranges) > price(Watermelons) ::: The oranges are the most expensive.\nprice(Oranges) > price(Loquats) ::: The oranges are the most expensive.\nprice(Oranges) > price(Plums) ::: The oranges are the most expensive.\nprice(Oranges) > price(Kiwis) ::: The oranges are the most expensive.\nForAll([f:Fruit], Implies(f != Watermelons, price(f) > price(Watermelons))) ::: Watermelons are the cheapest.\nExists([f:Fruit], And(price(f) > price(Watermelons), price(f) < price(Plums), price(f) < price(Kiwis), price(f) < price(Loquats))) ::: There exists a second cheapest fruit.\n# Options\nis_valid(price(Watermelons) == 2) ::: A) The watermelons are the second-cheapest.\nis_valid(price(Oranges) == 2) ::: B) The oranges are the second-cheapest.\nis_valid(price(Loquats) == 2) ::: C) The loquats are the second-cheapest.\nis_valid(price(Plums) == 2) ::: D) The plums are the second-cheapest.\nis_valid(price(Kiwis) == 2) ::: E) The kiwis are the second-cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is strictly cheaper than fruit $y.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is strictly more expensive than fruit $y.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second cheapest.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(oranges, True)             ::: The oranges.\nFruit(loquats, True)             ::: The loquats.\nFruit(plums, True)               ::: The plums.\nFruit(kiwis, True)               ::: The kiwis.\nCheaper(plums, kiwis, True)      ::: The plums are less expensive than the kiwis.\nMoreExpensive(plums, watermelons, True) ::: The plums are more expensive than the watermelons.\nMoreExpensive(loquats, kiwis, True) ::: The loquats are more expensive than the kiwis.\nMostExpensive(oranges, True)     ::: The oranges are the most expensive.\nRules:\nCheaper($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is cheaper than $b, then $b is more expensive than $a.\nMoreExpensive($a, $b, True) >>> Cheaper($b, $a, True) ::: If $a is more expensive than $b, then $b is cheaper than $a.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nMostExpensive($m, True) >>> MoreExpensive($m, watermelons, True) && MoreExpensive($m, oranges, True) && MoreExpensive($m, loquats, True) && MoreExpensive($m, plums, True) && MoreExpensive($m, kiwis, True) ::: The most expensive fruit is more expensive than all others.\nCheaper(watermelons, $s, True) && Cheaper($s, plums, True) && Cheaper($s, kiwis, True) && Cheaper($s, loquats, True) >>> SecondCheapest($s, True) ::: The fruit that is cheaper than plums, kiwis, and loquats but more expensive than watermelons is the second cheapest.\nQuery:\nSecondCheapest(watermelons, True)  ::: Option A\nSecondCheapest(oranges, True)      ::: Option B\nSecondCheapest(loquats, True)      ::: Option C\nSecondCheapest(plums, True)        ::: Option D\nSecondCheapest(kiwis, True)        ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nMostExpensive(x) ::: x is the most expensive.\nSecondCheapest(x) ::: x is the second cheapest.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(oranges) ::: The oranges.\nFruit(loquats) ::: The loquats.\nFruit(plums) ::: The plums.\nFruit(kiwis) ::: The kiwis.\nCheaper(plums, kiwis) ::: The plums are cheaper than the kiwis.\nCheaper(watermelons, plums) ::: The watermelons are cheaper than the plums.\nCheaper(kiwis, loquats) ::: The kiwis are cheaper than the loquats.\nMostExpensive(oranges) ::: The oranges are the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (MostExpensive(x) \u2192 \u2200y (Fruit(y) \u2227 y \u2260 x \u2192 Cheaper(y, x))) ::: The most expensive is more expensive than all others.\n\u2200x (SecondCheapest(x) \u2194 (Cheaper(watermelons, x) \u2227 Cheaper(x, plums) \u2227 Cheaper(x, kiwis) \u2227 Cheaper(x, loquats))) ::: The second cheapest is more expensive than watermelons but cheaper than plums, kiwis, and loquats.\nConclusion:\nSecondCheapest(watermelons) ::: Option A\nSecondCheapest(oranges) ::: Option B\nSecondCheapest(loquats) ::: Option C\nSecondCheapest(plums) ::: Option D\nSecondCheapest(kiwis) ::: Option E",
                "SAT": "# Declarations\nFruit = EnumSort([Watermelons, Oranges, Loquats, Plums, Kiwis])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Plums) < price(Kiwis) ::: The plums are less expensive than the kiwis.\nprice(Plums) > price(Watermelons) ::: The plums are more expensive than the watermelons.\nprice(Loquats) > price(Kiwis) ::: The loquats are more expensive than the kiwis.\nprice(Oranges) > price(Watermelons) ::: The oranges are the most expensive.\nprice(Oranges) > price(Loquats) ::: The oranges are the most expensive.\nprice(Oranges) > price(Plums) ::: The oranges are the most expensive.\nprice(Oranges) > price(Kiwis) ::: The oranges are the most expensive.\nForAll([f:Fruit], Implies(f != Watermelons, price(f) > price(Watermelons))) ::: Watermelons are the cheapest.\nExists([f:Fruit], And(price(f) > price(Watermelons), price(f) < price(Plums), price(f) < price(Kiwis), price(f) < price(Loquats))) ::: There exists a second cheapest fruit.\n# Options\nis_valid(price(Watermelons) == 2) ::: A) The watermelons are the second-cheapest.\nis_valid(price(Oranges) == 2) ::: B) The oranges are the second-cheapest.\nis_valid(price(Loquats) == 2) ::: C) The loquats are the second-cheapest.\nis_valid(price(Plums) == 2) ::: D) The plums are the second-cheapest.\nis_valid(price(Kiwis) == 2) ::: E) The kiwis are the second-cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_17",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, apples, mangoes, pears, and cantaloupes. The watermelons are more expensive than the cantaloupes. The mangoes are less expensive than the pears. The apples are the second-cheapest. The watermelons are less expensive than the mangoes.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the cheapest.",
            "B) The apples are the cheapest.",
            "C) The mangoes are the cheapest.",
            "D) The pears are the cheapest.",
            "E) The cantaloupes are the cheapest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nLessExpensive($x, $y, bool)      ::: Fruit $x is less expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(apples, True)              ::: The apples.\nFruit(mangoes, True)             ::: The mangoes.\nFruit(pears, True)               ::: The pears.\nFruit(cantaloupes, True)         ::: The cantaloupes.\nMoreExpensive(watermelons, cantaloupes, True) ::: The watermelons are more expensive than the cantaloupes.\nLessExpensive(mangoes, pears, True)           ::: The mangoes are less expensive than the pears.\nLessExpensive(apples, $y, True) && MoreExpensive(apples, $z, True) ::: The apples are the second-cheapest.\nLessExpensive(watermelons, mangoes, True)     ::: The watermelons are less expensive than the mangoes.\nRules:\nMoreExpensive($a, $b, True) >>> LessExpensive($b, $a, True) ::: If $a is more expensive than $b, then $b is less expensive than $a.\nLessExpensive($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is less expensive than $b, then $b is more expensive than $a.\nLessExpensive($a, $b, True) && LessExpensive($b, $c, True) >>> LessExpensive($a, $c, True) ::: LessExpensive is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nLessExpensive($a, watermelons, True) && LessExpensive($a, apples, True) && LessExpensive($a, mangoes, True) && LessExpensive($a, pears, True) >>> Cheapest($a, True) ::: A fruit that is less expensive than all the other four is the cheapest.\nQuery:\nCheapest(watermelons, True)  ::: Option A\nCheapest(apples, True)       ::: Option B\nCheapest(mangoes, True)      ::: Option C\nCheapest(pears, True)        ::: Option D\nCheapest(cantaloupes, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nLessExpensive(x, y) ::: Fruit x is less expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(apples) ::: The apples.\nFruit(mangoes) ::: The mangoes.\nFruit(pears) ::: The pears.\nFruit(cantaloupes) ::: The cantaloupes.\nMoreExpensive(watermelons, cantaloupes) ::: The watermelons are more expensive than the cantaloupes.\nLessExpensive(mangoes, pears) ::: The mangoes are less expensive than the pears.\n\u2203y \u2203z (LessExpensive(apples, y) \u2227 MoreExpensive(apples, z)) ::: The apples are the second-cheapest.\nLessExpensive(watermelons, mangoes) ::: The watermelons are less expensive than the mangoes.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 LessExpensive(y, x)) ::: If x is more expensive than y, then y is less expensive than x.\n\u2200x \u2200y (LessExpensive(x, y) \u2192 MoreExpensive(y, x)) ::: If x is less expensive than y, then y is more expensive than x.\n\u2200x \u2200y \u2200z (LessExpensive(x, y) \u2227 LessExpensive(y, z) \u2192 LessExpensive(x, z)) ::: LessExpensive is transitive.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x (LessExpensive(x, watermelons) \u2227 LessExpensive(x, apples) \u2227 LessExpensive(x, mangoes) \u2227 LessExpensive(x, pears) \u2192 Cheapest(x)) ::: A fruit that is less expensive than all the other four is the cheapest.\nConclusion:\nCheapest(watermelons) ::: Option A\nCheapest(apples) ::: Option B\nCheapest(mangoes) ::: Option C\nCheapest(pears) ::: Option D\nCheapest(cantaloupes) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nFruit = EnumSort([Watermelons, Apples, Mangoes, Pears, Cantaloupes])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Watermelons) > price(Cantaloupes) ::: The watermelons are more expensive than the cantaloupes.\nprice(Mangoes) < price(Pears) ::: The mangoes are less expensive than the pears.\nExists([y:Fruit, z:Fruit], And(price(Apples) > price(z), price(Apples) < price(y))) ::: The apples are the second-cheapest.\nprice(Watermelons) < price(Mangoes) ::: The watermelons are less expensive than the mangoes.\nForAll([x:Fruit, y:Fruit], Implies(price(x) > price(y), price(y) < price(x))) ::: More expensive implies less expensive.\nForAll([x:Fruit, y:Fruit, z:Fruit], Implies(And(price(x) < price(y), price(y) < price(z)), price(x) < price(z))) ::: Transitivity of less expensive.\nForAll([x:Fruit], Implies(And(price(x) < price(Watermelons), price(x) < price(Apples), price(x) < price(Mangoes), price(x) < price(Pears)), price(x) == price(Cantaloupes))) ::: A fruit cheaper than all others is the cheapest.\n# Options\nis_valid(price(Cantaloupes) < price(Watermelons) And price(Cantaloupes) < price(Apples) And price(Cantaloupes) < price(Mangoes) And price(Cantaloupes) < price(Pears)) ::: E) The cantaloupes are the cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nLessExpensive($x, $y, bool)      ::: Fruit $x is less expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(apples, True)              ::: The apples.\nFruit(mangoes, True)             ::: The mangoes.\nFruit(pears, True)               ::: The pears.\nFruit(cantaloupes, True)         ::: The cantaloupes.\nMoreExpensive(watermelons, cantaloupes, True) ::: The watermelons are more expensive than the cantaloupes.\nLessExpensive(mangoes, pears, True)           ::: The mangoes are less expensive than the pears.\nLessExpensive(apples, $y, True) && MoreExpensive(apples, $z, True) ::: The apples are the second-cheapest.\nLessExpensive(watermelons, mangoes, True)     ::: The watermelons are less expensive than the mangoes.\nRules:\nMoreExpensive($a, $b, True) >>> LessExpensive($b, $a, True) ::: If $a is more expensive than $b, then $b is less expensive than $a.\nLessExpensive($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is less expensive than $b, then $b is more expensive than $a.\nLessExpensive($a, $b, True) && LessExpensive($b, $c, True) >>> LessExpensive($a, $c, True) ::: LessExpensive is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nLessExpensive($a, watermelons, True) && LessExpensive($a, apples, True) && LessExpensive($a, mangoes, True) && LessExpensive($a, pears, True) >>> Cheapest($a, True) ::: A fruit that is less expensive than all the other four is the cheapest.\nQuery:\nCheapest(watermelons, True)  ::: Option A\nCheapest(apples, True)       ::: Option B\nCheapest(mangoes, True)      ::: Option C\nCheapest(pears, True)        ::: Option D\nCheapest(cantaloupes, True)  ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nLessExpensive(x, y) ::: Fruit x is less expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(apples) ::: The apples.\nFruit(mangoes) ::: The mangoes.\nFruit(pears) ::: The pears.\nFruit(cantaloupes) ::: The cantaloupes.\nMoreExpensive(watermelons, cantaloupes) ::: The watermelons are more expensive than the cantaloupes.\nLessExpensive(mangoes, pears) ::: The mangoes are less expensive than the pears.\n\u2203y \u2203z (LessExpensive(apples, y) \u2227 MoreExpensive(apples, z)) ::: The apples are the second-cheapest.\nLessExpensive(watermelons, mangoes) ::: The watermelons are less expensive than the mangoes.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 LessExpensive(y, x)) ::: If x is more expensive than y, then y is less expensive than x.\n\u2200x \u2200y (LessExpensive(x, y) \u2192 MoreExpensive(y, x)) ::: If x is less expensive than y, then y is more expensive than x.\n\u2200x \u2200y \u2200z (LessExpensive(x, y) \u2227 LessExpensive(y, z) \u2192 LessExpensive(x, z)) ::: LessExpensive is transitive.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x (LessExpensive(x, watermelons) \u2227 LessExpensive(x, apples) \u2227 LessExpensive(x, mangoes) \u2227 LessExpensive(x, pears) \u2192 Cheapest(x)) ::: A fruit that is less expensive than all the other four is the cheapest.\nConclusion:\nCheapest(watermelons) ::: Option A\nCheapest(apples) ::: Option B\nCheapest(mangoes) ::: Option C\nCheapest(pears) ::: Option D\nCheapest(cantaloupes) ::: Option E",
                "SAT": "# Declarations\nFruit = EnumSort([Watermelons, Apples, Mangoes, Pears, Cantaloupes])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Watermelons) > price(Cantaloupes) ::: The watermelons are more expensive than the cantaloupes.\nprice(Mangoes) < price(Pears) ::: The mangoes are less expensive than the pears.\nExists([y:Fruit, z:Fruit], And(price(Apples) > price(z), price(Apples) < price(y))) ::: The apples are the second-cheapest.\nprice(Watermelons) < price(Mangoes) ::: The watermelons are less expensive than the mangoes.\nForAll([x:Fruit, y:Fruit], Implies(price(x) > price(y), price(y) < price(x))) ::: More expensive implies less expensive.\nForAll([x:Fruit, y:Fruit, z:Fruit], Implies(And(price(x) < price(y), price(y) < price(z)), price(x) < price(z))) ::: Transitivity of less expensive.\nForAll([x:Fruit], Implies(And(price(x) < price(Watermelons), price(x) < price(Apples), price(x) < price(Mangoes), price(x) < price(Pears)), price(x) == price(Cantaloupes))) ::: A fruit cheaper than all others is the cheapest.\n# Options\nis_valid(price(Cantaloupes) < price(Watermelons) And price(Cantaloupes) < price(Apples) And price(Cantaloupes) < price(Mangoes) And price(Cantaloupes) < price(Pears)) ::: E) The cantaloupes are the cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_18",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a hawk, a raven, a robin, a hummingbird, and a crow. The robin is the leftmost. The raven is the second from the left. The hawk is the second from the right. The crow is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The hawk is the second from the right.",
            "B) The raven is the second from the right.",
            "C) The robin is the second from the right.",
            "D) The hummingbird is the second from the right.",
            "E) The crow is the second from the right."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nFacts:\nBird(hawk, True)                ::: The hawk.\nBird(raven, True)               ::: The raven.\nBird(robin, True)               ::: The robin.\nBird(hummingbird, True)         ::: The hummingbird.\nBird(crow, True)                ::: The crow.\nLeftMost(robin, True)           ::: The robin is the leftmost.\nSecondFromLeft(raven, True)     ::: The raven is the second from the left.\nSecondFromRight(hawk, True)     ::: The hawk is the second from the right.\nThirdFromLeft(crow, True)       ::: The crow is the third from the left.\nRules:\nSecondFromRight($a, True) >>> SecondFromRight($a, True) ::: If $a is second from the right, then $a is second from the right (tautology to maintain consistency).\nQuery:\nSecondFromRight(hawk, True)     ::: Option A\nSecondFromRight(raven, True)    ::: Option B\nSecondFromRight(robin, True)    ::: Option C\nSecondFromRight(hummingbird, True) ::: Option D\nSecondFromRight(crow, True)     ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nPremises:\nBird(hawk) ::: The hawk.\nBird(raven) ::: The raven.\nBird(robin) ::: The robin.\nBird(hummingbird) ::: The hummingbird.\nBird(crow) ::: The crow.\nLeftMost(robin) ::: The robin is the leftmost.\nSecondFromLeft(raven) ::: The raven is the second from the left.\nSecondFromRight(hawk) ::: The hawk is the second from the right.\nThirdFromLeft(crow) ::: The crow is the third from the left.\n\u2200x \u2200y ((LeftMost(x) \u2227 LeftMost(y)) \u2192 (x = y)) ::: Only one leftmost bird.\n\u2200x \u2200y ((SecondFromLeft(x) \u2227 SecondFromLeft(y)) \u2192 (x = y)) ::: Only one second from left.\n\u2200x \u2200y ((SecondFromRight(x) \u2227 SecondFromRight(y)) \u2192 (x = y)) ::: Only one second from right.\n\u2200x \u2200y ((ThirdFromLeft(x) \u2227 ThirdFromLeft(y)) \u2192 (x = y)) ::: Only one third from left.\n\u2200x (Bird(x) \u2192 (LeftMost(x) \u2228 SecondFromLeft(x) \u2228 ThirdFromLeft(x) \u2228 SecondFromRight(x) \u2228 (x = hummingbird))) ::: Each bird has a unique position.\nConclusion:\nSecondFromRight(hawk) ::: Option A\nSecondFromRight(raven) ::: Option B\nSecondFromRight(robin) ::: Option C\nSecondFromRight(hummingbird) ::: Option D\nSecondFromRight(crow) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Hawk, Raven, Robin, Hummingbird, Crow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) == 1 ::: The robin is the leftmost.\npos(Raven) == 2 ::: The raven is the second from the left.\npos(Hawk) == 4 ::: The hawk is the second from the right.\npos(Crow) == 3 ::: The crow is the third from the left.\n# Options\nis_valid(pos(Hawk) == 4) ::: A) The hawk is the second from the right.\nis_valid(pos(Raven) == 4) ::: B) The raven is the second from the right.\nis_valid(pos(Robin) == 4) ::: C) The robin is the second from the right.\nis_valid(pos(Hummingbird) == 4) ::: D) The hummingbird is the second from the right.\nis_valid(pos(Crow) == 4) ::: E) The crow is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nFacts:\nBird(hawk, True)                ::: The hawk.\nBird(raven, True)               ::: The raven.\nBird(robin, True)               ::: The robin.\nBird(hummingbird, True)         ::: The hummingbird.\nBird(crow, True)                ::: The crow.\nLeftMost(robin, True)           ::: The robin is the leftmost.\nSecondFromLeft(raven, True)     ::: The raven is the second from the left.\nSecondFromRight(hawk, True)     ::: The hawk is the second from the right.\nThirdFromLeft(crow, True)       ::: The crow is the third from the left.\nRules:\nSecondFromRight($a, True) >>> SecondFromRight($a, True) ::: If $a is second from the right, then $a is second from the right (tautology to maintain consistency).\nQuery:\nSecondFromRight(hawk, True)     ::: Option A\nSecondFromRight(raven, True)    ::: Option B\nSecondFromRight(robin, True)    ::: Option C\nSecondFromRight(hummingbird, True) ::: Option D\nSecondFromRight(crow, True)     ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nPremises:\nBird(hawk) ::: The hawk.\nBird(raven) ::: The raven.\nBird(robin) ::: The robin.\nBird(hummingbird) ::: The hummingbird.\nBird(crow) ::: The crow.\nLeftMost(robin) ::: The robin is the leftmost.\nSecondFromLeft(raven) ::: The raven is the second from the left.\nSecondFromRight(hawk) ::: The hawk is the second from the right.\nThirdFromLeft(crow) ::: The crow is the third from the left.\n\u2200x \u2200y ((LeftMost(x) \u2227 LeftMost(y)) \u2192 (x = y)) ::: Only one leftmost bird.\n\u2200x \u2200y ((SecondFromLeft(x) \u2227 SecondFromLeft(y)) \u2192 (x = y)) ::: Only one second from left.\n\u2200x \u2200y ((SecondFromRight(x) \u2227 SecondFromRight(y)) \u2192 (x = y)) ::: Only one second from right.\n\u2200x \u2200y ((ThirdFromLeft(x) \u2227 ThirdFromLeft(y)) \u2192 (x = y)) ::: Only one third from left.\n\u2200x (Bird(x) \u2192 (LeftMost(x) \u2228 SecondFromLeft(x) \u2228 ThirdFromLeft(x) \u2228 SecondFromRight(x) \u2228 (x = hummingbird))) ::: Each bird has a unique position.\nConclusion:\nSecondFromRight(hawk) ::: Option A\nSecondFromRight(raven) ::: Option B\nSecondFromRight(robin) ::: Option C\nSecondFromRight(hummingbird) ::: Option D\nSecondFromRight(crow) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Hawk, Raven, Robin, Hummingbird, Crow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) == 1 ::: The robin is the leftmost.\npos(Raven) == 2 ::: The raven is the second from the left.\npos(Hawk) == 4 ::: The hawk is the second from the right.\npos(Crow) == 3 ::: The crow is the third from the left.\n# Options\nis_valid(pos(Hawk) == 4) ::: A) The hawk is the second from the right.\nis_valid(pos(Raven) == 4) ::: B) The raven is the second from the right.\nis_valid(pos(Robin) == 4) ::: C) The robin is the second from the right.\nis_valid(pos(Hummingbird) == 4) ::: D) The hummingbird is the second from the right.\nis_valid(pos(Crow) == 4) ::: E) The crow is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_19",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a tractor, a station wagon, a bus, a motorcyle, and a minivan. The minivan is older than the motorcyle. The bus is the newest. The tractor is the third-newest. The station wagon is the second-oldest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The tractor is the newest.",
            "B) The station wagon is the newest.",
            "C) The bus is the newest.",
            "D) The motorcyle is the newest.",
            "E) The minivan is the newest."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nThirdNewest($x, bool)              ::: Vehicle $x is the third-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(tractor, True)             ::: The tractor.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(bus, True)                 ::: The bus.\nVehicle(motorcycle, True)          ::: The motorcycle.\nVehicle(minivan, True)             ::: The minivan.\nOlder(minivan, motorcycle, True)   ::: The minivan is older than the motorcycle.\nNewest(bus, True)                  ::: The bus is the newest.\nThirdNewest(tractor, True)         ::: The tractor is the third-newest.\nSecondOldest(station_wagon, True)  ::: The station wagon is the second-oldest.\nRules:\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nThirdNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Older($a, $d, True) && Older($a, $e, True) ::: The third-newest is newer than two and older than two.\nSecondOldest($a, True) >>> Older($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is older than one and newer than three.\nQuery:\nNewest(tractor, True)       ::: Option A\nNewest(station_wagon, True) ::: Option B\nNewest(bus, True)           ::: Option C\nNewest(motorcycle, True)    ::: Option D\nNewest(minivan, True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nOldest(x) ::: Vehicle x is the oldest.\nThirdNewest(x) ::: Vehicle x is the third-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(tractor) ::: The tractor.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(motorcycle) ::: The motorcycle.\nVehicle(minivan) ::: The minivan.\nOlder(minivan, motorcycle) ::: The minivan is older than the motorcycle.\nNewest(bus) ::: The bus is the newest.\nThirdNewest(tractor) ::: The tractor is the third-newest.\nSecondOldest(station_wagon) ::: The station wagon is the second-oldest.\n\u2200x \u2200y (Older(x, y) \u2194 Newer(y, x)) ::: Older and newer are inverses.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (ThirdNewest(x) \u2192 (\u2203y \u2203z (Newer(x, y) \u2227 Newer(x, z) \u2227 Older(x, y) \u2227 Older(x, z) \u2227 y \u2260 z))) ::: Third-newest is newer than two and older than two.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (Older(x, y) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z)))) ::: Second-oldest is older than one and newer than three.\nConclusion:\nNewest(tractor) ::: Option A\nNewest(station_wagon) ::: Option B\nNewest(bus) ::: Option C\nNewest(motorcycle) ::: Option D\nNewest(minivan) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Tractor, StationWagon, Bus, Motorcycle, Minivan])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nThirdNewest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Newer(x, y) == Not(Newer(y, x))) ::: Newer is asymmetric\nNewest(Bus) ::: The bus is the newest.\nThirdNewest(Tractor) ::: The tractor is the third-newest.\nSecondOldest(StationWagon) ::: The station wagon is the second-oldest.\nNewer(Minivan, Motorcycle) ::: The minivan is older than the motorcycle (expressed as newer relation)\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: Newest is newer than all others\nForAll([x:Vehicle], Implies(ThirdNewest(x), Count([y:Vehicle], Newer(x, y)) == 2)) ::: Third-newest is newer than exactly two\nForAll([x:Vehicle], Implies(SecondOldest(x), Count([y:Vehicle], Newer(y, x)) == 1)) ::: Second-oldest is older than exactly one\n# Options\nis_valid(Newest(Tractor)) ::: A) The tractor is the newest.\nis_valid(Newest(StationWagon)) ::: B) The station wagon is the newest.\nis_valid(Newest(Bus)) ::: C) The bus is the newest.\nis_valid(Newest(Motorcycle)) ::: D) The motorcycle is the newest.\nis_valid(Newest(Minivan)) ::: E) The minivan is the newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nThirdNewest($x, bool)              ::: Vehicle $x is the third-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(tractor, True)             ::: The tractor.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(bus, True)                 ::: The bus.\nVehicle(motorcycle, True)          ::: The motorcycle.\nVehicle(minivan, True)             ::: The minivan.\nOlder(minivan, motorcycle, True)   ::: The minivan is older than the motorcycle.\nNewest(bus, True)                  ::: The bus is the newest.\nThirdNewest(tractor, True)         ::: The tractor is the third-newest.\nSecondOldest(station_wagon, True)  ::: The station wagon is the second-oldest.\nRules:\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nThirdNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Older($a, $d, True) && Older($a, $e, True) ::: The third-newest is newer than two and older than two.\nSecondOldest($a, True) >>> Older($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is older than one and newer than three.\nQuery:\nNewest(tractor, True)       ::: Option A\nNewest(station_wagon, True) ::: Option B\nNewest(bus, True)           ::: Option C\nNewest(motorcycle, True)    ::: Option D\nNewest(minivan, True)       ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nOldest(x) ::: Vehicle x is the oldest.\nThirdNewest(x) ::: Vehicle x is the third-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(tractor) ::: The tractor.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(motorcycle) ::: The motorcycle.\nVehicle(minivan) ::: The minivan.\nOlder(minivan, motorcycle) ::: The minivan is older than the motorcycle.\nNewest(bus) ::: The bus is the newest.\nThirdNewest(tractor) ::: The tractor is the third-newest.\nSecondOldest(station_wagon) ::: The station wagon is the second-oldest.\n\u2200x \u2200y (Older(x, y) \u2194 Newer(y, x)) ::: Older and newer are inverses.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (ThirdNewest(x) \u2192 (\u2203y \u2203z (Newer(x, y) \u2227 Newer(x, z) \u2227 Older(x, y) \u2227 Older(x, z) \u2227 y \u2260 z))) ::: Third-newest is newer than two and older than two.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (Older(x, y) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z)))) ::: Second-oldest is older than one and newer than three.\nConclusion:\nNewest(tractor) ::: Option A\nNewest(station_wagon) ::: Option B\nNewest(bus) ::: Option C\nNewest(motorcycle) ::: Option D\nNewest(minivan) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Tractor, StationWagon, Bus, Motorcycle, Minivan])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nThirdNewest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Newer(x, y) == Not(Newer(y, x))) ::: Newer is asymmetric\nNewest(Bus) ::: The bus is the newest.\nThirdNewest(Tractor) ::: The tractor is the third-newest.\nSecondOldest(StationWagon) ::: The station wagon is the second-oldest.\nNewer(Minivan, Motorcycle) ::: The minivan is older than the motorcycle (expressed as newer relation)\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: Newest is newer than all others\nForAll([x:Vehicle], Implies(ThirdNewest(x), Count([y:Vehicle], Newer(x, y)) == 2)) ::: Third-newest is newer than exactly two\nForAll([x:Vehicle], Implies(SecondOldest(x), Count([y:Vehicle], Newer(y, x)) == 1)) ::: Second-oldest is older than exactly one\n# Options\nis_valid(Newest(Tractor)) ::: A) The tractor is the newest.\nis_valid(Newest(StationWagon)) ::: B) The station wagon is the newest.\nis_valid(Newest(Bus)) ::: C) The bus is the newest.\nis_valid(Newest(Motorcycle)) ::: D) The motorcycle is the newest.\nis_valid(Newest(Minivan)) ::: E) The minivan is the newest."
            }
        ]
    },
    {
        "id": "logical_deduction_20",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a blue jay, a raven, a crow, a falcon, and a quail. The crow is to the left of the quail. The falcon is the leftmost. The blue jay is to the right of the quail. The raven is the second from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The blue jay is the second from the left.",
            "B) The raven is the second from the left.",
            "C) The crow is the second from the left.",
            "D) The falcon is the second from the left.",
            "E) The quail is the second from the left."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(blue_jay, True)            ::: The blue jay.\nBird(raven, True)               ::: The raven.\nBird(crow, True)                ::: The crow.\nBird(falcon, True)              ::: The falcon.\nBird(quail, True)               ::: The quail.\nLeftOf(crow, quail, True)       ::: The crow is to the left of the quail.\nLeftMost(falcon, True)          ::: The falcon is the leftmost.\nRightOf(blue_jay, quail, True)  ::: The blue jay is to the right of the quail.\nSecondFromLeft(raven, True)     ::: The raven is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(blue_jay, True)  ::: Option A\nSecondFromLeft(raven, True)     ::: Option B\nSecondFromLeft(crow, True)      ::: Option C\nSecondFromLeft(falcon, True)    ::: Option D\nSecondFromLeft(quail, True)     ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(blue_jay) ::: The blue jay.\nBird(raven) ::: The raven.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(quail) ::: The quail.\nLeftOf(crow, quail) ::: The crow is to the left of the quail.\nLeftMost(falcon) ::: The falcon is the leftmost.\nRightOf(blue_jay, quail) ::: The blue jay is to the right of the quail.\nSecondFromLeft(raven) ::: The raven is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(blue_jay) ::: Option A\nSecondFromLeft(raven) ::: Option B\nSecondFromLeft(crow) ::: Option C\nSecondFromLeft(falcon) ::: Option D\nSecondFromLeft(quail) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([blue_jay, raven, crow, falcon, quail])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(crow) < pos(quail) ::: The crow is to the left of the quail.\npos(falcon) == 1 ::: The falcon is the leftmost.\npos(blue_jay) > pos(quail) ::: The blue jay is to the right of the quail.\npos(raven) == 2 ::: The raven is the second from the left.\n# Options\nis_valid(pos(blue_jay) == 2) ::: A) The blue jay is the second from the left.\nis_valid(pos(raven) == 2) ::: B) The raven is the second from the left.\nis_valid(pos(crow) == 2) ::: C) The crow is the second from the left.\nis_valid(pos(falcon) == 2) ::: D) The falcon is the second from the left.\nis_valid(pos(quail) == 2) ::: E) The quail is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(blue_jay, True)            ::: The blue jay.\nBird(raven, True)               ::: The raven.\nBird(crow, True)                ::: The crow.\nBird(falcon, True)              ::: The falcon.\nBird(quail, True)               ::: The quail.\nLeftOf(crow, quail, True)       ::: The crow is to the left of the quail.\nLeftMost(falcon, True)          ::: The falcon is the leftmost.\nRightOf(blue_jay, quail, True)  ::: The blue jay is to the right of the quail.\nSecondFromLeft(raven, True)     ::: The raven is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(blue_jay, True)  ::: Option A\nSecondFromLeft(raven, True)     ::: Option B\nSecondFromLeft(crow, True)      ::: Option C\nSecondFromLeft(falcon, True)    ::: Option D\nSecondFromLeft(quail, True)     ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(blue_jay) ::: The blue jay.\nBird(raven) ::: The raven.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(quail) ::: The quail.\nLeftOf(crow, quail) ::: The crow is to the left of the quail.\nLeftMost(falcon) ::: The falcon is the leftmost.\nRightOf(blue_jay, quail) ::: The blue jay is to the right of the quail.\nSecondFromLeft(raven) ::: The raven is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(blue_jay) ::: Option A\nSecondFromLeft(raven) ::: Option B\nSecondFromLeft(crow) ::: Option C\nSecondFromLeft(falcon) ::: Option D\nSecondFromLeft(quail) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([blue_jay, raven, crow, falcon, quail])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(crow) < pos(quail) ::: The crow is to the left of the quail.\npos(falcon) == 1 ::: The falcon is the leftmost.\npos(blue_jay) > pos(quail) ::: The blue jay is to the right of the quail.\npos(raven) == 2 ::: The raven is the second from the left.\n# Options\nis_valid(pos(blue_jay) == 2) ::: A) The blue jay is the second from the left.\nis_valid(pos(raven) == 2) ::: B) The raven is the second from the left.\nis_valid(pos(crow) == 2) ::: C) The crow is the second from the left.\nis_valid(pos(falcon) == 2) ::: D) The falcon is the second from the left.\nis_valid(pos(quail) == 2) ::: E) The quail is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_21",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a truck, a motorcyle, a limousine, a station wagon, and a sedan. The limousine is older than the truck. The sedan is newer than the motorcyle. The station wagon is the oldest. The limousine is newer than the sedan.",
        "question": "Which of the following is true?",
        "options": [
            "A) The truck is the second-oldest.",
            "B) The motorcyle is the second-oldest.",
            "C) The limousine is the second-oldest.",
            "D) The station wagon is the second-oldest.",
            "E) The sedan is the second-oldest."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(truck, True)               ::: The truck.\nVehicle(motorcyle, True)           ::: The motorcyle.\nVehicle(limousine, True)           ::: The limousine.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan, True)               ::: The sedan.\nOlder(limousine, truck, True)      ::: The limousine is older than the truck.\nNewer(sedan, motorcyle, True)      ::: The sedan is newer than the motorcyle.\nOldest(station_wagon, True)        ::: The station wagon is the oldest.\nNewer(limousine, sedan, True)      ::: The limousine is newer than the sedan.\nRules:\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOldest($o, True) && Older($o, $a, True) && Older($o, $b, True) && Older($o, $c, True) && Older($o, $d, True) >>> SecondOldest($s, True) ::: The vehicle that is older than all except the oldest is the second-oldest.\nQuery:\nSecondOldest(truck, True)          ::: Option A\nSecondOldest(motorcyle, True)      ::: Option B\nSecondOldest(limousine, True)      ::: Option C\nSecondOldest(station_wagon, True)  ::: Option D\nSecondOldest(sedan, True)          ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(truck) ::: The truck.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nOlder(limousine, truck) ::: The limousine is older than the truck.\nNewer(sedan, motorcyle) ::: The sedan is newer than the motorcyle.\nOldest(station_wagon) ::: The station wagon is the oldest.\nNewer(limousine, sedan) ::: The limousine is newer than the sedan.\n\u2200x \u2200y (Older(x, y) \u2194 Newer(y, x)) ::: Older and newer are inverses.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Oldest(x) \u2192 \u2200y (x \u2260 y \u2192 Older(x, y))) ::: The oldest is older than all others.\n\u2200x (SecondOldest(x) \u2194 (\u00acOldest(x) \u2227 \u2200y (x \u2260 y \u2227 \u00acOldest(y) \u2192 Older(x, y)))) ::: The second-oldest is older than all except the oldest.\nConclusion:\nSecondOldest(truck) ::: Option A\nSecondOldest(motorcyle) ::: Option B\nSecondOldest(limousine) ::: Option C\nSecondOldest(station_wagon) ::: Option D\nSecondOldest(sedan) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nvehicles = EnumSort([Truck, Motorcycle, Limousine, StationWagon, Sedan])\nage = IntSort([1, 2, 3, 4, 5])\nvehicle_age = Function([vehicles] -> [age])\n# Constraints\nDistinct([v:vehicles], vehicle_age(v)) ::: Each vehicle has a unique age\nvehicle_age(Limousine) < vehicle_age(Truck) ::: The limousine is older than the truck.\nvehicle_age(Sedan) > vehicle_age(Motorcycle) ::: The sedan is newer than the motorcycle.\nvehicle_age(StationWagon) == 1 ::: The station wagon is the oldest.\nvehicle_age(Limousine) > vehicle_age(Sedan) ::: The limousine is newer than the sedan.\nForAll([v:vehicles], Implies(v != StationWagon, vehicle_age(v) > 1)) ::: The station wagon is older than all others.\n# Options\nis_valid(vehicle_age(Truck) == 2) ::: A) The truck is the second-oldest.\nis_valid(vehicle_age(Motorcycle) == 2) ::: B) The motorcycle is the second-oldest.\nis_valid(vehicle_age(Limousine) == 2) ::: C) The limousine is the second-oldest.\nis_valid(vehicle_age(StationWagon) == 2) ::: D) The station wagon is the second-oldest.\nis_valid(vehicle_age(Sedan) == 2) ::: E) The sedan is the second-oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(truck, True)               ::: The truck.\nVehicle(motorcyle, True)           ::: The motorcyle.\nVehicle(limousine, True)           ::: The limousine.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan, True)               ::: The sedan.\nOlder(limousine, truck, True)      ::: The limousine is older than the truck.\nNewer(sedan, motorcyle, True)      ::: The sedan is newer than the motorcyle.\nOldest(station_wagon, True)        ::: The station wagon is the oldest.\nNewer(limousine, sedan, True)      ::: The limousine is newer than the sedan.\nRules:\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOldest($o, True) && Older($o, $a, True) && Older($o, $b, True) && Older($o, $c, True) && Older($o, $d, True) >>> SecondOldest($s, True) ::: The vehicle that is older than all except the oldest is the second-oldest.\nQuery:\nSecondOldest(truck, True)          ::: Option A\nSecondOldest(motorcyle, True)      ::: Option B\nSecondOldest(limousine, True)      ::: Option C\nSecondOldest(station_wagon, True)  ::: Option D\nSecondOldest(sedan, True)          ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(truck) ::: The truck.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nOlder(limousine, truck) ::: The limousine is older than the truck.\nNewer(sedan, motorcyle) ::: The sedan is newer than the motorcyle.\nOldest(station_wagon) ::: The station wagon is the oldest.\nNewer(limousine, sedan) ::: The limousine is newer than the sedan.\n\u2200x \u2200y (Older(x, y) \u2194 Newer(y, x)) ::: Older and newer are inverses.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Oldest(x) \u2192 \u2200y (x \u2260 y \u2192 Older(x, y))) ::: The oldest is older than all others.\n\u2200x (SecondOldest(x) \u2194 (\u00acOldest(x) \u2227 \u2200y (x \u2260 y \u2227 \u00acOldest(y) \u2192 Older(x, y)))) ::: The second-oldest is older than all except the oldest.\nConclusion:\nSecondOldest(truck) ::: Option A\nSecondOldest(motorcyle) ::: Option B\nSecondOldest(limousine) ::: Option C\nSecondOldest(station_wagon) ::: Option D\nSecondOldest(sedan) ::: Option E",
                "SAT": "# Declarations\nvehicles = EnumSort([Truck, Motorcycle, Limousine, StationWagon, Sedan])\nage = IntSort([1, 2, 3, 4, 5])\nvehicle_age = Function([vehicles] -> [age])\n# Constraints\nDistinct([v:vehicles], vehicle_age(v)) ::: Each vehicle has a unique age\nvehicle_age(Limousine) < vehicle_age(Truck) ::: The limousine is older than the truck.\nvehicle_age(Sedan) > vehicle_age(Motorcycle) ::: The sedan is newer than the motorcycle.\nvehicle_age(StationWagon) == 1 ::: The station wagon is the oldest.\nvehicle_age(Limousine) > vehicle_age(Sedan) ::: The limousine is newer than the sedan.\nForAll([v:vehicles], Implies(v != StationWagon, vehicle_age(v) > 1)) ::: The station wagon is older than all others.\n# Options\nis_valid(vehicle_age(Truck) == 2) ::: A) The truck is the second-oldest.\nis_valid(vehicle_age(Motorcycle) == 2) ::: B) The motorcycle is the second-oldest.\nis_valid(vehicle_age(Limousine) == 2) ::: C) The limousine is the second-oldest.\nis_valid(vehicle_age(StationWagon) == 2) ::: D) The station wagon is the second-oldest.\nis_valid(vehicle_age(Sedan) == 2) ::: E) The sedan is the second-oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_22",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, a blue book, a brown book, a gray book, and a red book. The green book is to the left of the brown book. The gray book is to the left of the blue book. The green book is to the right of the blue book. The red book is the leftmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the second from the right.",
            "B) The blue book is the second from the right.",
            "C) The brown book is the second from the right.",
            "D) The gray book is the second from the right.",
            "E) The red book is the second from the right."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(green, True)               ::: The green book.\nBook(blue,  True)               ::: The blue book.\nBook(brown, True)               ::: The brown book.\nBook(gray,  True)               ::: The gray book.\nBook(red,   True)               ::: The red book.\nLeftOf(green, brown, True)      ::: The green book is to the left of the brown book.\nLeftOf(gray, blue, True)        ::: The gray book is to the left of the blue book.\nRightOf(green, blue, True)      ::: The green book is to the right of the blue book.\nLeftOf(red, green, True)        ::: The red book is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($b, green, True) && RightOf($b, blue, True) && RightOf($b, gray, True) && RightOf($b, red, True) >>> RightMost($b, True) ::: A book that is to the right of all the other four is the right\u2011most book.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, green, True) && RightOf($s, blue, True) && RightOf($s, gray, True) >>> SecondFromRight($s, True) ::: The book immediately left of the right\u2011most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(green, True)    ::: Option A\nSecondFromRight(blue,  True)    ::: Option B\nSecondFromRight(brown, True)    ::: Option C\nSecondFromRight(gray,  True)    ::: Option D\nSecondFromRight(red,   True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(brown) ::: The brown book.\nBook(gray) ::: The gray book.\nBook(red) ::: The red book.\nLeftOf(green, brown) ::: The green book is to the left of the brown book.\nLeftOf(gray, blue) ::: The gray book is to the left of the blue book.\nRightOf(green, blue) ::: The green book is to the right of the blue book.\nLeftOf(red, green) ::: The red book is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z) ::: RightOf is transitive.\n\u2200x (RightOf(x, green) \u2227 RightOf(x, blue) \u2227 RightOf(x, gray) \u2227 RightOf(x, red) \u2192 RightMost(x) ::: A book to the right of all others is right-most.\n\u2200x \u2200y (RightMost(y) \u2227 RightOf(y, x) \u2227 RightOf(x, green) \u2227 RightOf(x, blue) \u2227 RightOf(x, gray) \u2192 SecondFromRight(x) ::: The book immediately left of the right-most is second from the right.\nConclusion:\nSecondFromRight(green) ::: Option A\nSecondFromRight(blue) ::: Option B\nSecondFromRight(brown) ::: Option C\nSecondFromRight(gray) ::: Option D\nSecondFromRight(red) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Green, Blue, Brown, Gray, Red])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Green) < pos(Brown) ::: The green book is to the left of the brown book.\npos(Gray) < pos(Blue) ::: The gray book is to the left of the blue book.\npos(Green) > pos(Blue) ::: The green book is to the right of the blue book.\npos(Red) == 1 ::: The red book is the leftmost.\n# Options\nis_valid(pos(Green) == 4) ::: A) The green book is the second from the right.\nis_valid(pos(Blue) == 4) ::: B) The blue book is the second from the right.\nis_valid(pos(Brown) == 4) ::: C) The brown book is the second from the right.\nis_valid(pos(Gray) == 4) ::: D) The gray book is the second from the right.\nis_valid(pos(Red) == 4) ::: E) The red book is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(green, True)               ::: The green book.\nBook(blue,  True)               ::: The blue book.\nBook(brown, True)               ::: The brown book.\nBook(gray,  True)               ::: The gray book.\nBook(red,   True)               ::: The red book.\nLeftOf(green, brown, True)      ::: The green book is to the left of the brown book.\nLeftOf(gray, blue, True)        ::: The gray book is to the left of the blue book.\nRightOf(green, blue, True)      ::: The green book is to the right of the blue book.\nLeftOf(red, green, True)        ::: The red book is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($b, green, True) && RightOf($b, blue, True) && RightOf($b, gray, True) && RightOf($b, red, True) >>> RightMost($b, True) ::: A book that is to the right of all the other four is the right\u2011most book.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, green, True) && RightOf($s, blue, True) && RightOf($s, gray, True) >>> SecondFromRight($s, True) ::: The book immediately left of the right\u2011most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(green, True)    ::: Option A\nSecondFromRight(blue,  True)    ::: Option B\nSecondFromRight(brown, True)    ::: Option C\nSecondFromRight(gray,  True)    ::: Option D\nSecondFromRight(red,   True)    ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(brown) ::: The brown book.\nBook(gray) ::: The gray book.\nBook(red) ::: The red book.\nLeftOf(green, brown) ::: The green book is to the left of the brown book.\nLeftOf(gray, blue) ::: The gray book is to the left of the blue book.\nRightOf(green, blue) ::: The green book is to the right of the blue book.\nLeftOf(red, green) ::: The red book is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z) ::: RightOf is transitive.\n\u2200x (RightOf(x, green) \u2227 RightOf(x, blue) \u2227 RightOf(x, gray) \u2227 RightOf(x, red) \u2192 RightMost(x) ::: A book to the right of all others is right-most.\n\u2200x \u2200y (RightMost(y) \u2227 RightOf(y, x) \u2227 RightOf(x, green) \u2227 RightOf(x, blue) \u2227 RightOf(x, gray) \u2192 SecondFromRight(x) ::: The book immediately left of the right-most is second from the right.\nConclusion:\nSecondFromRight(green) ::: Option A\nSecondFromRight(blue) ::: Option B\nSecondFromRight(brown) ::: Option C\nSecondFromRight(gray) ::: Option D\nSecondFromRight(red) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Green, Blue, Brown, Gray, Red])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Green) < pos(Brown) ::: The green book is to the left of the brown book.\npos(Gray) < pos(Blue) ::: The gray book is to the left of the blue book.\npos(Green) > pos(Blue) ::: The green book is to the right of the blue book.\npos(Red) == 1 ::: The red book is the leftmost.\n# Options\nis_valid(pos(Green) == 4) ::: A) The green book is the second from the right.\nis_valid(pos(Blue) == 4) ::: B) The blue book is the second from the right.\nis_valid(pos(Brown) == 4) ::: C) The brown book is the second from the right.\nis_valid(pos(Gray) == 4) ::: D) The gray book is the second from the right.\nis_valid(pos(Red) == 4) ::: E) The red book is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_23",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, a blue book, a white book, a purple book, and a yellow book. The blue book is to the right of the yellow book. The white book is to the left of the yellow book. The blue book is the second from the right. The purple book is the second from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the leftmost.",
            "B) The blue book is the leftmost.",
            "C) The white book is the leftmost.",
            "D) The purple book is the leftmost.",
            "E) The yellow book is the leftmost."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nLeftMost($x, bool)              ::: Book $x is the left-most book on the shelf.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nLeftOf($a, white, True) && LeftOf($a, blue, True) && LeftOf($a, purple, True) && LeftOf($a, yellow, True) >>> LeftMost($a, True) ::: A book that is to the left of all the other four is the left-most book.\nSecondFromLeft($s, True) && LeftOf($s, $a, True) && LeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftMost($s, True) ::: The book immediately right of the left-most\u2014and still left of the remaining three\u2014is second from the left.\nQuery:\nLeftMost(green,  True)  ::: Option A\nLeftMost(blue,   True)  ::: Option B\nLeftMost(white,  True)  ::: Option C\nLeftMost(purple, True)  ::: Option D\nLeftMost(yellow, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nLeftMost(x) ::: Book x is the left-most book on the shelf.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (LeftOf(x, white) \u2227 LeftOf(x, blue) \u2227 LeftOf(x, purple) \u2227 LeftOf(x, yellow) \u2192 LeftMost(x)) ::: A book left of all others is left-most.\n\u2200s \u2200a \u2200b \u2200c (SecondFromLeft(s) \u2227 LeftOf(s, a) \u2227 LeftOf(a, b) \u2227 LeftOf(b, c) \u2192 LeftMost(s)) ::: The book immediately right of the left-most is second from left.\nConclusion:\nLeftMost(green) ::: Option A\nLeftMost(blue) ::: Option B\nLeftMost(white) ::: Option C\nLeftMost(purple) ::: Option D\nLeftMost(yellow) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 1) ::: A) The green book is the leftmost.\nis_valid(pos(Blue) == 1) ::: B) The blue book is the leftmost.\nis_valid(pos(White) == 1) ::: C) The white book is the leftmost.\nis_valid(pos(Purple) == 1) ::: D) The purple book is the leftmost.\nis_valid(pos(Yellow) == 1) ::: E) The yellow book is the leftmost."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nLeftMost($x, bool)              ::: Book $x is the left-most book on the shelf.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nLeftOf($a, white, True) && LeftOf($a, blue, True) && LeftOf($a, purple, True) && LeftOf($a, yellow, True) >>> LeftMost($a, True) ::: A book that is to the left of all the other four is the left-most book.\nSecondFromLeft($s, True) && LeftOf($s, $a, True) && LeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftMost($s, True) ::: The book immediately right of the left-most\u2014and still left of the remaining three\u2014is second from the left.\nQuery:\nLeftMost(green,  True)  ::: Option A\nLeftMost(blue,   True)  ::: Option B\nLeftMost(white,  True)  ::: Option C\nLeftMost(purple, True)  ::: Option D\nLeftMost(yellow, True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nLeftMost(x) ::: Book x is the left-most book on the shelf.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (LeftOf(x, white) \u2227 LeftOf(x, blue) \u2227 LeftOf(x, purple) \u2227 LeftOf(x, yellow) \u2192 LeftMost(x)) ::: A book left of all others is left-most.\n\u2200s \u2200a \u2200b \u2200c (SecondFromLeft(s) \u2227 LeftOf(s, a) \u2227 LeftOf(a, b) \u2227 LeftOf(b, c) \u2192 LeftMost(s)) ::: The book immediately right of the left-most is second from left.\nConclusion:\nLeftMost(green) ::: Option A\nLeftMost(blue) ::: Option B\nLeftMost(white) ::: Option C\nLeftMost(purple) ::: Option D\nLeftMost(yellow) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 1) ::: A) The green book is the leftmost.\nis_valid(pos(Blue) == 1) ::: B) The blue book is the leftmost.\nis_valid(pos(White) == 1) ::: C) The white book is the leftmost.\nis_valid(pos(Purple) == 1) ::: D) The purple book is the leftmost.\nis_valid(pos(Yellow) == 1) ::: E) The yellow book is the leftmost."
            }
        ]
    },
    {
        "id": "logical_deduction_24",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a truck, a station wagon, a motorcyle, a limousine, and a hatchback. The motorcyle is the second-newest. The truck is newer than the limousine. The motorcyle is older than the station wagon. The limousine is newer than the hatchback.",
        "question": "Which of the following is true?",
        "options": [
            "A) The truck is the newest.",
            "B) The station wagon is the newest.",
            "C) The motorcyle is the newest.",
            "D) The limousine is the newest.",
            "E) The hatchback is the newest."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest among the five.\nFacts:\nVehicle(truck, True)              ::: The truck.\nVehicle(station_wagon, True)      ::: The station wagon.\nVehicle(motorcyle, True)          ::: The motorcyle.\nVehicle(limousine, True)          ::: The limousine.\nVehicle(hatchback, True)          ::: The hatchback.\nNewer(truck, limousine, True)     ::: The truck is newer than the limousine.\nOlder(motorcyle, station_wagon, True) ::: The motorcyle is older than the station wagon.\nNewer(limousine, hatchback, True) ::: The limousine is newer than the hatchback.\nOlder(motorcyle, _, True)         ::: The motorcyle is the second-newest (placeholder for position).\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nNewer($a, truck, True) && Newer($a, station_wagon, True) && Newer($a, motorcyle, True) && Newer($a, limousine, True) && Newer($a, hatchback, True) >>> Newest($a, True) ::: A vehicle newer than all others is the newest.\nQuery:\nNewest(truck, True)       ::: Option A\nNewest(station_wagon, True) ::: Option B\nNewest(motorcyle, True)   ::: Option C\nNewest(limousine, True)   ::: Option D\nNewest(hatchback, True)   ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest among the five.\nPremises:\nVehicle(truck) ::: The truck.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nVehicle(hatchback) ::: The hatchback.\nNewer(truck, limousine) ::: The truck is newer than the limousine.\nNewer(station_wagon, motorcyle) ::: The station wagon is newer than the motorcyle.\nNewer(limousine, hatchback) ::: The limousine is newer than the hatchback.\n\u2203x (Newer(x, motorcyle) \u2227 \u2200y (y \u2260 x \u2192 \u00acNewer(y, motorcyle)) ::: The motorcyle is the second-newest (exactly one vehicle is newer than it).\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: \"Newer\" is transitive.\n\u2200x (Newest(x) \u2194 (\u2200y (y \u2260 x \u2192 Newer(x, y)))) ::: A vehicle is newest iff it is newer than all others.\nConclusion:\nNewest(truck) ::: Option A\nNewest(station_wagon) ::: Option B\nNewest(motorcyle) ::: Option C\nNewest(limousine) ::: Option D\nNewest(hatchback) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Truck, StationWagon, Motorcyle, Limousine, Hatchback])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\n# Constraints\nNewer(Truck, Limousine) ::: The truck is newer than the limousine.\nNewer(StationWagon, Motorcyle) ::: The station wagon is newer than the motorcyle.\nNewer(Limousine, Hatchback) ::: The limousine is newer than the hatchback.\nExists([x:Vehicle], And(Newer(x, Motorcyle), ForAll([y:Vehicle], Implies(y != x, Not(Newer(y, Motorcyle))))) ::: The motorcyle is the second-newest.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: \"Newer\" is transitive.\nForAll([x:Vehicle], Newest(x) == ForAll([y:Vehicle], Implies(y != x, Newer(x, y)))) ::: A vehicle is newest iff it is newer than all others.\n# Options\nis_valid(Newest(Truck)) ::: A) The truck is the newest.\nis_valid(Newest(StationWagon)) ::: B) The station wagon is the newest.\nis_valid(Newest(Motorcyle)) ::: C) The motorcyle is the newest.\nis_valid(Newest(Limousine)) ::: D) The limousine is the newest.\nis_valid(Newest(Hatchback)) ::: E) The hatchback is the newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest among the five.\nFacts:\nVehicle(truck, True)              ::: The truck.\nVehicle(station_wagon, True)      ::: The station wagon.\nVehicle(motorcyle, True)          ::: The motorcyle.\nVehicle(limousine, True)          ::: The limousine.\nVehicle(hatchback, True)          ::: The hatchback.\nNewer(truck, limousine, True)     ::: The truck is newer than the limousine.\nOlder(motorcyle, station_wagon, True) ::: The motorcyle is older than the station wagon.\nNewer(limousine, hatchback, True) ::: The limousine is newer than the hatchback.\nOlder(motorcyle, _, True)         ::: The motorcyle is the second-newest (placeholder for position).\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nNewer($a, truck, True) && Newer($a, station_wagon, True) && Newer($a, motorcyle, True) && Newer($a, limousine, True) && Newer($a, hatchback, True) >>> Newest($a, True) ::: A vehicle newer than all others is the newest.\nQuery:\nNewest(truck, True)       ::: Option A\nNewest(station_wagon, True) ::: Option B\nNewest(motorcyle, True)   ::: Option C\nNewest(limousine, True)   ::: Option D\nNewest(hatchback, True)   ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest among the five.\nPremises:\nVehicle(truck) ::: The truck.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nVehicle(hatchback) ::: The hatchback.\nNewer(truck, limousine) ::: The truck is newer than the limousine.\nNewer(station_wagon, motorcyle) ::: The station wagon is newer than the motorcyle.\nNewer(limousine, hatchback) ::: The limousine is newer than the hatchback.\n\u2203x (Newer(x, motorcyle) \u2227 \u2200y (y \u2260 x \u2192 \u00acNewer(y, motorcyle)) ::: The motorcyle is the second-newest (exactly one vehicle is newer than it).\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: \"Newer\" is transitive.\n\u2200x (Newest(x) \u2194 (\u2200y (y \u2260 x \u2192 Newer(x, y)))) ::: A vehicle is newest iff it is newer than all others.\nConclusion:\nNewest(truck) ::: Option A\nNewest(station_wagon) ::: Option B\nNewest(motorcyle) ::: Option C\nNewest(limousine) ::: Option D\nNewest(hatchback) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Truck, StationWagon, Motorcyle, Limousine, Hatchback])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\n# Constraints\nNewer(Truck, Limousine) ::: The truck is newer than the limousine.\nNewer(StationWagon, Motorcyle) ::: The station wagon is newer than the motorcyle.\nNewer(Limousine, Hatchback) ::: The limousine is newer than the hatchback.\nExists([x:Vehicle], And(Newer(x, Motorcyle), ForAll([y:Vehicle], Implies(y != x, Not(Newer(y, Motorcyle))))) ::: The motorcyle is the second-newest.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: \"Newer\" is transitive.\nForAll([x:Vehicle], Newest(x) == ForAll([y:Vehicle], Implies(y != x, Newer(x, y)))) ::: A vehicle is newest iff it is newer than all others.\n# Options\nis_valid(Newest(Truck)) ::: A) The truck is the newest.\nis_valid(Newest(StationWagon)) ::: B) The station wagon is the newest.\nis_valid(Newest(Motorcyle)) ::: C) The motorcyle is the newest.\nis_valid(Newest(Limousine)) ::: D) The limousine is the newest.\nis_valid(Newest(Hatchback)) ::: E) The hatchback is the newest."
            }
        ]
    },
    {
        "id": "logical_deduction_25",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a blue book, a purple book, a yellow book, a black book, and a green book. The purple book is the third from the left. The yellow book is to the left of the black book. The green book is to the left of the purple book. The blue book is to the left of the green book.",
        "question": "Which of the following is true?",
        "options": [
            "A) The blue book is the second from the right.",
            "B) The purple book is the second from the right.",
            "C) The yellow book is the second from the right.",
            "D) The black book is the second from the right.",
            "E) The green book is the second from the right."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(blue,   True)              ::: The blue book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nBook(black,  True)              ::: The black book.\nBook(green,  True)              ::: The green book.\nLeftOf(yellow, black, True)     ::: The yellow book is to the left of the black book.\nLeftOf(green, purple, True)     ::: The green book is to the left of the purple book.\nLeftOf(blue, green, True)       ::: The blue book is to the left of the green book.\nPosition(purple, 3, True)       ::: The purple book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($b, blue, True) && RightOf($b, green, True) && RightOf($b, purple, True) && RightOf($b, yellow, True) >>> RightMost($b, True) ::: A book that is to the right of all the other four is the right\u2011most book.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, blue, True) && RightOf($s, green, True) && RightOf($s, purple, True) >>> SecondFromRight($s, True) ::: The book immediately left of the right\u2011most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(blue,   True)  ::: Option A\nSecondFromRight(purple, True)  ::: Option B\nSecondFromRight(yellow, True)  ::: Option C\nSecondFromRight(black,  True)  ::: Option D\nSecondFromRight(green,  True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, pos) ::: Book x is at position pos (1 = leftmost, 5 = rightmost).\nSecondFromRight(x) ::: Book x is the second from the right.\nPremises:\nBook(blue) ::: The blue book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nBook(black) ::: The black book.\nBook(green) ::: The green book.\nLeftOf(yellow, black) ::: The yellow book is to the left of the black book.\nLeftOf(green, purple) ::: The green book is to the left of the purple book.\nLeftOf(blue, green) ::: The blue book is to the left of the green book.\nPosition(purple, 3) ::: The purple book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: \"LeftOf\" is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: \"LeftOf\" is transitive.\n\u2200x \u2200y (LeftOf(x, y) \u2194 Position(x, p) \u2227 Position(y, q) \u2227 p < q) ::: \"LeftOf\" corresponds to position numbers.\n\u2200x (SecondFromRight(x) \u2194 Position(x, 4)) ::: Second from right is position 4.\nConclusion:\nPosition(blue, 4) ::: Option A\nPosition(purple, 4) ::: Option B\nPosition(yellow, 4) ::: Option C\nPosition(black, 4) ::: Option D\nPosition(green, 4) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Blue, Purple, Yellow, Black, Green])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) == 3 ::: The purple book is the third from the left.\npos(Yellow) < pos(Black) ::: The yellow book is to the left of the black book.\npos(Green) < pos(Purple) ::: The green book is to the left of the purple book.\npos(Blue) < pos(Green) ::: The blue book is to the left of the green book.\n# Options\nis_valid(pos(Blue) == 4) ::: A) The blue book is the second from the right.\nis_valid(pos(Purple) == 4) ::: B) The purple book is the second from the right.\nis_valid(pos(Yellow) == 4) ::: C) The yellow book is the second from the right.\nis_valid(pos(Black) == 4) ::: D) The black book is the second from the right.\nis_valid(pos(Green) == 4) ::: E) The green book is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(blue,   True)              ::: The blue book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nBook(black,  True)              ::: The black book.\nBook(green,  True)              ::: The green book.\nLeftOf(yellow, black, True)     ::: The yellow book is to the left of the black book.\nLeftOf(green, purple, True)     ::: The green book is to the left of the purple book.\nLeftOf(blue, green, True)       ::: The blue book is to the left of the green book.\nPosition(purple, 3, True)       ::: The purple book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($b, blue, True) && RightOf($b, green, True) && RightOf($b, purple, True) && RightOf($b, yellow, True) >>> RightMost($b, True) ::: A book that is to the right of all the other four is the right\u2011most book.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, blue, True) && RightOf($s, green, True) && RightOf($s, purple, True) >>> SecondFromRight($s, True) ::: The book immediately left of the right\u2011most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(blue,   True)  ::: Option A\nSecondFromRight(purple, True)  ::: Option B\nSecondFromRight(yellow, True)  ::: Option C\nSecondFromRight(black,  True)  ::: Option D\nSecondFromRight(green,  True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, pos) ::: Book x is at position pos (1 = leftmost, 5 = rightmost).\nSecondFromRight(x) ::: Book x is the second from the right.\nPremises:\nBook(blue) ::: The blue book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nBook(black) ::: The black book.\nBook(green) ::: The green book.\nLeftOf(yellow, black) ::: The yellow book is to the left of the black book.\nLeftOf(green, purple) ::: The green book is to the left of the purple book.\nLeftOf(blue, green) ::: The blue book is to the left of the green book.\nPosition(purple, 3) ::: The purple book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: \"LeftOf\" is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: \"LeftOf\" is transitive.\n\u2200x \u2200y (LeftOf(x, y) \u2194 Position(x, p) \u2227 Position(y, q) \u2227 p < q) ::: \"LeftOf\" corresponds to position numbers.\n\u2200x (SecondFromRight(x) \u2194 Position(x, 4)) ::: Second from right is position 4.\nConclusion:\nPosition(blue, 4) ::: Option A\nPosition(purple, 4) ::: Option B\nPosition(yellow, 4) ::: Option C\nPosition(black, 4) ::: Option D\nPosition(green, 4) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Blue, Purple, Yellow, Black, Green])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) == 3 ::: The purple book is the third from the left.\npos(Yellow) < pos(Black) ::: The yellow book is to the left of the black book.\npos(Green) < pos(Purple) ::: The green book is to the left of the purple book.\npos(Blue) < pos(Green) ::: The blue book is to the left of the green book.\n# Options\nis_valid(pos(Blue) == 4) ::: A) The blue book is the second from the right.\nis_valid(pos(Purple) == 4) ::: B) The purple book is the second from the right.\nis_valid(pos(Yellow) == 4) ::: C) The yellow book is the second from the right.\nis_valid(pos(Black) == 4) ::: D) The black book is the second from the right.\nis_valid(pos(Green) == 4) ::: E) The green book is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_26",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn a golf tournament, there were five golfers: Amy, Dan, Mya, Eli, and Mel. Amy finished above Mel. Mya finished first. Amy finished below Eli. Dan finished last.",
        "question": "Which of the following is true?",
        "options": [
            "A) Amy finished first.",
            "B) Dan finished first.",
            "C) Mya finished first.",
            "D) Eli finished first.",
            "E) Mel finished first."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nGolfer($x, bool)                ::: $x is one of the five golfers.\nFinishedAbove($x, $y, bool)      ::: Golfer $x finished above golfer $y.\nFinishedBelow($x, $y, bool)      ::: Golfer $x finished below golfer $y.\nFinishedFirst($x, bool)          ::: Golfer $x finished first.\nFinishedLast($x, bool)           ::: Golfer $x finished last.\nFacts:\nGolfer(Amy, True)               ::: Amy is one of the golfers.\nGolfer(Dan, True)               ::: Dan is one of the golfers.\nGolfer(Mya, True)               ::: Mya is one of the golfers.\nGolfer(Eli, True)               ::: Eli is one of the golfers.\nGolfer(Mel, True)               ::: Mel is one of the golfers.\nFinishedAbove(Amy, Mel, True)   ::: Amy finished above Mel.\nFinishedFirst(Mya, True)        ::: Mya finished first.\nFinishedBelow(Amy, Eli, True)   ::: Amy finished below Eli.\nFinishedLast(Dan, True)         ::: Dan finished last.\nRules:\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAbove($a, $b, True) && FinishedAbove($b, $c, True) >>> FinishedAbove($a, $c, True) ::: FinishedAbove is transitive.\nFinishedBelow($a, $b, True) && FinishedBelow($b, $c, True) >>> FinishedBelow($a, $c, True) ::: FinishedBelow is transitive.\nQuery:\nFinishedFirst(Amy, True)        ::: Option A\nFinishedFirst(Dan, True)        ::: Option B\nFinishedFirst(Mya, True)        ::: Option C\nFinishedFirst(Eli, True)        ::: Option D\nFinishedFirst(Mel, True)        ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedAbove(x, y) ::: Golfer x finished above golfer y.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedFirst(x) ::: Golfer x finished first.\nFinishedLast(x) ::: Golfer x finished last.\nPremises:\nGolfer(Amy) ::: Amy is one of the golfers.\nGolfer(Dan) ::: Dan is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mel) ::: Mel is one of the golfers.\nFinishedAbove(Amy, Mel) ::: Amy finished above Mel.\nFinishedFirst(Mya) ::: Mya finished first.\nFinishedBelow(Amy, Eli) ::: Amy finished below Eli.\nFinishedLast(Dan) ::: Dan finished last.\n\u2200x \u2200y (FinishedAbove(x, y) \u2192 FinishedBelow(y, x)) ::: If x finished above y, then y finished below x.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 FinishedAbove(y, x)) ::: If x finished below y, then y finished above x.\n\u2200x \u2200y \u2200z (FinishedAbove(x, y) \u2227 FinishedAbove(y, z) \u2192 FinishedAbove(x, z)) ::: FinishedAbove is transitive.\n\u2200x \u2200y \u2200z (FinishedBelow(x, y) \u2227 FinishedBelow(y, z) \u2192 FinishedBelow(x, z)) ::: FinishedBelow is transitive.\nConclusion:\nFinishedFirst(Amy) ::: Option A\nFinishedFirst(Dan) ::: Option B\nFinishedFirst(Mya) ::: Option C\nFinishedFirst(Eli) ::: Option D\nFinishedFirst(Mel) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nGolfers = EnumSort([Amy, Dan, Mya, Eli, Mel])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Amy) < pos(Mel) ::: Amy finished above Mel\npos(Mya) == 1 ::: Mya finished first\npos(Amy) > pos(Eli) ::: Amy finished below Eli\npos(Dan) == 5 ::: Dan finished last\n# Options\nis_valid(pos(Amy) == 1) ::: A) Amy finished first\nis_valid(pos(Dan) == 1) ::: B) Dan finished first\nis_valid(pos(Mya) == 1) ::: C) Mya finished first\nis_valid(pos(Eli) == 1) ::: D) Eli finished first\nis_valid(pos(Mel) == 1) ::: E) Mel finished first"
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nGolfer($x, bool)                ::: $x is one of the five golfers.\nFinishedAbove($x, $y, bool)      ::: Golfer $x finished above golfer $y.\nFinishedBelow($x, $y, bool)      ::: Golfer $x finished below golfer $y.\nFinishedFirst($x, bool)          ::: Golfer $x finished first.\nFinishedLast($x, bool)           ::: Golfer $x finished last.\nFacts:\nGolfer(Amy, True)               ::: Amy is one of the golfers.\nGolfer(Dan, True)               ::: Dan is one of the golfers.\nGolfer(Mya, True)               ::: Mya is one of the golfers.\nGolfer(Eli, True)               ::: Eli is one of the golfers.\nGolfer(Mel, True)               ::: Mel is one of the golfers.\nFinishedAbove(Amy, Mel, True)   ::: Amy finished above Mel.\nFinishedFirst(Mya, True)        ::: Mya finished first.\nFinishedBelow(Amy, Eli, True)   ::: Amy finished below Eli.\nFinishedLast(Dan, True)         ::: Dan finished last.\nRules:\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAbove($a, $b, True) && FinishedAbove($b, $c, True) >>> FinishedAbove($a, $c, True) ::: FinishedAbove is transitive.\nFinishedBelow($a, $b, True) && FinishedBelow($b, $c, True) >>> FinishedBelow($a, $c, True) ::: FinishedBelow is transitive.\nQuery:\nFinishedFirst(Amy, True)        ::: Option A\nFinishedFirst(Dan, True)        ::: Option B\nFinishedFirst(Mya, True)        ::: Option C\nFinishedFirst(Eli, True)        ::: Option D\nFinishedFirst(Mel, True)        ::: Option E",
                "FOL": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedAbove(x, y) ::: Golfer x finished above golfer y.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedFirst(x) ::: Golfer x finished first.\nFinishedLast(x) ::: Golfer x finished last.\nPremises:\nGolfer(Amy) ::: Amy is one of the golfers.\nGolfer(Dan) ::: Dan is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mel) ::: Mel is one of the golfers.\nFinishedAbove(Amy, Mel) ::: Amy finished above Mel.\nFinishedFirst(Mya) ::: Mya finished first.\nFinishedBelow(Amy, Eli) ::: Amy finished below Eli.\nFinishedLast(Dan) ::: Dan finished last.\n\u2200x \u2200y (FinishedAbove(x, y) \u2192 FinishedBelow(y, x)) ::: If x finished above y, then y finished below x.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 FinishedAbove(y, x)) ::: If x finished below y, then y finished above x.\n\u2200x \u2200y \u2200z (FinishedAbove(x, y) \u2227 FinishedAbove(y, z) \u2192 FinishedAbove(x, z)) ::: FinishedAbove is transitive.\n\u2200x \u2200y \u2200z (FinishedBelow(x, y) \u2227 FinishedBelow(y, z) \u2192 FinishedBelow(x, z)) ::: FinishedBelow is transitive.\nConclusion:\nFinishedFirst(Amy) ::: Option A\nFinishedFirst(Dan) ::: Option B\nFinishedFirst(Mya) ::: Option C\nFinishedFirst(Eli) ::: Option D\nFinishedFirst(Mel) ::: Option E",
                "SAT": "# Declarations\nGolfers = EnumSort([Amy, Dan, Mya, Eli, Mel])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Amy) < pos(Mel) ::: Amy finished above Mel\npos(Mya) == 1 ::: Mya finished first\npos(Amy) > pos(Eli) ::: Amy finished below Eli\npos(Dan) == 5 ::: Dan finished last\n# Options\nis_valid(pos(Amy) == 1) ::: A) Amy finished first\nis_valid(pos(Dan) == 1) ::: B) Dan finished first\nis_valid(pos(Mya) == 1) ::: C) Mya finished first\nis_valid(pos(Eli) == 1) ::: D) Eli finished first\nis_valid(pos(Mel) == 1) ::: E) Mel finished first"
            }
        ]
    },
    {
        "id": "logical_deduction_27",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a robin, a blue jay, a hawk, and a hummingbird. The owl is the second from the right. The robin is the second from the left. The robin is to the right of the blue jay. The hummingbird is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the leftmost.",
            "B) The robin is the leftmost.",
            "C) The blue jay is the leftmost.",
            "D) The hawk is the leftmost.",
            "E) The hummingbird is the leftmost."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromRight($x, True) >>> RightOf($rm, $x, True) && RightOf($x, $s, True) ::: $x is second from the right if it is between the right-most bird and another bird.\nSecondFromLeft($x, True) >>> LeftOf($lm, $x, True) && LeftOf($x, $s, True) ::: $x is second from the left if it is between the left-most bird and another bird.\nLeftOf($x, $y, True) && LeftOf($y, $z, True) && LeftOf($z, $w, True) >>> LeftMost($x, True) ::: The left-most bird is the one with all others to its right.\nQuery:\nLeftMost(owl, True)             ::: Option A\nLeftMost(robin, True)           ::: Option B\nLeftMost(blue_jay, True)        ::: Option C\nLeftMost(hawk, True)            ::: Option D\nLeftMost(hummingbird, True)     ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nLeftOf(blue_jay, robin) ::: The robin is to the right of the blue jay.\nLeftOf(hawk, hummingbird) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (SecondFromRight(x) \u2192 \u2203y \u2203z (LeftOf(y, x) \u2227 LeftOf(x, z) \u2227 \u2200w (LeftOf(w, z) \u2192 (w = x \u2228 w = y)))) ::: x is second from the right if it is between the right-most bird and another bird.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z (LeftOf(y, x) \u2227 LeftOf(x, z) \u2227 \u2200w (LeftOf(y, w) \u2192 (w = x \u2228 w = z)))) ::: x is second from the left if it is between the left-most bird and another bird.\n\u2200x (LeftMost(x) \u2194 \u2200y (y \u2260 x \u2192 LeftOf(x, y))) ::: The left-most bird is the one with all others to its right.\nConclusion:\nLeftMost(owl) ::: Option A\nLeftMost(robin) ::: Option B\nLeftMost(blue_jay) ::: Option C\nLeftMost(hawk) ::: Option D\nLeftMost(hummingbird) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([owl, robin, blue_jay, hawk, hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(owl) == 4 ::: The owl is the second from the right.\npos(robin) == 2 ::: The robin is the second from the left.\npos(robin) > pos(blue_jay) ::: The robin is to the right of the blue jay.\npos(hummingbird) > pos(hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(owl) == 1) ::: A) The owl is the leftmost.\nis_valid(pos(robin) == 1) ::: B) The robin is the leftmost.\nis_valid(pos(blue_jay) == 1) ::: C) The blue jay is the leftmost.\nis_valid(pos(hawk) == 1) ::: D) The hawk is the leftmost.\nis_valid(pos(hummingbird) == 1) ::: E) The hummingbird is the leftmost."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromRight($x, True) >>> RightOf($rm, $x, True) && RightOf($x, $s, True) ::: $x is second from the right if it is between the right-most bird and another bird.\nSecondFromLeft($x, True) >>> LeftOf($lm, $x, True) && LeftOf($x, $s, True) ::: $x is second from the left if it is between the left-most bird and another bird.\nLeftOf($x, $y, True) && LeftOf($y, $z, True) && LeftOf($z, $w, True) >>> LeftMost($x, True) ::: The left-most bird is the one with all others to its right.\nQuery:\nLeftMost(owl, True)             ::: Option A\nLeftMost(robin, True)           ::: Option B\nLeftMost(blue_jay, True)        ::: Option C\nLeftMost(hawk, True)            ::: Option D\nLeftMost(hummingbird, True)     ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nLeftOf(blue_jay, robin) ::: The robin is to the right of the blue jay.\nLeftOf(hawk, hummingbird) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (SecondFromRight(x) \u2192 \u2203y \u2203z (LeftOf(y, x) \u2227 LeftOf(x, z) \u2227 \u2200w (LeftOf(w, z) \u2192 (w = x \u2228 w = y)))) ::: x is second from the right if it is between the right-most bird and another bird.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z (LeftOf(y, x) \u2227 LeftOf(x, z) \u2227 \u2200w (LeftOf(y, w) \u2192 (w = x \u2228 w = z)))) ::: x is second from the left if it is between the left-most bird and another bird.\n\u2200x (LeftMost(x) \u2194 \u2200y (y \u2260 x \u2192 LeftOf(x, y))) ::: The left-most bird is the one with all others to its right.\nConclusion:\nLeftMost(owl) ::: Option A\nLeftMost(robin) ::: Option B\nLeftMost(blue_jay) ::: Option C\nLeftMost(hawk) ::: Option D\nLeftMost(hummingbird) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([owl, robin, blue_jay, hawk, hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(owl) == 4 ::: The owl is the second from the right.\npos(robin) == 2 ::: The robin is the second from the left.\npos(robin) > pos(blue_jay) ::: The robin is to the right of the blue jay.\npos(hummingbird) > pos(hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(owl) == 1) ::: A) The owl is the leftmost.\nis_valid(pos(robin) == 1) ::: B) The robin is the leftmost.\nis_valid(pos(blue_jay) == 1) ::: C) The blue jay is the leftmost.\nis_valid(pos(hawk) == 1) ::: D) The hawk is the leftmost.\nis_valid(pos(hummingbird) == 1) ::: E) The hummingbird is the leftmost."
            }
        ]
    },
    {
        "id": "logical_deduction_28",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a bus, a minivan, a truck, and a sedan. The convertible is newer than the truck. The minivan is the newest. The bus is the third-newest. The truck is newer than the sedan.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the second-newest.",
            "B) The bus is the second-newest.",
            "C) The minivan is the second-newest.",
            "D) The truck is the second-newest.",
            "E) The sedan is the second-newest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                 ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                    ::: Vehicle $x is the newest.\nThirdNewest($x, bool)               ::: Vehicle $x is the third-newest.\nSecondNewest($x, bool)              ::: Vehicle $x is the second-newest.\nFacts:\nVehicle(convertible, True)          ::: The convertible.\nVehicle(bus,        True)          ::: The bus.\nVehicle(minivan,    True)          ::: The minivan.\nVehicle(truck,      True)          ::: The truck.\nVehicle(sedan,      True)          ::: The sedan.\nNewer(convertible, truck, True)     ::: The convertible is newer than the truck.\nNewest(minivan,     True)          ::: The minivan is the newest.\nThirdNewest(bus,    True)          ::: The bus is the third-newest.\nNewer(truck, sedan, True)          ::: The truck is newer than the sedan.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nThirdNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($d, $a, True) && Newer($e, $a, True) ::: The third-newest is newer than two and older than two.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nNewer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($b, $c, True) && Newer($b, $d, True) && Newer($c, $d, True) >>> SecondNewest($a, True) ::: The vehicle newer than three others and the newest is the second-newest.\nQuery:\nSecondNewest(convertible, True)    ::: Option A\nSecondNewest(bus,        True)    ::: Option B\nSecondNewest(minivan,    True)    ::: Option C\nSecondNewest(truck,      True)    ::: Option D\nSecondNewest(sedan,      True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nThirdNewest(x) ::: Vehicle x is the third-newest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(bus) ::: The bus.\nVehicle(minivan) ::: The minivan.\nVehicle(truck) ::: The truck.\nVehicle(sedan) ::: The sedan.\nNewer(convertible, truck) ::: The convertible is newer than the truck.\nNewest(minivan) ::: The minivan is the newest.\nThirdNewest(bus) ::: The bus is the third-newest.\nNewer(truck, sedan) ::: The truck is newer than the sedan.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y))) ::: The newest vehicle is newer than all others.\n\u2200x (ThirdNewest(x) \u2192 (\u2203y \u2203z (Newer(x, y) \u2227 Newer(x, z) \u2227 Newer(y, x) \u2227 Newer(z, x) \u2227 y \u2260 z))) ::: The third-newest is newer than two and older than two.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: \"Newer\" is transitive.\n\u2200x (SecondNewest(x) \u2194 (Newer(x, y) \u2227 Newer(x, z) \u2227 Newer(x, w) \u2227 \u00acNewest(x))) ::: The second-newest is newer than three others but not the newest.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(bus) ::: Option B\nSecondNewest(minivan) ::: Option C\nSecondNewest(truck) ::: Option D\nSecondNewest(sedan) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Bus, Minivan, Truck, Sedan])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nThirdNewest = Function([Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric\nNewest(Minivan) ::: The minivan is the newest.\nThirdNewest(Bus) ::: The bus is the third-newest.\nNewer(Convertible, Truck) ::: The convertible is newer than the truck.\nNewer(Truck, Sedan) ::: The truck is newer than the sedan.\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: The newest is newer than all others\nForAll([x:Vehicle], Implies(ThirdNewest(x), Exists([y:Vehicle, z:Vehicle], And(Newer(x, y), Newer(x, z), Newer(y, x), Newer(z, x), y != z)))) ::: Third-newest is newer than two and older than two\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: \"Newer\" is transitive\nForAll([x:Vehicle], Implies(SecondNewest(x), And(Exists([y:Vehicle, z:Vehicle, w:Vehicle], And(Newer(x, y), Newer(x, z), Newer(x, w))), Not(Newest(x)))) ::: Second-newest is newer than three but not newest\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest.\nis_valid(SecondNewest(Bus)) ::: B) The bus is the second-newest.\nis_valid(SecondNewest(Minivan)) ::: C) The minivan is the second-newest.\nis_valid(SecondNewest(Truck)) ::: D) The truck is the second-newest.\nis_valid(SecondNewest(Sedan)) ::: E) The sedan is the second-newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                 ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                    ::: Vehicle $x is the newest.\nThirdNewest($x, bool)               ::: Vehicle $x is the third-newest.\nSecondNewest($x, bool)              ::: Vehicle $x is the second-newest.\nFacts:\nVehicle(convertible, True)          ::: The convertible.\nVehicle(bus,        True)          ::: The bus.\nVehicle(minivan,    True)          ::: The minivan.\nVehicle(truck,      True)          ::: The truck.\nVehicle(sedan,      True)          ::: The sedan.\nNewer(convertible, truck, True)     ::: The convertible is newer than the truck.\nNewest(minivan,     True)          ::: The minivan is the newest.\nThirdNewest(bus,    True)          ::: The bus is the third-newest.\nNewer(truck, sedan, True)          ::: The truck is newer than the sedan.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nThirdNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($d, $a, True) && Newer($e, $a, True) ::: The third-newest is newer than two and older than two.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nNewer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($b, $c, True) && Newer($b, $d, True) && Newer($c, $d, True) >>> SecondNewest($a, True) ::: The vehicle newer than three others and the newest is the second-newest.\nQuery:\nSecondNewest(convertible, True)    ::: Option A\nSecondNewest(bus,        True)    ::: Option B\nSecondNewest(minivan,    True)    ::: Option C\nSecondNewest(truck,      True)    ::: Option D\nSecondNewest(sedan,      True)    ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nThirdNewest(x) ::: Vehicle x is the third-newest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(bus) ::: The bus.\nVehicle(minivan) ::: The minivan.\nVehicle(truck) ::: The truck.\nVehicle(sedan) ::: The sedan.\nNewer(convertible, truck) ::: The convertible is newer than the truck.\nNewest(minivan) ::: The minivan is the newest.\nThirdNewest(bus) ::: The bus is the third-newest.\nNewer(truck, sedan) ::: The truck is newer than the sedan.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y))) ::: The newest vehicle is newer than all others.\n\u2200x (ThirdNewest(x) \u2192 (\u2203y \u2203z (Newer(x, y) \u2227 Newer(x, z) \u2227 Newer(y, x) \u2227 Newer(z, x) \u2227 y \u2260 z))) ::: The third-newest is newer than two and older than two.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: \"Newer\" is transitive.\n\u2200x (SecondNewest(x) \u2194 (Newer(x, y) \u2227 Newer(x, z) \u2227 Newer(x, w) \u2227 \u00acNewest(x))) ::: The second-newest is newer than three others but not the newest.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(bus) ::: Option B\nSecondNewest(minivan) ::: Option C\nSecondNewest(truck) ::: Option D\nSecondNewest(sedan) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Bus, Minivan, Truck, Sedan])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nThirdNewest = Function([Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric\nNewest(Minivan) ::: The minivan is the newest.\nThirdNewest(Bus) ::: The bus is the third-newest.\nNewer(Convertible, Truck) ::: The convertible is newer than the truck.\nNewer(Truck, Sedan) ::: The truck is newer than the sedan.\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: The newest is newer than all others\nForAll([x:Vehicle], Implies(ThirdNewest(x), Exists([y:Vehicle, z:Vehicle], And(Newer(x, y), Newer(x, z), Newer(y, x), Newer(z, x), y != z)))) ::: Third-newest is newer than two and older than two\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: \"Newer\" is transitive\nForAll([x:Vehicle], Implies(SecondNewest(x), And(Exists([y:Vehicle, z:Vehicle, w:Vehicle], And(Newer(x, y), Newer(x, z), Newer(x, w))), Not(Newest(x)))) ::: Second-newest is newer than three but not newest\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest.\nis_valid(SecondNewest(Bus)) ::: B) The bus is the second-newest.\nis_valid(SecondNewest(Minivan)) ::: C) The minivan is the second-newest.\nis_valid(SecondNewest(Truck)) ::: D) The truck is the second-newest.\nis_valid(SecondNewest(Sedan)) ::: E) The sedan is the second-newest."
            }
        ]
    },
    {
        "id": "logical_deduction_29",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a truck, a station wagon, a motorcyle, a convertible, and a hatchback. The convertible is newer than the truck. The station wagon is newer than the hatchback. The convertible is older than the hatchback. The station wagon is the second-newest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The truck is the second-newest.",
            "B) The station wagon is the second-newest.",
            "C) The motorcyle is the second-newest.",
            "D) The convertible is the second-newest.",
            "E) The hatchback is the second-newest."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(truck, True)               ::: The truck.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(motorcycle, True)          ::: The motorcycle.\nVehicle(convertible, True)         ::: The convertible.\nVehicle(hatchback, True)           ::: The hatchback.\nNewer(convertible, truck, True)    ::: The convertible is newer than the truck.\nNewer(station_wagon, hatchback, True) ::: The station wagon is newer than the hatchback.\nOlder(convertible, hatchback, True) ::: The convertible is older than the hatchback.\nSecondNewest(station_wagon, True)  ::: The station wagon is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(truck, True)          ::: Option A\nSecondNewest(station_wagon, True)  ::: Option B\nSecondNewest(motorcycle, True)     ::: Option C\nSecondNewest(convertible, True)    ::: Option D\nSecondNewest(hatchback, True)      ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(truck) ::: The truck.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(motorcycle) ::: The motorcycle.\nVehicle(convertible) ::: The convertible.\nVehicle(hatchback) ::: The hatchback.\nNewer(convertible, truck) ::: The convertible is newer than the truck.\nNewer(station_wagon, hatchback) ::: The station wagon is newer than the hatchback.\nOlder(convertible, hatchback) ::: The convertible is older than the hatchback.\nSecondNewest(station_wagon) ::: The station wagon is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\nConclusion:\nSecondNewest(truck) ::: Option A\nSecondNewest(station_wagon) ::: Option B\nSecondNewest(motorcycle) ::: Option C\nSecondNewest(convertible) ::: Option D\nSecondNewest(hatchback) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Truck, StationWagon, Motorcycle, Convertible, Hatchback])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nNewer(Convertible, Truck) ::: The convertible is newer than the truck.\nNewer(StationWagon, Hatchback) ::: The station wagon is newer than the hatchback.\nOlder(Convertible, Hatchback) ::: The convertible is older than the hatchback.\nSecondNewest(StationWagon) ::: The station wagon is the second-newest.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: Newer/Older relationship\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Transitivity of Newer\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Transitivity of Older\n# Options\nis_valid(SecondNewest(Truck)) ::: A) The truck is the second-newest.\nis_valid(SecondNewest(StationWagon)) ::: B) The station wagon is the second-newest.\nis_valid(SecondNewest(Motorcycle)) ::: C) The motorcycle is the second-newest.\nis_valid(SecondNewest(Convertible)) ::: D) The convertible is the second-newest.\nis_valid(SecondNewest(Hatchback)) ::: E) The hatchback is the second-newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(truck, True)               ::: The truck.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(motorcycle, True)          ::: The motorcycle.\nVehicle(convertible, True)         ::: The convertible.\nVehicle(hatchback, True)           ::: The hatchback.\nNewer(convertible, truck, True)    ::: The convertible is newer than the truck.\nNewer(station_wagon, hatchback, True) ::: The station wagon is newer than the hatchback.\nOlder(convertible, hatchback, True) ::: The convertible is older than the hatchback.\nSecondNewest(station_wagon, True)  ::: The station wagon is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(truck, True)          ::: Option A\nSecondNewest(station_wagon, True)  ::: Option B\nSecondNewest(motorcycle, True)     ::: Option C\nSecondNewest(convertible, True)    ::: Option D\nSecondNewest(hatchback, True)      ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(truck) ::: The truck.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(motorcycle) ::: The motorcycle.\nVehicle(convertible) ::: The convertible.\nVehicle(hatchback) ::: The hatchback.\nNewer(convertible, truck) ::: The convertible is newer than the truck.\nNewer(station_wagon, hatchback) ::: The station wagon is newer than the hatchback.\nOlder(convertible, hatchback) ::: The convertible is older than the hatchback.\nSecondNewest(station_wagon) ::: The station wagon is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\nConclusion:\nSecondNewest(truck) ::: Option A\nSecondNewest(station_wagon) ::: Option B\nSecondNewest(motorcycle) ::: Option C\nSecondNewest(convertible) ::: Option D\nSecondNewest(hatchback) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Truck, StationWagon, Motorcycle, Convertible, Hatchback])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nNewer(Convertible, Truck) ::: The convertible is newer than the truck.\nNewer(StationWagon, Hatchback) ::: The station wagon is newer than the hatchback.\nOlder(Convertible, Hatchback) ::: The convertible is older than the hatchback.\nSecondNewest(StationWagon) ::: The station wagon is the second-newest.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: Newer/Older relationship\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Transitivity of Newer\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Transitivity of Older\n# Options\nis_valid(SecondNewest(Truck)) ::: A) The truck is the second-newest.\nis_valid(SecondNewest(StationWagon)) ::: B) The station wagon is the second-newest.\nis_valid(SecondNewest(Motorcycle)) ::: C) The motorcycle is the second-newest.\nis_valid(SecondNewest(Convertible)) ::: D) The convertible is the second-newest.\nis_valid(SecondNewest(Hatchback)) ::: E) The hatchback is the second-newest."
            }
        ]
    },
    {
        "id": "logical_deduction_30",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, apples, kiwis, cantaloupes, and mangoes. The cantaloupes are the second-cheapest. The mangoes are more expensive than the watermelons. The kiwis are less expensive than the apples. The kiwis are more expensive than the mangoes.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the cheapest.",
            "B) The apples are the cheapest.",
            "C) The kiwis are the cheapest.",
            "D) The cantaloupes are the cheapest.",
            "E) The mangoes are the cheapest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(apples, True)              ::: The apples.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(cantaloupes, True)         ::: The cantaloupes.\nFruit(mangoes, True)             ::: The mangoes.\nCheaper(cantaloupes, $x, True) && $x != cantaloupes && $x != (second cheapest) >>> Cheaper(cantaloupes, $x, True) ::: The cantaloupes are the second-cheapest.\nMoreExpensive(mangoes, watermelons, True) ::: The mangoes are more expensive than the watermelons.\nCheaper(kiwis, apples, True)     ::: The kiwis are less expensive than the apples.\nMoreExpensive(kiwis, mangoes, True) ::: The kiwis are more expensive than the mangoes.\nRules:\nCheaper($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is cheaper than $b, then $b is more expensive than $a.\nMoreExpensive($a, $b, True) >>> Cheaper($b, $a, True) ::: If $a is more expensive than $b, then $b is cheaper than $a.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nCheaper($a, apples, True) && Cheaper($a, kiwis, True) && Cheaper($a, mangoes, True) && Cheaper($a, cantaloupes, True) >>> Cheapest($a, True) ::: A fruit that is cheaper than all the other four is the cheapest.\nQuery:\nCheapest(watermelons, True)      ::: Option A\nCheapest(apples, True)           ::: Option B\nCheapest(kiwis, True)            ::: Option C\nCheapest(cantaloupes, True)      ::: Option D\nCheapest(mangoes, True)          ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nCheapest(x) ::: x is the cheapest among the five fruits.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(apples) ::: The apples.\nFruit(kiwis) ::: The kiwis.\nFruit(cantaloupes) ::: The cantaloupes.\nFruit(mangoes) ::: The mangoes.\n\u2203x (Fruit(x) \u2227 Cheaper(x, cantaloupes)) ::: The cantaloupes are the second-cheapest (there exists exactly one fruit cheaper than cantaloupes).\nCheaper(watermelons, mangoes) ::: The mangoes are more expensive than the watermelons.\nCheaper(kiwis, apples) ::: The kiwis are less expensive than the apples.\nCheaper(mangoes, kiwis) ::: The kiwis are more expensive than the mangoes.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (Cheapest(x) \u2194 (\u2200y (Fruit(y) \u2227 y \u2260 x \u2192 Cheaper(x, y)))) ::: Definition of Cheapest.\nConclusion:\nCheapest(watermelons) ::: Option A\nCheapest(apples) ::: Option B\nCheapest(kiwis) ::: Option C\nCheapest(cantaloupes) ::: Option D\nCheapest(mangoes) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Watermelons, Apples, Kiwis, Cantaloupes, Mangoes])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nExists([f:fruits], And(f != Cantaloupes, price(f) < price(Cantaloupes))) ::: The cantaloupes are the second-cheapest (exactly one fruit is cheaper)\nprice(Mangoes) > price(Watermelons) ::: The mangoes are more expensive than the watermelons\nprice(Kiwis) < price(Apples) ::: The kiwis are less expensive than the apples\nprice(Kiwis) > price(Mangoes) ::: The kiwis are more expensive than the mangoes\nForAll([f:fruits], Implies(Cheapest(f), ForAll([g:fruits], Implies(g != f, price(f) < price(g))))) ::: Definition of Cheapest\n# Options\nis_valid(ForAll([f:fruits], price(Watermelons) < price(f))) ::: A) The watermelons are the cheapest.\nis_valid(ForAll([f:fruits], price(Apples) < price(f))) ::: B) The apples are the cheapest.\nis_valid(ForAll([f:fruits], price(Kiwis) < price(f))) ::: C) The kiwis are the cheapest.\nis_valid(ForAll([f:fruits], price(Cantaloupes) < price(f))) ::: D) The cantaloupes are the cheapest.\nis_valid(ForAll([f:fruits], price(Mangoes) < price(f))) ::: E) The mangoes are the cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(apples, True)              ::: The apples.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(cantaloupes, True)         ::: The cantaloupes.\nFruit(mangoes, True)             ::: The mangoes.\nCheaper(cantaloupes, $x, True) && $x != cantaloupes && $x != (second cheapest) >>> Cheaper(cantaloupes, $x, True) ::: The cantaloupes are the second-cheapest.\nMoreExpensive(mangoes, watermelons, True) ::: The mangoes are more expensive than the watermelons.\nCheaper(kiwis, apples, True)     ::: The kiwis are less expensive than the apples.\nMoreExpensive(kiwis, mangoes, True) ::: The kiwis are more expensive than the mangoes.\nRules:\nCheaper($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is cheaper than $b, then $b is more expensive than $a.\nMoreExpensive($a, $b, True) >>> Cheaper($b, $a, True) ::: If $a is more expensive than $b, then $b is cheaper than $a.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nCheaper($a, apples, True) && Cheaper($a, kiwis, True) && Cheaper($a, mangoes, True) && Cheaper($a, cantaloupes, True) >>> Cheapest($a, True) ::: A fruit that is cheaper than all the other four is the cheapest.\nQuery:\nCheapest(watermelons, True)      ::: Option A\nCheapest(apples, True)           ::: Option B\nCheapest(kiwis, True)            ::: Option C\nCheapest(cantaloupes, True)      ::: Option D\nCheapest(mangoes, True)          ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nCheapest(x) ::: x is the cheapest among the five fruits.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(apples) ::: The apples.\nFruit(kiwis) ::: The kiwis.\nFruit(cantaloupes) ::: The cantaloupes.\nFruit(mangoes) ::: The mangoes.\n\u2203x (Fruit(x) \u2227 Cheaper(x, cantaloupes)) ::: The cantaloupes are the second-cheapest (there exists exactly one fruit cheaper than cantaloupes).\nCheaper(watermelons, mangoes) ::: The mangoes are more expensive than the watermelons.\nCheaper(kiwis, apples) ::: The kiwis are less expensive than the apples.\nCheaper(mangoes, kiwis) ::: The kiwis are more expensive than the mangoes.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (Cheapest(x) \u2194 (\u2200y (Fruit(y) \u2227 y \u2260 x \u2192 Cheaper(x, y)))) ::: Definition of Cheapest.\nConclusion:\nCheapest(watermelons) ::: Option A\nCheapest(apples) ::: Option B\nCheapest(kiwis) ::: Option C\nCheapest(cantaloupes) ::: Option D\nCheapest(mangoes) ::: Option E",
                "SAT": "# Declarations\nfruits = EnumSort([Watermelons, Apples, Kiwis, Cantaloupes, Mangoes])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nExists([f:fruits], And(f != Cantaloupes, price(f) < price(Cantaloupes))) ::: The cantaloupes are the second-cheapest (exactly one fruit is cheaper)\nprice(Mangoes) > price(Watermelons) ::: The mangoes are more expensive than the watermelons\nprice(Kiwis) < price(Apples) ::: The kiwis are less expensive than the apples\nprice(Kiwis) > price(Mangoes) ::: The kiwis are more expensive than the mangoes\nForAll([f:fruits], Implies(Cheapest(f), ForAll([g:fruits], Implies(g != f, price(f) < price(g))))) ::: Definition of Cheapest\n# Options\nis_valid(ForAll([f:fruits], price(Watermelons) < price(f))) ::: A) The watermelons are the cheapest.\nis_valid(ForAll([f:fruits], price(Apples) < price(f))) ::: B) The apples are the cheapest.\nis_valid(ForAll([f:fruits], price(Kiwis) < price(f))) ::: C) The kiwis are the cheapest.\nis_valid(ForAll([f:fruits], price(Cantaloupes) < price(f))) ::: D) The cantaloupes are the cheapest.\nis_valid(ForAll([f:fruits], price(Mangoes) < price(f))) ::: E) The mangoes are the cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_31",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a cardinal, a robin, a hummingbird, and a crow. The hummingbird is to the left of the owl. The hummingbird is to the right of the cardinal. The crow is to the left of the robin. The owl is to the left of the crow.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the leftmost.",
            "B) The cardinal is the leftmost.",
            "C) The robin is the leftmost.",
            "D) The hummingbird is the leftmost.",
            "E) The crow is the leftmost."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(cardinal, True)            ::: The cardinal.\nBird(robin, True)               ::: The robin.\nBird(hummingbird, True)         ::: The hummingbird.\nBird(crow, True)                ::: The crow.\nLeftOf(hummingbird, owl, True)  ::: The hummingbird is to the left of the owl.\nRightOf(hummingbird, cardinal, True) ::: The hummingbird is to the right of the cardinal.\nLeftOf(crow, robin, True)       ::: The crow is to the left of the robin.\nLeftOf(owl, crow, True)         ::: The owl is to the left of the crow.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nLeftOf($a, cardinal, True) && LeftOf($a, hummingbird, True) && LeftOf($a, owl, True) && LeftOf($a, crow, True) >>> LeftMost($a, True) ::: A bird that is to the left of all the other four is the left-most bird.\nQuery:\nLeftMost(owl, True)             ::: Option A\nLeftMost(cardinal, True)        ::: Option B\nLeftMost(robin, True)           ::: Option C\nLeftMost(hummingbird, True)     ::: Option D\nLeftMost(crow, True)            ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nPremises:\nBird(owl) ::: The owl.\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(hummingbird) ::: The hummingbird.\nBird(crow) ::: The crow.\nLeftOf(hummingbird, owl) ::: The hummingbird is to the left of the owl.\nRightOf(hummingbird, cardinal) ::: The hummingbird is to the right of the cardinal.\nLeftOf(crow, robin) ::: The crow is to the left of the robin.\nLeftOf(owl, crow) ::: The owl is to the left of the crow.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (LeftOf(x, cardinal) \u2227 LeftOf(x, hummingbird) \u2227 LeftOf(x, owl) \u2227 LeftOf(x, crow) \u2192 LeftMost(x)) ::: A bird that is to the left of all the other four is the left-most bird.\nConclusion:\nLeftMost(owl) ::: Option A\nLeftMost(cardinal) ::: Option B\nLeftMost(robin) ::: Option C\nLeftMost(hummingbird) ::: Option D\nLeftMost(crow) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Owl, Cardinal, Robin, Hummingbird, Crow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Hummingbird) < pos(Owl) ::: The hummingbird is to the left of the owl.\npos(Hummingbird) > pos(Cardinal) ::: The hummingbird is to the right of the cardinal.\npos(Crow) < pos(Robin) ::: The crow is to the left of the robin.\npos(Owl) < pos(Crow) ::: The owl is to the left of the crow.\n# Options\nis_valid(pos(Owl) == 1) ::: A) The owl is the leftmost.\nis_valid(pos(Cardinal) == 1) ::: B) The cardinal is the leftmost.\nis_valid(pos(Robin) == 1) ::: C) The robin is the leftmost.\nis_valid(pos(Hummingbird) == 1) ::: D) The hummingbird is the leftmost.\nis_valid(pos(Crow) == 1) ::: E) The crow is the leftmost."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(cardinal, True)            ::: The cardinal.\nBird(robin, True)               ::: The robin.\nBird(hummingbird, True)         ::: The hummingbird.\nBird(crow, True)                ::: The crow.\nLeftOf(hummingbird, owl, True)  ::: The hummingbird is to the left of the owl.\nRightOf(hummingbird, cardinal, True) ::: The hummingbird is to the right of the cardinal.\nLeftOf(crow, robin, True)       ::: The crow is to the left of the robin.\nLeftOf(owl, crow, True)         ::: The owl is to the left of the crow.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nLeftOf($a, cardinal, True) && LeftOf($a, hummingbird, True) && LeftOf($a, owl, True) && LeftOf($a, crow, True) >>> LeftMost($a, True) ::: A bird that is to the left of all the other four is the left-most bird.\nQuery:\nLeftMost(owl, True)             ::: Option A\nLeftMost(cardinal, True)        ::: Option B\nLeftMost(robin, True)           ::: Option C\nLeftMost(hummingbird, True)     ::: Option D\nLeftMost(crow, True)            ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nPremises:\nBird(owl) ::: The owl.\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(hummingbird) ::: The hummingbird.\nBird(crow) ::: The crow.\nLeftOf(hummingbird, owl) ::: The hummingbird is to the left of the owl.\nRightOf(hummingbird, cardinal) ::: The hummingbird is to the right of the cardinal.\nLeftOf(crow, robin) ::: The crow is to the left of the robin.\nLeftOf(owl, crow) ::: The owl is to the left of the crow.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (LeftOf(x, cardinal) \u2227 LeftOf(x, hummingbird) \u2227 LeftOf(x, owl) \u2227 LeftOf(x, crow) \u2192 LeftMost(x)) ::: A bird that is to the left of all the other four is the left-most bird.\nConclusion:\nLeftMost(owl) ::: Option A\nLeftMost(cardinal) ::: Option B\nLeftMost(robin) ::: Option C\nLeftMost(hummingbird) ::: Option D\nLeftMost(crow) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Owl, Cardinal, Robin, Hummingbird, Crow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Hummingbird) < pos(Owl) ::: The hummingbird is to the left of the owl.\npos(Hummingbird) > pos(Cardinal) ::: The hummingbird is to the right of the cardinal.\npos(Crow) < pos(Robin) ::: The crow is to the left of the robin.\npos(Owl) < pos(Crow) ::: The owl is to the left of the crow.\n# Options\nis_valid(pos(Owl) == 1) ::: A) The owl is the leftmost.\nis_valid(pos(Cardinal) == 1) ::: B) The cardinal is the leftmost.\nis_valid(pos(Robin) == 1) ::: C) The robin is the leftmost.\nis_valid(pos(Hummingbird) == 1) ::: D) The hummingbird is the leftmost.\nis_valid(pos(Crow) == 1) ::: E) The crow is the leftmost."
            }
        ]
    },
    {
        "id": "logical_deduction_32",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn a golf tournament, there were five golfers: Rob, Eve, Eli, Amy, and Dan. Dan finished second. Amy finished below Eve. Dan finished above Eve. Amy finished above Eli.",
        "question": "Which of the following is true?",
        "options": [
            "A) Rob finished third.",
            "B) Eve finished third.",
            "C) Eli finished third.",
            "D) Amy finished third.",
            "E) Dan finished third."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedAbove($x, $y, bool)       ::: Golfer $x finished above golfer $y.\nFinishedBelow($x, $y, bool)       ::: Golfer $x finished below golfer $y.\nFinishedAt($x, $n, bool)          ::: Golfer $x finished at position $n.\nFacts:\nGolfer(Rob, True)                 ::: Rob is one of the golfers.\nGolfer(Eve, True)                 ::: Eve is one of the golfers.\nGolfer(Eli, True)                 ::: Eli is one of the golfers.\nGolfer(Amy, True)                 ::: Amy is one of the golfers.\nGolfer(Dan, True)                 ::: Dan is one of the golfers.\nFinishedAt(Dan, 2, True)          ::: Dan finished second.\nFinishedBelow(Amy, Eve, True)     ::: Amy finished below Eve.\nFinishedAbove(Dan, Eve, True)     ::: Dan finished above Eve.\nFinishedAbove(Amy, Eli, True)     ::: Amy finished above Eli.\nRules:\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAbove($a, $b, True) && FinishedAbove($b, $c, True) >>> FinishedAbove($a, $c, True) ::: FinishedAbove is transitive.\nFinishedBelow($a, $b, True) && FinishedBelow($b, $c, True) >>> FinishedBelow($a, $c, True) ::: FinishedBelow is transitive.\nFinishedAt($a, $n, True) && FinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) && !FinishedAt($b, $n, True) ::: If $a finished at position $n and above $b, then $b finished below $a and not at position $n.\nQuery:\nFinishedAt(Rob, 3, True)          ::: Option A\nFinishedAt(Eve, 3, True)          ::: Option B\nFinishedAt(Eli, 3, True)          ::: Option C\nFinishedAt(Amy, 3, True)          ::: Option D\nFinishedAt(Dan, 3, True)          ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedAbove(x, y) ::: Golfer x finished above golfer y.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedAt(x, n) ::: Golfer x finished at position n.\nPremises:\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Amy) ::: Amy is one of the golfers.\nGolfer(Dan) ::: Dan is one of the golfers.\nFinishedAt(Dan, 2) ::: Dan finished second.\nFinishedBelow(Amy, Eve) ::: Amy finished below Eve.\nFinishedAbove(Dan, Eve) ::: Dan finished above Eve.\nFinishedAbove(Amy, Eli) ::: Amy finished above Eli.\n\u2200x \u2200y (FinishedAbove(x, y) \u2194 FinishedBelow(y, x)) ::: FinishedAbove and FinishedBelow are inverses.\n\u2200x \u2200y \u2200z (FinishedAbove(x, y) \u2227 FinishedAbove(y, z) \u2192 FinishedAbove(x, z)) ::: FinishedAbove is transitive.\n\u2200x \u2200y \u2200z (FinishedBelow(x, y) \u2227 FinishedBelow(y, z) \u2192 FinishedBelow(x, z)) ::: FinishedBelow is transitive.\n\u2200x \u2200y \u2200n (FinishedAt(x, n) \u2227 FinishedAbove(x, y) \u2192 FinishedBelow(y, x) \u2227 \u00acFinishedAt(y, n)) ::: If x finished at position n and above y, then y finished below x and not at position n.\n\u2200x (Golfer(x) \u2192 (FinishedAt(x, 1) \u2228 FinishedAt(x, 2) \u2228 FinishedAt(x, 3) \u2228 FinishedAt(x, 4) \u2228 FinishedAt(x, 5))) ::: Each golfer has a unique finishing position.\n\u2200x \u2200y \u2200n (FinishedAt(x, n) \u2227 FinishedAt(y, n) \u2192 x = y) ::: No two golfers can finish at the same position.\nConclusion:\nFinishedAt(Rob, 3) ::: Option A\nFinishedAt(Eve, 3) ::: Option B\nFinishedAt(Eli, 3) ::: Option C\nFinishedAt(Amy, 3) ::: Option D\nFinishedAt(Dan, 3) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nGolfers = EnumSort([Rob, Eve, Eli, Amy, Dan])\nPositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [Positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Dan) == 2 ::: Dan finished second\npos(Amy) > pos(Eve) ::: Amy finished below Eve\npos(Dan) < pos(Eve) ::: Dan finished above Eve\npos(Amy) < pos(Eli) ::: Amy finished above Eli\n# Options\nis_valid(pos(Rob) == 3) ::: A) Rob finished third\nis_valid(pos(Eve) == 3) ::: B) Eve finished third\nis_valid(pos(Eli) == 3) ::: C) Eli finished third\nis_valid(pos(Amy) == 3) ::: D) Amy finished third\nis_valid(pos(Dan) == 3) ::: E) Dan finished third"
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedAbove($x, $y, bool)       ::: Golfer $x finished above golfer $y.\nFinishedBelow($x, $y, bool)       ::: Golfer $x finished below golfer $y.\nFinishedAt($x, $n, bool)          ::: Golfer $x finished at position $n.\nFacts:\nGolfer(Rob, True)                 ::: Rob is one of the golfers.\nGolfer(Eve, True)                 ::: Eve is one of the golfers.\nGolfer(Eli, True)                 ::: Eli is one of the golfers.\nGolfer(Amy, True)                 ::: Amy is one of the golfers.\nGolfer(Dan, True)                 ::: Dan is one of the golfers.\nFinishedAt(Dan, 2, True)          ::: Dan finished second.\nFinishedBelow(Amy, Eve, True)     ::: Amy finished below Eve.\nFinishedAbove(Dan, Eve, True)     ::: Dan finished above Eve.\nFinishedAbove(Amy, Eli, True)     ::: Amy finished above Eli.\nRules:\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAbove($a, $b, True) && FinishedAbove($b, $c, True) >>> FinishedAbove($a, $c, True) ::: FinishedAbove is transitive.\nFinishedBelow($a, $b, True) && FinishedBelow($b, $c, True) >>> FinishedBelow($a, $c, True) ::: FinishedBelow is transitive.\nFinishedAt($a, $n, True) && FinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) && !FinishedAt($b, $n, True) ::: If $a finished at position $n and above $b, then $b finished below $a and not at position $n.\nQuery:\nFinishedAt(Rob, 3, True)          ::: Option A\nFinishedAt(Eve, 3, True)          ::: Option B\nFinishedAt(Eli, 3, True)          ::: Option C\nFinishedAt(Amy, 3, True)          ::: Option D\nFinishedAt(Dan, 3, True)          ::: Option E",
                "FOL": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedAbove(x, y) ::: Golfer x finished above golfer y.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedAt(x, n) ::: Golfer x finished at position n.\nPremises:\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Amy) ::: Amy is one of the golfers.\nGolfer(Dan) ::: Dan is one of the golfers.\nFinishedAt(Dan, 2) ::: Dan finished second.\nFinishedBelow(Amy, Eve) ::: Amy finished below Eve.\nFinishedAbove(Dan, Eve) ::: Dan finished above Eve.\nFinishedAbove(Amy, Eli) ::: Amy finished above Eli.\n\u2200x \u2200y (FinishedAbove(x, y) \u2194 FinishedBelow(y, x)) ::: FinishedAbove and FinishedBelow are inverses.\n\u2200x \u2200y \u2200z (FinishedAbove(x, y) \u2227 FinishedAbove(y, z) \u2192 FinishedAbove(x, z)) ::: FinishedAbove is transitive.\n\u2200x \u2200y \u2200z (FinishedBelow(x, y) \u2227 FinishedBelow(y, z) \u2192 FinishedBelow(x, z)) ::: FinishedBelow is transitive.\n\u2200x \u2200y \u2200n (FinishedAt(x, n) \u2227 FinishedAbove(x, y) \u2192 FinishedBelow(y, x) \u2227 \u00acFinishedAt(y, n)) ::: If x finished at position n and above y, then y finished below x and not at position n.\n\u2200x (Golfer(x) \u2192 (FinishedAt(x, 1) \u2228 FinishedAt(x, 2) \u2228 FinishedAt(x, 3) \u2228 FinishedAt(x, 4) \u2228 FinishedAt(x, 5))) ::: Each golfer has a unique finishing position.\n\u2200x \u2200y \u2200n (FinishedAt(x, n) \u2227 FinishedAt(y, n) \u2192 x = y) ::: No two golfers can finish at the same position.\nConclusion:\nFinishedAt(Rob, 3) ::: Option A\nFinishedAt(Eve, 3) ::: Option B\nFinishedAt(Eli, 3) ::: Option C\nFinishedAt(Amy, 3) ::: Option D\nFinishedAt(Dan, 3) ::: Option E",
                "SAT": "# Declarations\nGolfers = EnumSort([Rob, Eve, Eli, Amy, Dan])\nPositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [Positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Dan) == 2 ::: Dan finished second\npos(Amy) > pos(Eve) ::: Amy finished below Eve\npos(Dan) < pos(Eve) ::: Dan finished above Eve\npos(Amy) < pos(Eli) ::: Amy finished above Eli\n# Options\nis_valid(pos(Rob) == 3) ::: A) Rob finished third\nis_valid(pos(Eve) == 3) ::: B) Eve finished third\nis_valid(pos(Eli) == 3) ::: C) Eli finished third\nis_valid(pos(Amy) == 3) ::: D) Amy finished third\nis_valid(pos(Dan) == 3) ::: E) Dan finished third"
            }
        ]
    },
    {
        "id": "logical_deduction_33",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a gray book, a red book, a yellow book, a blue book, and an orange book. The gray book is to the right of the yellow book. The orange book is to the right of the red book. The blue book is the rightmost. The gray book is to the left of the red book.",
        "question": "Which of the following is true?",
        "options": [
            "A) The gray book is the leftmost.",
            "B) The red book is the leftmost.",
            "C) The yellow book is the leftmost.",
            "D) The blue book is the leftmost.",
            "E) The orange book is the leftmost."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nLeftMost($x, bool)              ::: Book $x is the left\u2011most book on the shelf.\nFacts:\nBook(gray,   True)              ::: The gray book.\nBook(red,    True)              ::: The red book.\nBook(yellow, True)              ::: The yellow book.\nBook(blue,   True)              ::: The blue book.\nBook(orange, True)              ::: The orange book.\nRightOf(gray, yellow, True)     ::: The gray book is to the right of the yellow book.\nRightOf(orange, red, True)      ::: The orange book is to the right of the red book.\nRightMost(blue, True)           ::: The blue book is the rightmost.\nLeftOf(gray, red, True)         ::: The gray book is to the left of the red book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left\u2011of is transitive.\nLeftOf($a, red, True) && LeftOf($a, gray, True) && LeftOf($a, orange, True) && LeftOf($a, blue, True) >>> LeftMost($a, True) ::: A book that is to the left of all the other four is the left\u2011most book.\nQuery:\nLeftMost(gray,   True)          ::: Option A\nLeftMost(red,    True)          ::: Option B\nLeftMost(yellow, True)          ::: Option C\nLeftMost(blue,   True)          ::: Option D\nLeftMost(orange, True)          ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nLeftMost(x) ::: Book x is the left-most book on the shelf.\nPremises:\nBook(gray) ::: The gray book.\nBook(red) ::: The red book.\nBook(yellow) ::: The yellow book.\nBook(blue) ::: The blue book.\nBook(orange) ::: The orange book.\nRightOf(gray, yellow) ::: The gray book is to the right of the yellow book.\nRightOf(orange, red) ::: The orange book is to the right of the red book.\nRightMost(blue) ::: The blue book is the rightmost.\nLeftOf(gray, red) ::: The gray book is to the left of the red book.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: RightOf is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x (LeftOf(x, red) \u2227 LeftOf(x, gray) \u2227 LeftOf(x, orange) \u2227 LeftOf(x, blue) \u2192 LeftMost(x)) ::: A book to the left of all others is leftmost.\nConclusion:\nLeftMost(gray) ::: Option A\nLeftMost(red) ::: Option B\nLeftMost(yellow) ::: Option C\nLeftMost(blue) ::: Option D\nLeftMost(orange) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Gray, Red, Yellow, Blue, Orange])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Gray) > pos(Yellow) ::: The gray book is to the right of the yellow book.\npos(Orange) > pos(Red) ::: The orange book is to the right of the red book.\npos(Blue) == 5 ::: The blue book is the rightmost.\npos(Gray) < pos(Red) ::: The gray book is to the left of the red book.\n# Options\nis_valid(pos(Gray) == 1) ::: A) The gray book is the leftmost.\nis_valid(pos(Red) == 1) ::: B) The red book is the leftmost.\nis_valid(pos(Yellow) == 1) ::: C) The yellow book is the leftmost.\nis_valid(pos(Blue) == 1) ::: D) The blue book is the leftmost.\nis_valid(pos(Orange) == 1) ::: E) The orange book is the leftmost."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nLeftMost($x, bool)              ::: Book $x is the left\u2011most book on the shelf.\nFacts:\nBook(gray,   True)              ::: The gray book.\nBook(red,    True)              ::: The red book.\nBook(yellow, True)              ::: The yellow book.\nBook(blue,   True)              ::: The blue book.\nBook(orange, True)              ::: The orange book.\nRightOf(gray, yellow, True)     ::: The gray book is to the right of the yellow book.\nRightOf(orange, red, True)      ::: The orange book is to the right of the red book.\nRightMost(blue, True)           ::: The blue book is the rightmost.\nLeftOf(gray, red, True)         ::: The gray book is to the left of the red book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left\u2011of is transitive.\nLeftOf($a, red, True) && LeftOf($a, gray, True) && LeftOf($a, orange, True) && LeftOf($a, blue, True) >>> LeftMost($a, True) ::: A book that is to the left of all the other four is the left\u2011most book.\nQuery:\nLeftMost(gray,   True)          ::: Option A\nLeftMost(red,    True)          ::: Option B\nLeftMost(yellow, True)          ::: Option C\nLeftMost(blue,   True)          ::: Option D\nLeftMost(orange, True)          ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nLeftMost(x) ::: Book x is the left-most book on the shelf.\nPremises:\nBook(gray) ::: The gray book.\nBook(red) ::: The red book.\nBook(yellow) ::: The yellow book.\nBook(blue) ::: The blue book.\nBook(orange) ::: The orange book.\nRightOf(gray, yellow) ::: The gray book is to the right of the yellow book.\nRightOf(orange, red) ::: The orange book is to the right of the red book.\nRightMost(blue) ::: The blue book is the rightmost.\nLeftOf(gray, red) ::: The gray book is to the left of the red book.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: RightOf is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x (LeftOf(x, red) \u2227 LeftOf(x, gray) \u2227 LeftOf(x, orange) \u2227 LeftOf(x, blue) \u2192 LeftMost(x)) ::: A book to the left of all others is leftmost.\nConclusion:\nLeftMost(gray) ::: Option A\nLeftMost(red) ::: Option B\nLeftMost(yellow) ::: Option C\nLeftMost(blue) ::: Option D\nLeftMost(orange) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Gray, Red, Yellow, Blue, Orange])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Gray) > pos(Yellow) ::: The gray book is to the right of the yellow book.\npos(Orange) > pos(Red) ::: The orange book is to the right of the red book.\npos(Blue) == 5 ::: The blue book is the rightmost.\npos(Gray) < pos(Red) ::: The gray book is to the left of the red book.\n# Options\nis_valid(pos(Gray) == 1) ::: A) The gray book is the leftmost.\nis_valid(pos(Red) == 1) ::: B) The red book is the leftmost.\nis_valid(pos(Yellow) == 1) ::: C) The yellow book is the leftmost.\nis_valid(pos(Blue) == 1) ::: D) The blue book is the leftmost.\nis_valid(pos(Orange) == 1) ::: E) The orange book is the leftmost."
            }
        ]
    },
    {
        "id": "logical_deduction_34",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a blue jay, a robin, a cardinal, a hawk, and a falcon. The blue jay is the rightmost. The robin is to the right of the falcon. The cardinal is to the left of the hawk. The falcon is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The blue jay is the second from the right.",
            "B) The robin is the second from the right.",
            "C) The cardinal is the second from the right.",
            "D) The hawk is the second from the right.",
            "E) The falcon is the second from the right."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(blue_jay, True)            ::: The blue jay.\nBird(robin, True)               ::: The robin.\nBird(cardinal, True)            ::: The cardinal.\nBird(hawk, True)                ::: The hawk.\nBird(falcon, True)              ::: The falcon.\nRightMost(blue_jay, True)       ::: The blue jay is the rightmost.\nRightOf(robin, falcon, True)    ::: The robin is to the right of the falcon.\nLeftOf(cardinal, hawk, True)    ::: The cardinal is to the left of the hawk.\nRightOf(falcon, hawk, True)     ::: The falcon is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, robin, True) && RightOf($b, cardinal, True) && RightOf($b, hawk, True) && RightOf($b, falcon, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, robin, True) && RightOf($s, cardinal, True) && RightOf($s, hawk, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the right-most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(blue_jay, True) ::: Option A\nSecondFromRight(robin, True)    ::: Option B\nSecondFromRight(cardinal, True) ::: Option C\nSecondFromRight(hawk, True)     ::: Option D\nSecondFromRight(falcon, True)   ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(blue_jay) ::: The blue jay.\nBird(robin) ::: The robin.\nBird(cardinal) ::: The cardinal.\nBird(hawk) ::: The hawk.\nBird(falcon) ::: The falcon.\nRightMost(blue_jay) ::: The blue jay is the rightmost.\nRightOf(robin, falcon) ::: The robin is to the right of the falcon.\nLeftOf(cardinal, hawk) ::: The cardinal is to the left of the hawk.\nRightOf(falcon, hawk) ::: The falcon is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, robin) \u2227 RightOf(x, cardinal) \u2227 RightOf(x, hawk) \u2227 RightOf(x, falcon) \u2192 RightMost(x)) ::: A bird to the right of all others is right-most.\n\u2200x (RightMost(blue_jay) \u2227 RightOf(blue_jay, x) \u2227 RightOf(x, robin) \u2227 RightOf(x, cardinal) \u2227 RightOf(x, hawk) \u2192 SecondFromRight(x)) ::: The bird immediately left of right-most is second from right.\nConclusion:\nSecondFromRight(blue_jay) ::: Option A\nSecondFromRight(robin) ::: Option B\nSecondFromRight(cardinal) ::: Option C\nSecondFromRight(hawk) ::: Option D\nSecondFromRight(falcon) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([BlueJay, Robin, Cardinal, Hawk, Falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(BlueJay) == 5 ::: The blue jay is the rightmost.\npos(Robin) > pos(Falcon) ::: The robin is to the right of the falcon.\npos(Cardinal) < pos(Hawk) ::: The cardinal is to the left of the hawk.\npos(Falcon) > pos(Hawk) ::: The falcon is to the right of the hawk.\n# Options\nis_valid(pos(BlueJay) == 4) ::: A) The blue jay is the second from the right.\nis_valid(pos(Robin) == 4) ::: B) The robin is the second from the right.\nis_valid(pos(Cardinal) == 4) ::: C) The cardinal is the second from the right.\nis_valid(pos(Hawk) == 4) ::: D) The hawk is the second from the right.\nis_valid(pos(Falcon) == 4) ::: E) The falcon is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(blue_jay, True)            ::: The blue jay.\nBird(robin, True)               ::: The robin.\nBird(cardinal, True)            ::: The cardinal.\nBird(hawk, True)                ::: The hawk.\nBird(falcon, True)              ::: The falcon.\nRightMost(blue_jay, True)       ::: The blue jay is the rightmost.\nRightOf(robin, falcon, True)    ::: The robin is to the right of the falcon.\nLeftOf(cardinal, hawk, True)    ::: The cardinal is to the left of the hawk.\nRightOf(falcon, hawk, True)     ::: The falcon is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, robin, True) && RightOf($b, cardinal, True) && RightOf($b, hawk, True) && RightOf($b, falcon, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, robin, True) && RightOf($s, cardinal, True) && RightOf($s, hawk, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the right-most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(blue_jay, True) ::: Option A\nSecondFromRight(robin, True)    ::: Option B\nSecondFromRight(cardinal, True) ::: Option C\nSecondFromRight(hawk, True)     ::: Option D\nSecondFromRight(falcon, True)   ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(blue_jay) ::: The blue jay.\nBird(robin) ::: The robin.\nBird(cardinal) ::: The cardinal.\nBird(hawk) ::: The hawk.\nBird(falcon) ::: The falcon.\nRightMost(blue_jay) ::: The blue jay is the rightmost.\nRightOf(robin, falcon) ::: The robin is to the right of the falcon.\nLeftOf(cardinal, hawk) ::: The cardinal is to the left of the hawk.\nRightOf(falcon, hawk) ::: The falcon is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, robin) \u2227 RightOf(x, cardinal) \u2227 RightOf(x, hawk) \u2227 RightOf(x, falcon) \u2192 RightMost(x)) ::: A bird to the right of all others is right-most.\n\u2200x (RightMost(blue_jay) \u2227 RightOf(blue_jay, x) \u2227 RightOf(x, robin) \u2227 RightOf(x, cardinal) \u2227 RightOf(x, hawk) \u2192 SecondFromRight(x)) ::: The bird immediately left of right-most is second from right.\nConclusion:\nSecondFromRight(blue_jay) ::: Option A\nSecondFromRight(robin) ::: Option B\nSecondFromRight(cardinal) ::: Option C\nSecondFromRight(hawk) ::: Option D\nSecondFromRight(falcon) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([BlueJay, Robin, Cardinal, Hawk, Falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(BlueJay) == 5 ::: The blue jay is the rightmost.\npos(Robin) > pos(Falcon) ::: The robin is to the right of the falcon.\npos(Cardinal) < pos(Hawk) ::: The cardinal is to the left of the hawk.\npos(Falcon) > pos(Hawk) ::: The falcon is to the right of the hawk.\n# Options\nis_valid(pos(BlueJay) == 4) ::: A) The blue jay is the second from the right.\nis_valid(pos(Robin) == 4) ::: B) The robin is the second from the right.\nis_valid(pos(Cardinal) == 4) ::: C) The cardinal is the second from the right.\nis_valid(pos(Hawk) == 4) ::: D) The hawk is the second from the right.\nis_valid(pos(Falcon) == 4) ::: E) The falcon is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_35",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a white book, an orange book, a yellow book, a blue book, and a red book. The yellow book is to the left of the white book. The red book is to the right of the blue book. The yellow book is to the right of the orange book. The blue book is to the right of the white book.",
        "question": "Which of the following is true?",
        "options": [
            "A) The white book is the second from the right.",
            "B) The orange book is the second from the right.",
            "C) The yellow book is the second from the right.",
            "D) The blue book is the second from the right.",
            "E) The red book is the second from the right."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(white,  True)              ::: The white book.\nBook(orange, True)              ::: The orange book.\nBook(yellow, True)              ::: The yellow book.\nBook(blue,   True)              ::: The blue book.\nBook(red,    True)              ::: The red book.\nLeftOf(yellow, white,  True)    ::: The yellow book is to the left of the white book.\nRightOf(red,   blue,   True)    ::: The red book is to the right of the blue book.\nRightOf(yellow, orange, True)   ::: The yellow book is to the right of the orange book.\nRightOf(blue,  white,  True)    ::: The blue book is to the right of the white book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($b, white,  True) && RightOf($b, orange, True) && RightOf($b, yellow, True) && RightOf($b, blue,   True)  >>> RightMost($b, True) ::: A book that is to the right of all the other four is the right\u2011most book.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, white,  True) && RightOf($s, orange, True) && RightOf($s, yellow, True) >>> SecondFromRight($s, True) ::: The book immediately left of the right\u2011most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(white,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(yellow, True)  ::: Option C\nSecondFromRight(blue,   True)  ::: Option D\nSecondFromRight(red,    True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(white) ::: The white book.\nBook(orange) ::: The orange book.\nBook(yellow) ::: The yellow book.\nBook(blue) ::: The blue book.\nBook(red) ::: The red book.\nLeftOf(yellow, white) ::: The yellow book is to the left of the white book.\nRightOf(red, blue) ::: The red book is to the right of the blue book.\nRightOf(yellow, orange) ::: The yellow book is to the right of the orange book.\nRightOf(blue, white) ::: The blue book is to the right of the white book.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, white) \u2227 RightOf(x, orange) \u2227 RightOf(x, yellow) \u2227 RightOf(x, blue) \u2192 RightMost(x)) ::: A book that is to the right of all the other four is the right-most book.\n\u2200x \u2200y (RightMost(y) \u2227 RightOf(y, x) \u2227 RightOf(x, white) \u2227 RightOf(x, orange) \u2227 RightOf(x, yellow) \u2192 SecondFromRight(x)) ::: The book immediately left of the right-most\u2014and still right of the remaining three\u2014is second from the right.\nConclusion:\nSecondFromRight(white) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(yellow) ::: Option C\nSecondFromRight(blue) ::: Option D\nSecondFromRight(red) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([White, Orange, Yellow, Blue, Red])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Yellow) < pos(White) ::: The yellow book is to the left of the white book.\npos(Red) > pos(Blue) ::: The red book is to the right of the blue book.\npos(Yellow) > pos(Orange) ::: The yellow book is to the right of the orange book.\npos(Blue) > pos(White) ::: The blue book is to the right of the white book.\n# Options\nis_valid(pos(White) == 4) ::: A) The white book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Yellow) == 4) ::: C) The yellow book is the second from the right.\nis_valid(pos(Blue) == 4) ::: D) The blue book is the second from the right.\nis_valid(pos(Red) == 4) ::: E) The red book is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(white,  True)              ::: The white book.\nBook(orange, True)              ::: The orange book.\nBook(yellow, True)              ::: The yellow book.\nBook(blue,   True)              ::: The blue book.\nBook(red,    True)              ::: The red book.\nLeftOf(yellow, white,  True)    ::: The yellow book is to the left of the white book.\nRightOf(red,   blue,   True)    ::: The red book is to the right of the blue book.\nRightOf(yellow, orange, True)   ::: The yellow book is to the right of the orange book.\nRightOf(blue,  white,  True)    ::: The blue book is to the right of the white book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($b, white,  True) && RightOf($b, orange, True) && RightOf($b, yellow, True) && RightOf($b, blue,   True)  >>> RightMost($b, True) ::: A book that is to the right of all the other four is the right\u2011most book.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, white,  True) && RightOf($s, orange, True) && RightOf($s, yellow, True) >>> SecondFromRight($s, True) ::: The book immediately left of the right\u2011most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(white,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(yellow, True)  ::: Option C\nSecondFromRight(blue,   True)  ::: Option D\nSecondFromRight(red,    True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(white) ::: The white book.\nBook(orange) ::: The orange book.\nBook(yellow) ::: The yellow book.\nBook(blue) ::: The blue book.\nBook(red) ::: The red book.\nLeftOf(yellow, white) ::: The yellow book is to the left of the white book.\nRightOf(red, blue) ::: The red book is to the right of the blue book.\nRightOf(yellow, orange) ::: The yellow book is to the right of the orange book.\nRightOf(blue, white) ::: The blue book is to the right of the white book.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, white) \u2227 RightOf(x, orange) \u2227 RightOf(x, yellow) \u2227 RightOf(x, blue) \u2192 RightMost(x)) ::: A book that is to the right of all the other four is the right-most book.\n\u2200x \u2200y (RightMost(y) \u2227 RightOf(y, x) \u2227 RightOf(x, white) \u2227 RightOf(x, orange) \u2227 RightOf(x, yellow) \u2192 SecondFromRight(x)) ::: The book immediately left of the right-most\u2014and still right of the remaining three\u2014is second from the right.\nConclusion:\nSecondFromRight(white) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(yellow) ::: Option C\nSecondFromRight(blue) ::: Option D\nSecondFromRight(red) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([White, Orange, Yellow, Blue, Red])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Yellow) < pos(White) ::: The yellow book is to the left of the white book.\npos(Red) > pos(Blue) ::: The red book is to the right of the blue book.\npos(Yellow) > pos(Orange) ::: The yellow book is to the right of the orange book.\npos(Blue) > pos(White) ::: The blue book is to the right of the white book.\n# Options\nis_valid(pos(White) == 4) ::: A) The white book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Yellow) == 4) ::: C) The yellow book is the second from the right.\nis_valid(pos(Blue) == 4) ::: D) The blue book is the second from the right.\nis_valid(pos(Red) == 4) ::: E) The red book is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_36",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn a golf tournament, there were five golfers: Dan, Amy, Eve, Ana, and Mya. Dan finished above Eve. Dan finished below Mya. Amy finished third. Ana finished second-to-last.",
        "question": "Which of the following is true?",
        "options": [
            "A) Dan finished last.",
            "B) Amy finished last.",
            "C) Eve finished last.",
            "D) Ana finished last.",
            "E) Mya finished last."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedAbove($x, $y, bool)        ::: Golfer $x finished above golfer $y.\nFinishedBelow($x, $y, bool)        ::: Golfer $x finished below golfer $y.\nFinishedAt($x, $pos, bool)         ::: Golfer $x finished at position $pos.\nFinishedLast($x, bool)             ::: Golfer $x finished last.\nFacts:\nGolfer(Dan,  True)                 ::: Dan is one of the golfers.\nGolfer(Amy,  True)                 ::: Amy is one of the golfers.\nGolfer(Eve,  True)                 ::: Eve is one of the golfers.\nGolfer(Ana,  True)                 ::: Ana is one of the golfers.\nGolfer(Mya,  True)                 ::: Mya is one of the golfers.\nFinishedAbove(Dan, Eve, True)      ::: Dan finished above Eve.\nFinishedBelow(Dan, Mya, True)      ::: Dan finished below Mya.\nFinishedAt(Amy, 3, True)           ::: Amy finished third.\nFinishedAt(Ana, 4, True)           ::: Ana finished second-to-last.\nRules:\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAt($a, $pos, True) >>> FinishedBelow($a, $b, True) && FinishedAbove($a, $c, True) ::: If $a finished at position $pos, then $a finished below all golfers above $pos and above all golfers below $pos.\nFinishedAt($a, 5, True) >>> FinishedLast($a, True) ::: If $a finished at position 5, then $a finished last.\nQuery:\nFinishedLast(Dan,  True)           ::: Option A\nFinishedLast(Amy,  True)           ::: Option B\nFinishedLast(Eve,  True)           ::: Option C\nFinishedLast(Ana,  True)           ::: Option D\nFinishedLast(Mya,  True)           ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedAbove(x, y) ::: Golfer x finished above golfer y.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedAt(x, pos) ::: Golfer x finished at position pos.\nFinishedLast(x) ::: Golfer x finished last.\nPremises:\nGolfer(Dan) ::: Dan is one of the golfers.\nGolfer(Amy) ::: Amy is one of the golfers.\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedAbove(Dan, Eve) ::: Dan finished above Eve.\nFinishedBelow(Dan, Mya) ::: Dan finished below Mya.\nFinishedAt(Amy, 3) ::: Amy finished third.\nFinishedAt(Ana, 4) ::: Ana finished second-to-last.\n\u2200x \u2200y (FinishedAbove(x, y) \u2192 FinishedBelow(y, x)) ::: If x finished above y, then y finished below x.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 FinishedAbove(y, x)) ::: If x finished below y, then y finished above x.\n\u2200x \u2200pos \u2200y (FinishedAt(x, pos) \u2227 pos < 5 \u2192 (\u2203y (FinishedAt(y, pos+1) \u2227 FinishedAbove(x, y)))) ::: If x finished at position pos (not last), then there exists y who finished below x.\n\u2200x (FinishedAt(x, 5) \u2192 FinishedLast(x)) ::: If x finished at position 5, then x finished last.\nConclusion:\nFinishedLast(Dan) ::: Option A\nFinishedLast(Amy) ::: Option B\nFinishedLast(Eve) ::: Option C\nFinishedLast(Ana) ::: Option D\nFinishedLast(Mya) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\ngolfers = EnumSort([Dan, Amy, Eve, Ana, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([golfers] -> [positions])\n# Constraints\nDistinct([g:golfers], pos(g)) ::: Each golfer occupies a unique position\npos(Dan) < pos(Eve) ::: Dan finished above Eve.\npos(Dan) > pos(Mya) ::: Dan finished below Mya.\npos(Amy) == 3 ::: Amy finished third.\npos(Ana) == 4 ::: Ana finished second-to-last.\n# Options\nis_valid(pos(Dan) == 5) ::: A) Dan finished last.\nis_valid(pos(Amy) == 5) ::: B) Amy finished last.\nis_valid(pos(Eve) == 5) ::: C) Eve finished last.\nis_valid(pos(Ana) == 5) ::: D) Ana finished last.\nis_valid(pos(Mya) == 5) ::: E) Mya finished last."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedAbove($x, $y, bool)        ::: Golfer $x finished above golfer $y.\nFinishedBelow($x, $y, bool)        ::: Golfer $x finished below golfer $y.\nFinishedAt($x, $pos, bool)         ::: Golfer $x finished at position $pos.\nFinishedLast($x, bool)             ::: Golfer $x finished last.\nFacts:\nGolfer(Dan,  True)                 ::: Dan is one of the golfers.\nGolfer(Amy,  True)                 ::: Amy is one of the golfers.\nGolfer(Eve,  True)                 ::: Eve is one of the golfers.\nGolfer(Ana,  True)                 ::: Ana is one of the golfers.\nGolfer(Mya,  True)                 ::: Mya is one of the golfers.\nFinishedAbove(Dan, Eve, True)      ::: Dan finished above Eve.\nFinishedBelow(Dan, Mya, True)      ::: Dan finished below Mya.\nFinishedAt(Amy, 3, True)           ::: Amy finished third.\nFinishedAt(Ana, 4, True)           ::: Ana finished second-to-last.\nRules:\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAt($a, $pos, True) >>> FinishedBelow($a, $b, True) && FinishedAbove($a, $c, True) ::: If $a finished at position $pos, then $a finished below all golfers above $pos and above all golfers below $pos.\nFinishedAt($a, 5, True) >>> FinishedLast($a, True) ::: If $a finished at position 5, then $a finished last.\nQuery:\nFinishedLast(Dan,  True)           ::: Option A\nFinishedLast(Amy,  True)           ::: Option B\nFinishedLast(Eve,  True)           ::: Option C\nFinishedLast(Ana,  True)           ::: Option D\nFinishedLast(Mya,  True)           ::: Option E",
                "FOL": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedAbove(x, y) ::: Golfer x finished above golfer y.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedAt(x, pos) ::: Golfer x finished at position pos.\nFinishedLast(x) ::: Golfer x finished last.\nPremises:\nGolfer(Dan) ::: Dan is one of the golfers.\nGolfer(Amy) ::: Amy is one of the golfers.\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedAbove(Dan, Eve) ::: Dan finished above Eve.\nFinishedBelow(Dan, Mya) ::: Dan finished below Mya.\nFinishedAt(Amy, 3) ::: Amy finished third.\nFinishedAt(Ana, 4) ::: Ana finished second-to-last.\n\u2200x \u2200y (FinishedAbove(x, y) \u2192 FinishedBelow(y, x)) ::: If x finished above y, then y finished below x.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 FinishedAbove(y, x)) ::: If x finished below y, then y finished above x.\n\u2200x \u2200pos \u2200y (FinishedAt(x, pos) \u2227 pos < 5 \u2192 (\u2203y (FinishedAt(y, pos+1) \u2227 FinishedAbove(x, y)))) ::: If x finished at position pos (not last), then there exists y who finished below x.\n\u2200x (FinishedAt(x, 5) \u2192 FinishedLast(x)) ::: If x finished at position 5, then x finished last.\nConclusion:\nFinishedLast(Dan) ::: Option A\nFinishedLast(Amy) ::: Option B\nFinishedLast(Eve) ::: Option C\nFinishedLast(Ana) ::: Option D\nFinishedLast(Mya) ::: Option E",
                "SAT": "# Declarations\ngolfers = EnumSort([Dan, Amy, Eve, Ana, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([golfers] -> [positions])\n# Constraints\nDistinct([g:golfers], pos(g)) ::: Each golfer occupies a unique position\npos(Dan) < pos(Eve) ::: Dan finished above Eve.\npos(Dan) > pos(Mya) ::: Dan finished below Mya.\npos(Amy) == 3 ::: Amy finished third.\npos(Ana) == 4 ::: Ana finished second-to-last.\n# Options\nis_valid(pos(Dan) == 5) ::: A) Dan finished last.\nis_valid(pos(Amy) == 5) ::: B) Amy finished last.\nis_valid(pos(Eve) == 5) ::: C) Eve finished last.\nis_valid(pos(Ana) == 5) ::: D) Ana finished last.\nis_valid(pos(Mya) == 5) ::: E) Mya finished last."
            }
        ]
    },
    {
        "id": "logical_deduction_37",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn a golf tournament, there were five golfers: Joe, Ana, Amy, Mya, and Eve. Joe finished last. Ana finished second. Mya finished second-to-last. Eve finished below Amy.",
        "question": "Which of the following is true?",
        "options": [
            "A) Joe finished first.",
            "B) Ana finished first.",
            "C) Amy finished first.",
            "D) Mya finished first.",
            "E) Eve finished first."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedLast($x, bool)            ::: Golfer $x finished last.\nFinishedSecond($x, bool)          ::: Golfer $x finished second.\nFinishedSecondToLast($x, bool)    ::: Golfer $x finished second-to-last.\nFinishedBelow($x, $y, bool)       ::: Golfer $x finished below golfer $y.\nFinishedFirst($x, bool)           ::: Golfer $x finished first.\nFacts:\nGolfer(Joe, True)                 ::: Joe is one of the golfers.\nGolfer(Ana, True)                 ::: Ana is one of the golfers.\nGolfer(Amy, True)                 ::: Amy is one of the golfers.\nGolfer(Mya, True)                 ::: Mya is one of the golfers.\nGolfer(Eve, True)                 ::: Eve is one of the golfers.\nFinishedLast(Joe, True)           ::: Joe finished last.\nFinishedSecond(Ana, True)         ::: Ana finished second.\nFinishedSecondToLast(Mya, True)   ::: Mya finished second-to-last.\nFinishedBelow(Eve, Amy, True)     ::: Eve finished below Amy.\nRules:\nFinishedBelow($a, $b, True) >>> !FinishedBelow($b, $a, True) ::: If $a finished below $b, then $b did not finish below $a.\nFinishedLast($a, True) >>> !FinishedFirst($a, True) ::: If $a finished last, then $a did not finish first.\nFinishedSecond($a, True) >>> !FinishedFirst($a, True) ::: If $a finished second, then $a did not finish first.\nFinishedSecondToLast($a, True) >>> !FinishedFirst($a, True) ::: If $a finished second-to-last, then $a did not finish first.\nFinishedBelow($a, $b, True) >>> !FinishedFirst($a, True) && !FinishedFirst($b, True) ::: If $a finished below $b, then neither $a nor $b finished first (since someone else must be above both).\nQuery:\nFinishedFirst(Joe, True)  ::: Option A\nFinishedFirst(Ana, True)  ::: Option B\nFinishedFirst(Amy, True)  ::: Option C\nFinishedFirst(Mya, True)  ::: Option D\nFinishedFirst(Eve, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedLast(x) ::: Golfer x finished last.\nFinishedSecond(x) ::: Golfer x finished second.\nFinishedSecondToLast(x) ::: Golfer x finished second-to-last.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedFirst(x) ::: Golfer x finished first.\nPremises:\nGolfer(Joe) ::: Joe is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Amy) ::: Amy is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nGolfer(Eve) ::: Eve is one of the golfers.\nFinishedLast(Joe) ::: Joe finished last.\nFinishedSecond(Ana) ::: Ana finished second.\nFinishedSecondToLast(Mya) ::: Mya finished second-to-last.\nFinishedBelow(Eve, Amy) ::: Eve finished below Amy.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 \u00acFinishedBelow(y, x)) ::: If x finished below y, then y did not finish below x.\n\u2200x (FinishedLast(x) \u2192 \u00acFinishedFirst(x)) ::: If x finished last, then x did not finish first.\n\u2200x (FinishedSecond(x) \u2192 \u00acFinishedFirst(x)) ::: If x finished second, then x did not finish first.\n\u2200x (FinishedSecondToLast(x) \u2192 \u00acFinishedFirst(x)) ::: If x finished second-to-last, then x did not finish first.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 (\u00acFinishedFirst(x) \u2227 \u00acFinishedFirst(y))) ::: If x finished below y, then neither x nor y finished first.\nConclusion:\nFinishedFirst(Joe) ::: Option A\nFinishedFirst(Ana) ::: Option B\nFinishedFirst(Amy) ::: Option C\nFinishedFirst(Mya) ::: Option D\nFinishedFirst(Eve) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\ngolfers = EnumSort([Joe, Ana, Amy, Mya, Eve])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([golfers] -> [positions])\n# Constraints\nDistinct([g:golfers], pos(g)) ::: Each golfer has a unique position\npos(Joe) == 5 ::: Joe finished last (position 5)\npos(Ana) == 2 ::: Ana finished second (position 2)\npos(Mya) == 4 ::: Mya finished second-to-last (position 4)\npos(Eve) > pos(Amy) ::: Eve finished below Amy\nForAll([g:golfers], Implies(pos(g) == 1, Not(Or(pos(g) == 5, pos(g) == 2, pos(g) == 4)))) ::: First place cannot be last, second, or second-to-last\nForAll([g1:golfers, g2:golfers], Implies(pos(g1) > pos(g2), Not(pos(g2) > pos(g1)))) ::: Finishing below is asymmetric\nForAll([g1:golfers, g2:golfers], Implies(pos(g1) > pos(g2), And(Not(pos(g1) == 1), Not(pos(g2) == 1)))) ::: If one golfer finished below another, neither can be first\n# Options\nis_valid(pos(Joe) == 1) ::: A) Joe finished first.\nis_valid(pos(Ana) == 1) ::: B) Ana finished first.\nis_valid(pos(Amy) == 1) ::: C) Amy finished first.\nis_valid(pos(Mya) == 1) ::: D) Mya finished first.\nis_valid(pos(Eve) == 1) ::: E) Eve finished first."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedLast($x, bool)            ::: Golfer $x finished last.\nFinishedSecond($x, bool)          ::: Golfer $x finished second.\nFinishedSecondToLast($x, bool)    ::: Golfer $x finished second-to-last.\nFinishedBelow($x, $y, bool)       ::: Golfer $x finished below golfer $y.\nFinishedFirst($x, bool)           ::: Golfer $x finished first.\nFacts:\nGolfer(Joe, True)                 ::: Joe is one of the golfers.\nGolfer(Ana, True)                 ::: Ana is one of the golfers.\nGolfer(Amy, True)                 ::: Amy is one of the golfers.\nGolfer(Mya, True)                 ::: Mya is one of the golfers.\nGolfer(Eve, True)                 ::: Eve is one of the golfers.\nFinishedLast(Joe, True)           ::: Joe finished last.\nFinishedSecond(Ana, True)         ::: Ana finished second.\nFinishedSecondToLast(Mya, True)   ::: Mya finished second-to-last.\nFinishedBelow(Eve, Amy, True)     ::: Eve finished below Amy.\nRules:\nFinishedBelow($a, $b, True) >>> !FinishedBelow($b, $a, True) ::: If $a finished below $b, then $b did not finish below $a.\nFinishedLast($a, True) >>> !FinishedFirst($a, True) ::: If $a finished last, then $a did not finish first.\nFinishedSecond($a, True) >>> !FinishedFirst($a, True) ::: If $a finished second, then $a did not finish first.\nFinishedSecondToLast($a, True) >>> !FinishedFirst($a, True) ::: If $a finished second-to-last, then $a did not finish first.\nFinishedBelow($a, $b, True) >>> !FinishedFirst($a, True) && !FinishedFirst($b, True) ::: If $a finished below $b, then neither $a nor $b finished first (since someone else must be above both).\nQuery:\nFinishedFirst(Joe, True)  ::: Option A\nFinishedFirst(Ana, True)  ::: Option B\nFinishedFirst(Amy, True)  ::: Option C\nFinishedFirst(Mya, True)  ::: Option D\nFinishedFirst(Eve, True)  ::: Option E",
                "FOL": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedLast(x) ::: Golfer x finished last.\nFinishedSecond(x) ::: Golfer x finished second.\nFinishedSecondToLast(x) ::: Golfer x finished second-to-last.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedFirst(x) ::: Golfer x finished first.\nPremises:\nGolfer(Joe) ::: Joe is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Amy) ::: Amy is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nGolfer(Eve) ::: Eve is one of the golfers.\nFinishedLast(Joe) ::: Joe finished last.\nFinishedSecond(Ana) ::: Ana finished second.\nFinishedSecondToLast(Mya) ::: Mya finished second-to-last.\nFinishedBelow(Eve, Amy) ::: Eve finished below Amy.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 \u00acFinishedBelow(y, x)) ::: If x finished below y, then y did not finish below x.\n\u2200x (FinishedLast(x) \u2192 \u00acFinishedFirst(x)) ::: If x finished last, then x did not finish first.\n\u2200x (FinishedSecond(x) \u2192 \u00acFinishedFirst(x)) ::: If x finished second, then x did not finish first.\n\u2200x (FinishedSecondToLast(x) \u2192 \u00acFinishedFirst(x)) ::: If x finished second-to-last, then x did not finish first.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 (\u00acFinishedFirst(x) \u2227 \u00acFinishedFirst(y))) ::: If x finished below y, then neither x nor y finished first.\nConclusion:\nFinishedFirst(Joe) ::: Option A\nFinishedFirst(Ana) ::: Option B\nFinishedFirst(Amy) ::: Option C\nFinishedFirst(Mya) ::: Option D\nFinishedFirst(Eve) ::: Option E",
                "SAT": "# Declarations\ngolfers = EnumSort([Joe, Ana, Amy, Mya, Eve])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([golfers] -> [positions])\n# Constraints\nDistinct([g:golfers], pos(g)) ::: Each golfer has a unique position\npos(Joe) == 5 ::: Joe finished last (position 5)\npos(Ana) == 2 ::: Ana finished second (position 2)\npos(Mya) == 4 ::: Mya finished second-to-last (position 4)\npos(Eve) > pos(Amy) ::: Eve finished below Amy\nForAll([g:golfers], Implies(pos(g) == 1, Not(Or(pos(g) == 5, pos(g) == 2, pos(g) == 4)))) ::: First place cannot be last, second, or second-to-last\nForAll([g1:golfers, g2:golfers], Implies(pos(g1) > pos(g2), Not(pos(g2) > pos(g1)))) ::: Finishing below is asymmetric\nForAll([g1:golfers, g2:golfers], Implies(pos(g1) > pos(g2), And(Not(pos(g1) == 1), Not(pos(g2) == 1)))) ::: If one golfer finished below another, neither can be first\n# Options\nis_valid(pos(Joe) == 1) ::: A) Joe finished first.\nis_valid(pos(Ana) == 1) ::: B) Ana finished first.\nis_valid(pos(Amy) == 1) ::: C) Amy finished first.\nis_valid(pos(Mya) == 1) ::: D) Mya finished first.\nis_valid(pos(Eve) == 1) ::: E) Eve finished first."
            }
        ]
    },
    {
        "id": "logical_deduction_38",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a sedan, a convertible, a station wagon, a bus, and a motorcyle. The sedan is the second-newest. The station wagon is newer than the convertible. The sedan is older than the motorcyle. The bus is the oldest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The sedan is the second-oldest.",
            "B) The convertible is the second-oldest.",
            "C) The station wagon is the second-oldest.",
            "D) The bus is the second-oldest.",
            "E) The motorcyle is the second-oldest."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)               ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)               ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                  ::: Vehicle $x is the oldest.\nSecondOldest($x, bool)            ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(sedan, True)              ::: The sedan.\nVehicle(convertible, True)        ::: The convertible.\nVehicle(station_wagon, True)      ::: The station wagon.\nVehicle(bus, True)                ::: The bus.\nVehicle(motorcycle, True)         ::: The motorcycle.\nNewer(sedan, convertible, True)   ::: The sedan is newer than the convertible.\nNewer(station_wagon, convertible, True) ::: The station wagon is newer than the convertible.\nNewer(motorcycle, sedan, True)    ::: The motorcycle is newer than the sedan.\nOldest(bus, True)                 ::: The bus is the oldest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($o, True) && Older($o, $s, True) && Older($s, sedan, True) && Older($s, convertible, True) && Older($s, station_wagon, True) >>> SecondOldest($s, True) ::: The vehicle immediately newer than the oldest\u2014and still older than the remaining three\u2014is second-oldest.\nQuery:\nSecondOldest(sedan, True)         ::: Option A\nSecondOldest(convertible, True)    ::: Option B\nSecondOldest(station_wagon, True)  ::: Option C\nSecondOldest(bus, True)            ::: Option D\nSecondOldest(motorcycle, True)     ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(sedan) ::: The sedan.\nVehicle(convertible) ::: The convertible.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(motorcycle) ::: The motorcycle.\nNewer(sedan, convertible) ::: The sedan is newer than the convertible.\nNewer(station_wagon, convertible) ::: The station wagon is newer than the convertible.\nNewer(motorcycle, sedan) ::: The motorcycle is newer than the sedan.\nOldest(bus) ::: The bus is the oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200o \u2200s (Oldest(o) \u2227 Older(o, s) \u2227 Older(s, sedan) \u2227 Older(s, convertible) \u2227 Older(s, station_wagon) \u2192 SecondOldest(s)) ::: The vehicle immediately newer than the oldest\u2014and still older than the remaining three\u2014is second-oldest.\nConclusion:\nSecondOldest(sedan) ::: Option A\nSecondOldest(convertible) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(motorcycle) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Sedan, Convertible, StationWagon, Bus, Motorcycle])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nNewer(Sedan, Convertible) ::: The sedan is newer than the convertible.\nNewer(StationWagon, Convertible) ::: The station wagon is newer than the convertible.\nNewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan.\nOldest(Bus) ::: The bus is the oldest.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x.\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive.\nForAll([o:Vehicle, s:Vehicle], Implies(And(Oldest(o), Older(o, s), Older(s, Sedan), Older(s, Convertible), Older(s, StationWagon)), SecondOldest(s))) ::: The vehicle immediately newer than the oldest\u2014and still older than the remaining three\u2014is second-oldest.\n# Options\nis_valid(SecondOldest(Sedan)) ::: A) The sedan is the second-oldest.\nis_valid(SecondOldest(Convertible)) ::: B) The convertible is the second-oldest.\nis_valid(SecondOldest(StationWagon)) ::: C) The station wagon is the second-oldest.\nis_valid(SecondOldest(Bus)) ::: D) The bus is the second-oldest.\nis_valid(SecondOldest(Motorcycle)) ::: E) The motorcycle is the second-oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)               ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)               ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                  ::: Vehicle $x is the oldest.\nSecondOldest($x, bool)            ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(sedan, True)              ::: The sedan.\nVehicle(convertible, True)        ::: The convertible.\nVehicle(station_wagon, True)      ::: The station wagon.\nVehicle(bus, True)                ::: The bus.\nVehicle(motorcycle, True)         ::: The motorcycle.\nNewer(sedan, convertible, True)   ::: The sedan is newer than the convertible.\nNewer(station_wagon, convertible, True) ::: The station wagon is newer than the convertible.\nNewer(motorcycle, sedan, True)    ::: The motorcycle is newer than the sedan.\nOldest(bus, True)                 ::: The bus is the oldest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($o, True) && Older($o, $s, True) && Older($s, sedan, True) && Older($s, convertible, True) && Older($s, station_wagon, True) >>> SecondOldest($s, True) ::: The vehicle immediately newer than the oldest\u2014and still older than the remaining three\u2014is second-oldest.\nQuery:\nSecondOldest(sedan, True)         ::: Option A\nSecondOldest(convertible, True)    ::: Option B\nSecondOldest(station_wagon, True)  ::: Option C\nSecondOldest(bus, True)            ::: Option D\nSecondOldest(motorcycle, True)     ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(sedan) ::: The sedan.\nVehicle(convertible) ::: The convertible.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(motorcycle) ::: The motorcycle.\nNewer(sedan, convertible) ::: The sedan is newer than the convertible.\nNewer(station_wagon, convertible) ::: The station wagon is newer than the convertible.\nNewer(motorcycle, sedan) ::: The motorcycle is newer than the sedan.\nOldest(bus) ::: The bus is the oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200o \u2200s (Oldest(o) \u2227 Older(o, s) \u2227 Older(s, sedan) \u2227 Older(s, convertible) \u2227 Older(s, station_wagon) \u2192 SecondOldest(s)) ::: The vehicle immediately newer than the oldest\u2014and still older than the remaining three\u2014is second-oldest.\nConclusion:\nSecondOldest(sedan) ::: Option A\nSecondOldest(convertible) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(motorcycle) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Sedan, Convertible, StationWagon, Bus, Motorcycle])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nNewer(Sedan, Convertible) ::: The sedan is newer than the convertible.\nNewer(StationWagon, Convertible) ::: The station wagon is newer than the convertible.\nNewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan.\nOldest(Bus) ::: The bus is the oldest.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x.\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive.\nForAll([o:Vehicle, s:Vehicle], Implies(And(Oldest(o), Older(o, s), Older(s, Sedan), Older(s, Convertible), Older(s, StationWagon)), SecondOldest(s))) ::: The vehicle immediately newer than the oldest\u2014and still older than the remaining three\u2014is second-oldest.\n# Options\nis_valid(SecondOldest(Sedan)) ::: A) The sedan is the second-oldest.\nis_valid(SecondOldest(Convertible)) ::: B) The convertible is the second-oldest.\nis_valid(SecondOldest(StationWagon)) ::: C) The station wagon is the second-oldest.\nis_valid(SecondOldest(Bus)) ::: D) The bus is the second-oldest.\nis_valid(SecondOldest(Motorcycle)) ::: E) The motorcycle is the second-oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_39",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, a blue book, a brown book, a gray book, and a red book. The green book is to the left of the brown book. The gray book is to the left of the blue book. The green book is to the right of the blue book. The red book is the leftmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the third from the left.",
            "B) The blue book is the third from the left.",
            "C) The brown book is the third from the left.",
            "D) The gray book is the third from the left.",
            "E) The red book is the third from the left."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nPosition($x, $n, bool)          ::: Book $x is in position $n from the left (1-based index).\nFacts:\nBook(green, True)               ::: The green book.\nBook(blue,  True)               ::: The blue book.\nBook(brown, True)               ::: The brown book.\nBook(gray,  True)               ::: The gray book.\nBook(red,   True)               ::: The red book.\nLeftOf(green, brown, True)      ::: The green book is to the left of the brown book.\nLeftOf(gray, blue, True)        ::: The gray book is to the left of the blue book.\nLeftOf(blue, green, True)       ::: The green book is to the right of the blue book (blue is left of green).\nLeftOf(red, green, True)        ::: The red book is the leftmost (red is left of green, blue, gray, brown).\nLeftOf(red, blue, True)         ::: The red book is the leftmost (red is left of blue).\nLeftOf(red, gray, True)         ::: The red book is the leftmost (red is left of gray).\nLeftOf(red, brown, True)        ::: The red book is the leftmost (red is left of brown).\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nPosition($x, 1, True) >>> LeftOf($x, $y, True) && LeftOf($x, $z, True) && LeftOf($x, $w, True) && LeftOf($x, $v, True) ::: The leftmost book is left of all others.\nPosition($x, $n, True) && Position($y, $m, True) && $n < $m >>> LeftOf($x, $y, True) ::: Position implies left/right ordering.\nQuery:\nPosition(green, 3, True)       ::: Option A\nPosition(blue, 3, True)         ::: Option B\nPosition(brown, 3, True)        ::: Option C\nPosition(gray, 3, True)         ::: Option D\nPosition(red, 3, True)          ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, n) ::: Book x is in position n from the left (1-based index).\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(brown) ::: The brown book.\nBook(gray) ::: The gray book.\nBook(red) ::: The red book.\nLeftOf(green, brown) ::: The green book is to the left of the brown book.\nLeftOf(gray, blue) ::: The gray book is to the left of the blue book.\nLeftOf(blue, green) ::: The blue book is to the left of the green book.\nLeftOf(red, green) ::: The red book is to the left of the green book.\nLeftOf(red, blue) ::: The red book is to the left of the blue book.\nLeftOf(red, gray) ::: The red book is to the left of the gray book.\nLeftOf(red, brown) ::: The red book is to the left of the brown book.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x \u2200y (LeftOf(x, y) \u2194 Position(x, n) \u2227 Position(y, m) \u2227 n < m) ::: Position implies left/right ordering.\nPosition(red, 1) ::: The red book is the leftmost.\nConclusion:\nPosition(green, 3) ::: Option A\nPosition(blue, 3) ::: Option B\nPosition(brown, 3) ::: Option C\nPosition(gray, 3) ::: Option D\nPosition(red, 3) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nBook = EnumSort([Green, Blue, Brown, Gray, Red])\nPosition = IntSort([1, 2, 3, 4, 5])\npos = Function([Book] -> [Position])\n# Constraints\nDistinct([b:Book], pos(b)) ::: Each book occupies a unique position\npos(Green) < pos(Brown) ::: The green book is to the left of the brown book.\npos(Gray) < pos(Blue) ::: The gray book is to the left of the blue book.\npos(Blue) < pos(Green) ::: The blue book is to the left of the green book.\npos(Red) == 1 ::: The red book is the leftmost.\n# Options\nis_valid(pos(Green) == 3) ::: A) The green book is the third from the left.\nis_valid(pos(Blue) == 3) ::: B) The blue book is the third from the left.\nis_valid(pos(Brown) == 3) ::: C) The brown book is the third from the left.\nis_valid(pos(Gray) == 3) ::: D) The gray book is the third from the left.\nis_valid(pos(Red) == 3) ::: E) The red book is the third from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nPosition($x, $n, bool)          ::: Book $x is in position $n from the left (1-based index).\nFacts:\nBook(green, True)               ::: The green book.\nBook(blue,  True)               ::: The blue book.\nBook(brown, True)               ::: The brown book.\nBook(gray,  True)               ::: The gray book.\nBook(red,   True)               ::: The red book.\nLeftOf(green, brown, True)      ::: The green book is to the left of the brown book.\nLeftOf(gray, blue, True)        ::: The gray book is to the left of the blue book.\nLeftOf(blue, green, True)       ::: The green book is to the right of the blue book (blue is left of green).\nLeftOf(red, green, True)        ::: The red book is the leftmost (red is left of green, blue, gray, brown).\nLeftOf(red, blue, True)         ::: The red book is the leftmost (red is left of blue).\nLeftOf(red, gray, True)         ::: The red book is the leftmost (red is left of gray).\nLeftOf(red, brown, True)        ::: The red book is the leftmost (red is left of brown).\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nPosition($x, 1, True) >>> LeftOf($x, $y, True) && LeftOf($x, $z, True) && LeftOf($x, $w, True) && LeftOf($x, $v, True) ::: The leftmost book is left of all others.\nPosition($x, $n, True) && Position($y, $m, True) && $n < $m >>> LeftOf($x, $y, True) ::: Position implies left/right ordering.\nQuery:\nPosition(green, 3, True)       ::: Option A\nPosition(blue, 3, True)         ::: Option B\nPosition(brown, 3, True)        ::: Option C\nPosition(gray, 3, True)         ::: Option D\nPosition(red, 3, True)          ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, n) ::: Book x is in position n from the left (1-based index).\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(brown) ::: The brown book.\nBook(gray) ::: The gray book.\nBook(red) ::: The red book.\nLeftOf(green, brown) ::: The green book is to the left of the brown book.\nLeftOf(gray, blue) ::: The gray book is to the left of the blue book.\nLeftOf(blue, green) ::: The blue book is to the left of the green book.\nLeftOf(red, green) ::: The red book is to the left of the green book.\nLeftOf(red, blue) ::: The red book is to the left of the blue book.\nLeftOf(red, gray) ::: The red book is to the left of the gray book.\nLeftOf(red, brown) ::: The red book is to the left of the brown book.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x \u2200y (LeftOf(x, y) \u2194 Position(x, n) \u2227 Position(y, m) \u2227 n < m) ::: Position implies left/right ordering.\nPosition(red, 1) ::: The red book is the leftmost.\nConclusion:\nPosition(green, 3) ::: Option A\nPosition(blue, 3) ::: Option B\nPosition(brown, 3) ::: Option C\nPosition(gray, 3) ::: Option D\nPosition(red, 3) ::: Option E",
                "SAT": "# Declarations\nBook = EnumSort([Green, Blue, Brown, Gray, Red])\nPosition = IntSort([1, 2, 3, 4, 5])\npos = Function([Book] -> [Position])\n# Constraints\nDistinct([b:Book], pos(b)) ::: Each book occupies a unique position\npos(Green) < pos(Brown) ::: The green book is to the left of the brown book.\npos(Gray) < pos(Blue) ::: The gray book is to the left of the blue book.\npos(Blue) < pos(Green) ::: The blue book is to the left of the green book.\npos(Red) == 1 ::: The red book is the leftmost.\n# Options\nis_valid(pos(Green) == 3) ::: A) The green book is the third from the left.\nis_valid(pos(Blue) == 3) ::: B) The blue book is the third from the left.\nis_valid(pos(Brown) == 3) ::: C) The brown book is the third from the left.\nis_valid(pos(Gray) == 3) ::: D) The gray book is the third from the left.\nis_valid(pos(Red) == 3) ::: E) The red book is the third from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_40",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: cantaloupes, kiwis, oranges, mangoes, and peaches. The kiwis are less expensive than the mangoes. The peaches are less expensive than the oranges. The oranges are the second-most expensive. The mangoes are the second-cheapest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cantaloupes are the second-cheapest.",
            "B) The kiwis are the second-cheapest.",
            "C) The oranges are the second-cheapest.",
            "D) The mangoes are the second-cheapest.",
            "E) The peaches are the second-cheapest."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nLessExpensive($x, $y, bool)      ::: Fruit $x is less expensive than fruit $y.\nSecondMostExpensive($x, bool)    ::: Fruit $x is the second-most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second-cheapest.\nFacts:\nFruit(cantaloupes, True)         ::: The cantaloupes.\nFruit(kiwis,       True)         ::: The kiwis.\nFruit(oranges,     True)         ::: The oranges.\nFruit(mangoes,     True)         ::: The mangoes.\nFruit(peaches,     True)         ::: The peaches.\nLessExpensive(kiwis, mangoes, True)    ::: The kiwis are less expensive than the mangoes.\nLessExpensive(peaches, oranges, True)  ::: The peaches are less expensive than the oranges.\nSecondMostExpensive(oranges, True)     ::: The oranges are the second-most expensive.\nSecondCheapest(mangoes, True)          ::: The mangoes are the second-cheapest.\nRules:\nLessExpensive($a, $b, True) >>> LessExpensive($a, $c, True) && LessExpensive($c, $b, True) ::: If $a is less expensive than $b, and $b is less expensive than $c, then $a is less expensive than $c.\nSecondCheapest($a, True) >>> !SecondCheapest($b, True) && ($b != $a) ::: Only one fruit can be the second-cheapest.\nSecondMostExpensive($a, True) >>> !SecondMostExpensive($b, True) && ($b != $a) ::: Only one fruit can be the second-most expensive.\nQuery:\nSecondCheapest(cantaloupes, True)  ::: Option A\nSecondCheapest(kiwis,       True)  ::: Option B\nSecondCheapest(oranges,     True)  ::: Option C\nSecondCheapest(mangoes,     True)  ::: Option D\nSecondCheapest(peaches,     True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nLessExpensive(x, y) ::: Fruit x is less expensive than fruit y.\nSecondMostExpensive(x) ::: Fruit x is the second-most expensive.\nSecondCheapest(x) ::: Fruit x is the second-cheapest.\nPremises:\nFruit(cantaloupes) ::: The cantaloupes.\nFruit(kiwis) ::: The kiwis.\nFruit(oranges) ::: The oranges.\nFruit(mangoes) ::: The mangoes.\nFruit(peaches) ::: The peaches.\nLessExpensive(kiwis, mangoes) ::: The kiwis are less expensive than the mangoes.\nLessExpensive(peaches, oranges) ::: The peaches are less expensive than the oranges.\nSecondMostExpensive(oranges) ::: The oranges are the second-most expensive.\nSecondCheapest(mangoes) ::: The mangoes are the second-cheapest.\n\u2200x \u2200y \u2200z (LessExpensive(x, y) \u2227 LessExpensive(y, z) \u2192 LessExpensive(x, z)) ::: Transitivity of LessExpensive.\n\u2200x \u2200y (SecondCheapest(x) \u2227 SecondCheapest(y) \u2192 x = y) ::: Uniqueness of SecondCheapest.\n\u2200x \u2200y (SecondMostExpensive(x) \u2227 SecondMostExpensive(y) \u2192 x = y) ::: Uniqueness of SecondMostExpensive.\nConclusion:\nSecondCheapest(cantaloupes) ::: Option A\nSecondCheapest(kiwis) ::: Option B\nSecondCheapest(oranges) ::: Option C\nSecondCheapest(mangoes) ::: Option D\nSecondCheapest(peaches) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Cantaloupes, Kiwis, Oranges, Mangoes, Peaches])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Kiwis) < price(Mangoes) ::: The kiwis are less expensive than the mangoes.\nprice(Peaches) < price(Oranges) ::: The peaches are less expensive than the oranges.\nForAll([f:fruits], Implies(SecondMostExpensive(f), price(f) == Count([g:fruits], price(g) > price(f)) + 1)) ::: The oranges are the second-most expensive.\nForAll([f:fruits], Implies(SecondCheapest(f), price(f) == Count([g:fruits], price(g) < price(f)) + 2)) ::: The mangoes are the second-cheapest.\nSecondMostExpensive(Oranges) ::: The oranges are the second-most expensive.\nSecondCheapest(Mangoes) ::: The mangoes are the second-cheapest.\n# Options\nis_valid(SecondCheapest(Cantaloupes)) ::: A) The cantaloupes are the second-cheapest.\nis_valid(SecondCheapest(Kiwis)) ::: B) The kiwis are the second-cheapest.\nis_valid(SecondCheapest(Oranges)) ::: C) The oranges are the second-cheapest.\nis_valid(SecondCheapest(Mangoes)) ::: D) The mangoes are the second-cheapest.\nis_valid(SecondCheapest(Peaches)) ::: E) The peaches are the second-cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nLessExpensive($x, $y, bool)      ::: Fruit $x is less expensive than fruit $y.\nSecondMostExpensive($x, bool)    ::: Fruit $x is the second-most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second-cheapest.\nFacts:\nFruit(cantaloupes, True)         ::: The cantaloupes.\nFruit(kiwis,       True)         ::: The kiwis.\nFruit(oranges,     True)         ::: The oranges.\nFruit(mangoes,     True)         ::: The mangoes.\nFruit(peaches,     True)         ::: The peaches.\nLessExpensive(kiwis, mangoes, True)    ::: The kiwis are less expensive than the mangoes.\nLessExpensive(peaches, oranges, True)  ::: The peaches are less expensive than the oranges.\nSecondMostExpensive(oranges, True)     ::: The oranges are the second-most expensive.\nSecondCheapest(mangoes, True)          ::: The mangoes are the second-cheapest.\nRules:\nLessExpensive($a, $b, True) >>> LessExpensive($a, $c, True) && LessExpensive($c, $b, True) ::: If $a is less expensive than $b, and $b is less expensive than $c, then $a is less expensive than $c.\nSecondCheapest($a, True) >>> !SecondCheapest($b, True) && ($b != $a) ::: Only one fruit can be the second-cheapest.\nSecondMostExpensive($a, True) >>> !SecondMostExpensive($b, True) && ($b != $a) ::: Only one fruit can be the second-most expensive.\nQuery:\nSecondCheapest(cantaloupes, True)  ::: Option A\nSecondCheapest(kiwis,       True)  ::: Option B\nSecondCheapest(oranges,     True)  ::: Option C\nSecondCheapest(mangoes,     True)  ::: Option D\nSecondCheapest(peaches,     True)  ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nLessExpensive(x, y) ::: Fruit x is less expensive than fruit y.\nSecondMostExpensive(x) ::: Fruit x is the second-most expensive.\nSecondCheapest(x) ::: Fruit x is the second-cheapest.\nPremises:\nFruit(cantaloupes) ::: The cantaloupes.\nFruit(kiwis) ::: The kiwis.\nFruit(oranges) ::: The oranges.\nFruit(mangoes) ::: The mangoes.\nFruit(peaches) ::: The peaches.\nLessExpensive(kiwis, mangoes) ::: The kiwis are less expensive than the mangoes.\nLessExpensive(peaches, oranges) ::: The peaches are less expensive than the oranges.\nSecondMostExpensive(oranges) ::: The oranges are the second-most expensive.\nSecondCheapest(mangoes) ::: The mangoes are the second-cheapest.\n\u2200x \u2200y \u2200z (LessExpensive(x, y) \u2227 LessExpensive(y, z) \u2192 LessExpensive(x, z)) ::: Transitivity of LessExpensive.\n\u2200x \u2200y (SecondCheapest(x) \u2227 SecondCheapest(y) \u2192 x = y) ::: Uniqueness of SecondCheapest.\n\u2200x \u2200y (SecondMostExpensive(x) \u2227 SecondMostExpensive(y) \u2192 x = y) ::: Uniqueness of SecondMostExpensive.\nConclusion:\nSecondCheapest(cantaloupes) ::: Option A\nSecondCheapest(kiwis) ::: Option B\nSecondCheapest(oranges) ::: Option C\nSecondCheapest(mangoes) ::: Option D\nSecondCheapest(peaches) ::: Option E",
                "SAT": "# Declarations\nfruits = EnumSort([Cantaloupes, Kiwis, Oranges, Mangoes, Peaches])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Kiwis) < price(Mangoes) ::: The kiwis are less expensive than the mangoes.\nprice(Peaches) < price(Oranges) ::: The peaches are less expensive than the oranges.\nForAll([f:fruits], Implies(SecondMostExpensive(f), price(f) == Count([g:fruits], price(g) > price(f)) + 1)) ::: The oranges are the second-most expensive.\nForAll([f:fruits], Implies(SecondCheapest(f), price(f) == Count([g:fruits], price(g) < price(f)) + 2)) ::: The mangoes are the second-cheapest.\nSecondMostExpensive(Oranges) ::: The oranges are the second-most expensive.\nSecondCheapest(Mangoes) ::: The mangoes are the second-cheapest.\n# Options\nis_valid(SecondCheapest(Cantaloupes)) ::: A) The cantaloupes are the second-cheapest.\nis_valid(SecondCheapest(Kiwis)) ::: B) The kiwis are the second-cheapest.\nis_valid(SecondCheapest(Oranges)) ::: C) The oranges are the second-cheapest.\nis_valid(SecondCheapest(Mangoes)) ::: D) The mangoes are the second-cheapest.\nis_valid(SecondCheapest(Peaches)) ::: E) The peaches are the second-cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_41",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a crow, a falcon, a robin, and a blue jay. The robin is to the right of the cardinal. The cardinal is to the right of the blue jay. The blue jay is the second from the left. The crow is the rightmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the leftmost.",
            "B) The crow is the leftmost.",
            "C) The falcon is the leftmost.",
            "D) The robin is the leftmost.",
            "E) The blue jay is the leftmost."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow, True)                ::: The crow.\nBird(falcon, True)              ::: The falcon.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromLeft($s, True) >>> LeftOf($l, $s, True) && LeftMost($l, True) ::: The bird immediately left of the second-from-left is the left-most.\nLeftMost($l, True) && LeftOf($l, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nLeftMost(cardinal, True)  ::: Option A\nLeftMost(crow, True)      ::: Option B\nLeftMost(falcon, True)    ::: Option C\nLeftMost(robin, True)     ::: Option D\nLeftMost(blue_jay, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z) ::: Left-of is transitive.\n\u2200s (SecondFromLeft(s) \u2192 \u2203l (LeftMost(l) \u2227 LeftOf(l, s))) ::: The bird immediately left of the second-from-left is the left-most.\n\u2200l (LeftMost(l) \u2192 \u2203s (SecondFromLeft(s) \u2227 LeftOf(l, s))) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nLeftMost(cardinal) ::: Option A\nLeftMost(crow) ::: Option B\nLeftMost(falcon) ::: Option C\nLeftMost(robin) ::: Option D\nLeftMost(blue_jay) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([cardinal, crow, falcon, robin, blue_jay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(robin) > pos(cardinal) ::: The robin is to the right of the cardinal.\npos(cardinal) > pos(blue_jay) ::: The cardinal is to the right of the blue jay.\npos(blue_jay) == 2 ::: The blue jay is the second from the left.\npos(crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(cardinal) == 1) ::: A) The cardinal is the leftmost.\nis_valid(pos(crow) == 1) ::: B) The crow is the leftmost.\nis_valid(pos(falcon) == 1) ::: C) The falcon is the leftmost.\nis_valid(pos(robin) == 1) ::: D) The robin is the leftmost.\nis_valid(pos(blue_jay) == 1) ::: E) The blue jay is the leftmost."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow, True)                ::: The crow.\nBird(falcon, True)              ::: The falcon.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromLeft($s, True) >>> LeftOf($l, $s, True) && LeftMost($l, True) ::: The bird immediately left of the second-from-left is the left-most.\nLeftMost($l, True) && LeftOf($l, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nLeftMost(cardinal, True)  ::: Option A\nLeftMost(crow, True)      ::: Option B\nLeftMost(falcon, True)    ::: Option C\nLeftMost(robin, True)     ::: Option D\nLeftMost(blue_jay, True)  ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z) ::: Left-of is transitive.\n\u2200s (SecondFromLeft(s) \u2192 \u2203l (LeftMost(l) \u2227 LeftOf(l, s))) ::: The bird immediately left of the second-from-left is the left-most.\n\u2200l (LeftMost(l) \u2192 \u2203s (SecondFromLeft(s) \u2227 LeftOf(l, s))) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nLeftMost(cardinal) ::: Option A\nLeftMost(crow) ::: Option B\nLeftMost(falcon) ::: Option C\nLeftMost(robin) ::: Option D\nLeftMost(blue_jay) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([cardinal, crow, falcon, robin, blue_jay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(robin) > pos(cardinal) ::: The robin is to the right of the cardinal.\npos(cardinal) > pos(blue_jay) ::: The cardinal is to the right of the blue jay.\npos(blue_jay) == 2 ::: The blue jay is the second from the left.\npos(crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(cardinal) == 1) ::: A) The cardinal is the leftmost.\nis_valid(pos(crow) == 1) ::: B) The crow is the leftmost.\nis_valid(pos(falcon) == 1) ::: C) The falcon is the leftmost.\nis_valid(pos(robin) == 1) ::: D) The robin is the leftmost.\nis_valid(pos(blue_jay) == 1) ::: E) The blue jay is the leftmost."
            }
        ]
    },
    {
        "id": "logical_deduction_42",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a minivan, a limousine, a sedan, a tractor, and a hatchback. The tractor is the second-newest. The limousine is newer than the hatchback. The limousine is older than the sedan. The minivan is newer than the sedan.",
        "question": "Which of the following is true?",
        "options": [
            "A) The minivan is the oldest.",
            "B) The limousine is the oldest.",
            "C) The sedan is the oldest.",
            "D) The tractor is the oldest.",
            "E) The hatchback is the oldest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nFacts:\nVehicle(minivan,  True)            ::: The minivan.\nVehicle(limousine, True)           ::: The limousine.\nVehicle(sedan,    True)            ::: The sedan.\nVehicle(tractor,  True)            ::: The tractor.\nVehicle(hatchback, True)           ::: The hatchback.\nNewer(tractor, $x, True)           ::: The tractor is the second-newest (implies there is one vehicle newer than the tractor).\nNewer(limousine, hatchback, True)  ::: The limousine is newer than the hatchback.\nNewer(limousine, sedan, False)     ::: The limousine is older than the sedan (i.e., not newer).\nNewer(minivan, sedan, True)        ::: The minivan is newer than the sedan.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nNewer($a, minivan, False) && Newer($a, limousine, False) && Newer($a, sedan, False) && Newer($a, tractor, False) && Newer($a, hatchback, False) >>> Newest($a, True) ::: A vehicle that is not older than any other is the newest.\nOlder($a, minivan, False) && Older($a, limousine, False) && Older($a, sedan, False) && Older($a, tractor, False) && Older($a, hatchback, False) >>> Oldest($a, True) ::: A vehicle that is not newer than any other is the oldest.\nQuery:\nOldest(minivan,  True)  ::: Option A\nOldest(limousine, True) ::: Option B\nOldest(sedan,    True)  ::: Option C\nOldest(tractor,  True)  ::: Option D\nOldest(hatchback, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nPremises:\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(hatchback) ::: The hatchback.\n\u2203x (Newer(x, tractor) \u2227 \u2200y (y \u2260 x \u2192 \u00acNewer(y, tractor))) ::: The tractor is the second-newest (exactly one vehicle is newer than the tractor).\nNewer(limousine, hatchback) ::: The limousine is newer than the hatchback.\n\u00acNewer(limousine, sedan) ::: The limousine is older than the sedan.\nNewer(minivan, sedan) ::: The minivan is newer than the sedan.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: Newer is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Oldest(x) \u2194 \u2200y (y \u2260 x \u2192 Newer(y, x))) ::: A vehicle is oldest if all others are newer than it.\nConclusion:\nOldest(minivan) ::: Option A\nOldest(limousine) ::: Option B\nOldest(sedan) ::: Option C\nOldest(tractor) ::: Option D\nOldest(hatchback) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Minivan, Limousine, Sedan, Tractor, Hatchback])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nExists([x:Vehicle], And(Newer(x, Tractor), ForAll([y:Vehicle], Implies(y != x, Not(Newer(y, Tractor)))))) ::: The tractor is the second-newest\nNewer(Limousine, Hatchback) ::: The limousine is newer than the hatchback\nNot(Newer(Limousine, Sedan)) ::: The limousine is older than the sedan\nNewer(Minivan, Sedan) ::: The minivan is newer than the sedan\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: Newer is asymmetric\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle], Implies(ForAll([y:Vehicle], Implies(y != x, Newer(y, x))), Oldest(x))) ::: A vehicle is oldest if all others are newer than it\n# Options\nis_valid(Oldest(Minivan)) ::: A) The minivan is the oldest.\nis_valid(Oldest(Limousine)) ::: B) The limousine is the oldest.\nis_valid(Oldest(Sedan)) ::: C) The sedan is the oldest.\nis_valid(Oldest(Tractor)) ::: D) The tractor is the oldest.\nis_valid(Oldest(Hatchback)) ::: E) The hatchback is the oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nFacts:\nVehicle(minivan,  True)            ::: The minivan.\nVehicle(limousine, True)           ::: The limousine.\nVehicle(sedan,    True)            ::: The sedan.\nVehicle(tractor,  True)            ::: The tractor.\nVehicle(hatchback, True)           ::: The hatchback.\nNewer(tractor, $x, True)           ::: The tractor is the second-newest (implies there is one vehicle newer than the tractor).\nNewer(limousine, hatchback, True)  ::: The limousine is newer than the hatchback.\nNewer(limousine, sedan, False)     ::: The limousine is older than the sedan (i.e., not newer).\nNewer(minivan, sedan, True)        ::: The minivan is newer than the sedan.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nNewer($a, minivan, False) && Newer($a, limousine, False) && Newer($a, sedan, False) && Newer($a, tractor, False) && Newer($a, hatchback, False) >>> Newest($a, True) ::: A vehicle that is not older than any other is the newest.\nOlder($a, minivan, False) && Older($a, limousine, False) && Older($a, sedan, False) && Older($a, tractor, False) && Older($a, hatchback, False) >>> Oldest($a, True) ::: A vehicle that is not newer than any other is the oldest.\nQuery:\nOldest(minivan,  True)  ::: Option A\nOldest(limousine, True) ::: Option B\nOldest(sedan,    True)  ::: Option C\nOldest(tractor,  True)  ::: Option D\nOldest(hatchback, True) ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nPremises:\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(hatchback) ::: The hatchback.\n\u2203x (Newer(x, tractor) \u2227 \u2200y (y \u2260 x \u2192 \u00acNewer(y, tractor))) ::: The tractor is the second-newest (exactly one vehicle is newer than the tractor).\nNewer(limousine, hatchback) ::: The limousine is newer than the hatchback.\n\u00acNewer(limousine, sedan) ::: The limousine is older than the sedan.\nNewer(minivan, sedan) ::: The minivan is newer than the sedan.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: Newer is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Oldest(x) \u2194 \u2200y (y \u2260 x \u2192 Newer(y, x))) ::: A vehicle is oldest if all others are newer than it.\nConclusion:\nOldest(minivan) ::: Option A\nOldest(limousine) ::: Option B\nOldest(sedan) ::: Option C\nOldest(tractor) ::: Option D\nOldest(hatchback) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Minivan, Limousine, Sedan, Tractor, Hatchback])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nExists([x:Vehicle], And(Newer(x, Tractor), ForAll([y:Vehicle], Implies(y != x, Not(Newer(y, Tractor)))))) ::: The tractor is the second-newest\nNewer(Limousine, Hatchback) ::: The limousine is newer than the hatchback\nNot(Newer(Limousine, Sedan)) ::: The limousine is older than the sedan\nNewer(Minivan, Sedan) ::: The minivan is newer than the sedan\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: Newer is asymmetric\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle], Implies(ForAll([y:Vehicle], Implies(y != x, Newer(y, x))), Oldest(x))) ::: A vehicle is oldest if all others are newer than it\n# Options\nis_valid(Oldest(Minivan)) ::: A) The minivan is the oldest.\nis_valid(Oldest(Limousine)) ::: B) The limousine is the oldest.\nis_valid(Oldest(Sedan)) ::: C) The sedan is the oldest.\nis_valid(Oldest(Tractor)) ::: D) The tractor is the oldest.\nis_valid(Oldest(Hatchback)) ::: E) The hatchback is the oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_43",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a crow, a raven, a robin, and a cardinal. The raven is to the right of the owl. The raven is the second from the left. The robin is to the left of the crow. The robin is the second from the right.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the second from the left.",
            "B) The crow is the second from the left.",
            "C) The raven is the second from the left.",
            "D) The robin is the second from the left.",
            "E) The cardinal is the second from the left."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(owl,     True)             ::: The owl.\nBird(crow,    True)             ::: The crow.\nBird(raven,   True)             ::: The raven.\nBird(robin,   True)             ::: The robin.\nBird(cardinal, True)            ::: The cardinal.\nRightOf(raven, owl,    True)    ::: The raven is to the right of the owl.\nSecondFromLeft(raven,  True)    ::: The raven is the second from the left.\nLeftOf(robin, crow,    True)    ::: The robin is to the left of the crow.\nSecondFromRight(robin, True)    ::: The robin is the second from the right.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: If $a is second from the left, there are three birds to its right.\nSecondFromRight($a, True) >>> RightOf($a, $b, True) && RightOf($b, $c, True) && RightOf($c, $d, True) ::: If $a is second from the right, there are three birds to its left.\nQuery:\nSecondFromLeft(owl,     True)  ::: Option A\nSecondFromLeft(crow,    True)  ::: Option B\nSecondFromLeft(raven,   True)  ::: Option C\nSecondFromLeft(robin,   True)  ::: Option D\nSecondFromLeft(cardinal, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(owl) ::: The owl.\nBird(crow) ::: The crow.\nBird(raven) ::: The raven.\nBird(robin) ::: The robin.\nBird(cardinal) ::: The cardinal.\nLeftOf(owl, raven) ::: The raven is to the right of the owl.\nSecondFromLeft(raven) ::: The raven is the second from the left.\nLeftOf(robin, crow) ::: The robin is to the left of the crow.\nSecondFromRight(robin) ::: The robin is the second from the right.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y (LeftOf(y, x) \u2227 \u2200z (LeftOf(z, x) \u2192 z = y))) ::: If x is second from the left, there is exactly one bird to its left.\n\u2200x (SecondFromRight(x) \u2192 \u2203y (LeftOf(x, y) \u2227 \u2200z (LeftOf(x, z) \u2192 z = y))) ::: If x is second from the right, there is exactly one bird to its right.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(raven) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(cardinal) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Owl, Crow, Raven, Robin, Cardinal])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Raven) > pos(Owl) ::: The raven is to the right of the owl.\npos(Raven) == 2 ::: The raven is the second from the left.\npos(Robin) < pos(Crow) ::: The robin is to the left of the crow.\npos(Robin) == 4 ::: The robin is the second from the right.\n# Options\nis_valid(pos(Owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Raven) == 2) ::: C) The raven is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(Cardinal) == 2) ::: E) The cardinal is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(owl,     True)             ::: The owl.\nBird(crow,    True)             ::: The crow.\nBird(raven,   True)             ::: The raven.\nBird(robin,   True)             ::: The robin.\nBird(cardinal, True)            ::: The cardinal.\nRightOf(raven, owl,    True)    ::: The raven is to the right of the owl.\nSecondFromLeft(raven,  True)    ::: The raven is the second from the left.\nLeftOf(robin, crow,    True)    ::: The robin is to the left of the crow.\nSecondFromRight(robin, True)    ::: The robin is the second from the right.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: If $a is second from the left, there are three birds to its right.\nSecondFromRight($a, True) >>> RightOf($a, $b, True) && RightOf($b, $c, True) && RightOf($c, $d, True) ::: If $a is second from the right, there are three birds to its left.\nQuery:\nSecondFromLeft(owl,     True)  ::: Option A\nSecondFromLeft(crow,    True)  ::: Option B\nSecondFromLeft(raven,   True)  ::: Option C\nSecondFromLeft(robin,   True)  ::: Option D\nSecondFromLeft(cardinal, True) ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(owl) ::: The owl.\nBird(crow) ::: The crow.\nBird(raven) ::: The raven.\nBird(robin) ::: The robin.\nBird(cardinal) ::: The cardinal.\nLeftOf(owl, raven) ::: The raven is to the right of the owl.\nSecondFromLeft(raven) ::: The raven is the second from the left.\nLeftOf(robin, crow) ::: The robin is to the left of the crow.\nSecondFromRight(robin) ::: The robin is the second from the right.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y (LeftOf(y, x) \u2227 \u2200z (LeftOf(z, x) \u2192 z = y))) ::: If x is second from the left, there is exactly one bird to its left.\n\u2200x (SecondFromRight(x) \u2192 \u2203y (LeftOf(x, y) \u2227 \u2200z (LeftOf(x, z) \u2192 z = y))) ::: If x is second from the right, there is exactly one bird to its right.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(raven) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(cardinal) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Owl, Crow, Raven, Robin, Cardinal])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Raven) > pos(Owl) ::: The raven is to the right of the owl.\npos(Raven) == 2 ::: The raven is the second from the left.\npos(Robin) < pos(Crow) ::: The robin is to the left of the crow.\npos(Robin) == 4 ::: The robin is the second from the right.\n# Options\nis_valid(pos(Owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Raven) == 2) ::: C) The raven is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(Cardinal) == 2) ::: E) The cardinal is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_44",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: pears, mangoes, kiwis, oranges, and peaches. The peaches are more expensive than the mangoes. The oranges are more expensive than the kiwis. The pears are the most expensive. The mangoes are more expensive than the oranges.",
        "question": "Which of the following is true?",
        "options": [
            "A) The pears are the second-cheapest.",
            "B) The mangoes are the second-cheapest.",
            "C) The kiwis are the second-cheapest.",
            "D) The oranges are the second-cheapest.",
            "E) The peaches are the second-cheapest."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second-cheapest.\nFacts:\nFruit(pears,   True)              ::: The pears.\nFruit(mangoes, True)              ::: The mangoes.\nFruit(kiwis,   True)              ::: The kiwis.\nFruit(oranges, True)              ::: The oranges.\nFruit(peaches, True)              ::: The peaches.\nMoreExpensive(peaches, mangoes, True) ::: The peaches are more expensive than the mangoes.\nMoreExpensive(oranges, kiwis, True)   ::: The oranges are more expensive than the kiwis.\nMostExpensive(pears, True)           ::: The pears are the most expensive.\nMoreExpensive(mangoes, oranges, True) ::: The mangoes are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($a, $c, True) && MoreExpensive($b, $c, True) ::: If $a is more expensive than $b, and $b is more expensive than $c, then $a is more expensive than $c.\nMostExpensive($a, True) >>> MoreExpensive($a, $b, True) ::: The most expensive fruit is more expensive than all other fruits.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) && MoreExpensive($c, $d, True) >>> SecondCheapest($c, True) ::: The fruit that is more expensive than one and less expensive than the rest is the second-cheapest.\nQuery:\nSecondCheapest(pears,   True)  ::: Option A\nSecondCheapest(mangoes, True)  ::: Option B\nSecondCheapest(kiwis,   True)  ::: Option C\nSecondCheapest(oranges, True)  ::: Option D\nSecondCheapest(peaches, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nMostExpensive(x) ::: Fruit x is the most expensive.\nSecondCheapest(x) ::: Fruit x is the second-cheapest.\nPremises:\nFruit(pears) ::: The pears.\nFruit(mangoes) ::: The mangoes.\nFruit(kiwis) ::: The kiwis.\nFruit(oranges) ::: The oranges.\nFruit(peaches) ::: The peaches.\nMoreExpensive(peaches, mangoes) ::: The peaches are more expensive than the mangoes.\nMoreExpensive(oranges, kiwis) ::: The oranges are more expensive than the kiwis.\nMostExpensive(pears) ::: The pears are the most expensive.\nMoreExpensive(mangoes, oranges) ::: The mangoes are more expensive than the oranges.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: Transitivity of MoreExpensive.\n\u2200x (MostExpensive(x) \u2192 \u2200y (Fruit(y) \u2227 y \u2260 x \u2192 MoreExpensive(x, y))) ::: The most expensive fruit is more expensive than all others.\n\u2200x \u2200y \u2200z \u2200w (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2227 MoreExpensive(z, w) \u2192 SecondCheapest(z)) ::: The fruit that is more expensive than one and less expensive than the rest is the second-cheapest.\nConclusion:\nSecondCheapest(pears) ::: Option A\nSecondCheapest(mangoes) ::: Option B\nSecondCheapest(kiwis) ::: Option C\nSecondCheapest(oranges) ::: Option D\nSecondCheapest(peaches) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Pears, Mangoes, Kiwis, Oranges, Peaches])\nprice_rank = IntSort([1, 2, 3, 4, 5])\nrank = Function([fruits] -> [price_rank])\n# Constraints\nDistinct([f:fruits], rank(f)) ::: Each fruit has a unique price rank\nrank(Peaches) > rank(Mangoes) ::: The peaches are more expensive than the mangoes.\nrank(Oranges) > rank(Kiwis) ::: The oranges are more expensive than the kiwis.\nrank(Pears) == 5 ::: The pears are the most expensive.\nrank(Mangoes) > rank(Oranges) ::: The mangoes are more expensive than the oranges.\nForAll([f:fruits], Implies(f != Pears, rank(Pears) > rank(f))) ::: The pears are more expensive than all other fruits.\n# Options\nis_valid(rank(Pears) == 2) ::: A) The pears are the second-cheapest.\nis_valid(rank(Mangoes) == 2) ::: B) The mangoes are the second-cheapest.\nis_valid(rank(Kiwis) == 2) ::: C) The kiwis are the second-cheapest.\nis_valid(rank(Oranges) == 2) ::: D) The oranges are the second-cheapest.\nis_valid(rank(Peaches) == 2) ::: E) The peaches are the second-cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second-cheapest.\nFacts:\nFruit(pears,   True)              ::: The pears.\nFruit(mangoes, True)              ::: The mangoes.\nFruit(kiwis,   True)              ::: The kiwis.\nFruit(oranges, True)              ::: The oranges.\nFruit(peaches, True)              ::: The peaches.\nMoreExpensive(peaches, mangoes, True) ::: The peaches are more expensive than the mangoes.\nMoreExpensive(oranges, kiwis, True)   ::: The oranges are more expensive than the kiwis.\nMostExpensive(pears, True)           ::: The pears are the most expensive.\nMoreExpensive(mangoes, oranges, True) ::: The mangoes are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($a, $c, True) && MoreExpensive($b, $c, True) ::: If $a is more expensive than $b, and $b is more expensive than $c, then $a is more expensive than $c.\nMostExpensive($a, True) >>> MoreExpensive($a, $b, True) ::: The most expensive fruit is more expensive than all other fruits.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) && MoreExpensive($c, $d, True) >>> SecondCheapest($c, True) ::: The fruit that is more expensive than one and less expensive than the rest is the second-cheapest.\nQuery:\nSecondCheapest(pears,   True)  ::: Option A\nSecondCheapest(mangoes, True)  ::: Option B\nSecondCheapest(kiwis,   True)  ::: Option C\nSecondCheapest(oranges, True)  ::: Option D\nSecondCheapest(peaches, True)  ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nMostExpensive(x) ::: Fruit x is the most expensive.\nSecondCheapest(x) ::: Fruit x is the second-cheapest.\nPremises:\nFruit(pears) ::: The pears.\nFruit(mangoes) ::: The mangoes.\nFruit(kiwis) ::: The kiwis.\nFruit(oranges) ::: The oranges.\nFruit(peaches) ::: The peaches.\nMoreExpensive(peaches, mangoes) ::: The peaches are more expensive than the mangoes.\nMoreExpensive(oranges, kiwis) ::: The oranges are more expensive than the kiwis.\nMostExpensive(pears) ::: The pears are the most expensive.\nMoreExpensive(mangoes, oranges) ::: The mangoes are more expensive than the oranges.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: Transitivity of MoreExpensive.\n\u2200x (MostExpensive(x) \u2192 \u2200y (Fruit(y) \u2227 y \u2260 x \u2192 MoreExpensive(x, y))) ::: The most expensive fruit is more expensive than all others.\n\u2200x \u2200y \u2200z \u2200w (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2227 MoreExpensive(z, w) \u2192 SecondCheapest(z)) ::: The fruit that is more expensive than one and less expensive than the rest is the second-cheapest.\nConclusion:\nSecondCheapest(pears) ::: Option A\nSecondCheapest(mangoes) ::: Option B\nSecondCheapest(kiwis) ::: Option C\nSecondCheapest(oranges) ::: Option D\nSecondCheapest(peaches) ::: Option E",
                "SAT": "# Declarations\nfruits = EnumSort([Pears, Mangoes, Kiwis, Oranges, Peaches])\nprice_rank = IntSort([1, 2, 3, 4, 5])\nrank = Function([fruits] -> [price_rank])\n# Constraints\nDistinct([f:fruits], rank(f)) ::: Each fruit has a unique price rank\nrank(Peaches) > rank(Mangoes) ::: The peaches are more expensive than the mangoes.\nrank(Oranges) > rank(Kiwis) ::: The oranges are more expensive than the kiwis.\nrank(Pears) == 5 ::: The pears are the most expensive.\nrank(Mangoes) > rank(Oranges) ::: The mangoes are more expensive than the oranges.\nForAll([f:fruits], Implies(f != Pears, rank(Pears) > rank(f))) ::: The pears are more expensive than all other fruits.\n# Options\nis_valid(rank(Pears) == 2) ::: A) The pears are the second-cheapest.\nis_valid(rank(Mangoes) == 2) ::: B) The mangoes are the second-cheapest.\nis_valid(rank(Kiwis) == 2) ::: C) The kiwis are the second-cheapest.\nis_valid(rank(Oranges) == 2) ::: D) The oranges are the second-cheapest.\nis_valid(rank(Peaches) == 2) ::: E) The peaches are the second-cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_45",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a robin, a blue jay, a quail, and a raven. The robin is to the right of the raven. The cardinal is the leftmost. The raven is to the right of the blue jay. The blue jay is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the second from the right.",
            "B) The robin is the second from the right.",
            "C) The blue jay is the second from the right.",
            "D) The quail is the second from the right.",
            "E) The raven is the second from the right."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven, True)     ::: The robin is to the right of the raven.\nLeftOf(cardinal, robin, True)   ::: The cardinal is the leftmost (left of all others).\nLeftOf(cardinal, blue_jay, True)\nLeftOf(cardinal, quail, True)\nLeftOf(cardinal, raven, True)\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nLeftOf(blue_jay, cardinal, False) ::: The blue jay is the third from the left (derived from other facts).\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, cardinal, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, quail, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, cardinal, True) && RightOf($s, robin, True) && RightOf($s, blue_jay, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the right-most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(cardinal, True) ::: Option A\nSecondFromRight(robin,    True) ::: Option B\nSecondFromRight(blue_jay, True) ::: Option C\nSecondFromRight(quail,    True) ::: Option D\nSecondFromRight(raven,    True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftOf(cardinal, robin) ::: The cardinal is the leftmost (left of all others).\nLeftOf(cardinal, blue_jay)\nLeftOf(cardinal, quail)\nLeftOf(cardinal, raven)\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\n\u00acLeftOf(blue_jay, cardinal) ::: The blue jay is not left of the cardinal (cardinal is leftmost).\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200b (RightOf(b, cardinal) \u2227 RightOf(b, robin) \u2227 RightOf(b, blue_jay) \u2227 RightOf(b, quail) \u2192 RightMost(b)) ::: A bird right of all others is right-most.\n\u2200rm \u2200s (RightMost(rm) \u2227 RightOf(rm, s) \u2227 RightOf(s, cardinal) \u2227 RightOf(s, robin) \u2227 RightOf(s, blue_jay) \u2192 SecondFromRight(s)) ::: The bird immediately left of the right-most is second from the right.\nConclusion:\nSecondFromRight(cardinal) ::: Option A\nSecondFromRight(robin) ::: Option B\nSecondFromRight(blue_jay) ::: Option C\nSecondFromRight(quail) ::: Option D\nSecondFromRight(raven) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Cardinal, Robin, BlueJay, Quail, Raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Raven) ::: The robin is to the right of the raven.\npos(Cardinal) == 1 ::: The cardinal is the leftmost.\npos(Raven) > pos(BlueJay) ::: The raven is to the right of the blue jay.\npos(BlueJay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(Cardinal) == 4) ::: A) The cardinal is the second from the right.\nis_valid(pos(Robin) == 4) ::: B) The robin is the second from the right.\nis_valid(pos(BlueJay) == 4) ::: C) The blue jay is the second from the right.\nis_valid(pos(Quail) == 4) ::: D) The quail is the second from the right.\nis_valid(pos(Raven) == 4) ::: E) The raven is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven, True)     ::: The robin is to the right of the raven.\nLeftOf(cardinal, robin, True)   ::: The cardinal is the leftmost (left of all others).\nLeftOf(cardinal, blue_jay, True)\nLeftOf(cardinal, quail, True)\nLeftOf(cardinal, raven, True)\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nLeftOf(blue_jay, cardinal, False) ::: The blue jay is the third from the left (derived from other facts).\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, cardinal, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, quail, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, cardinal, True) && RightOf($s, robin, True) && RightOf($s, blue_jay, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the right-most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nSecondFromRight(cardinal, True) ::: Option A\nSecondFromRight(robin,    True) ::: Option B\nSecondFromRight(blue_jay, True) ::: Option C\nSecondFromRight(quail,    True) ::: Option D\nSecondFromRight(raven,    True) ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftOf(cardinal, robin) ::: The cardinal is the leftmost (left of all others).\nLeftOf(cardinal, blue_jay)\nLeftOf(cardinal, quail)\nLeftOf(cardinal, raven)\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\n\u00acLeftOf(blue_jay, cardinal) ::: The blue jay is not left of the cardinal (cardinal is leftmost).\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200b (RightOf(b, cardinal) \u2227 RightOf(b, robin) \u2227 RightOf(b, blue_jay) \u2227 RightOf(b, quail) \u2192 RightMost(b)) ::: A bird right of all others is right-most.\n\u2200rm \u2200s (RightMost(rm) \u2227 RightOf(rm, s) \u2227 RightOf(s, cardinal) \u2227 RightOf(s, robin) \u2227 RightOf(s, blue_jay) \u2192 SecondFromRight(s)) ::: The bird immediately left of the right-most is second from the right.\nConclusion:\nSecondFromRight(cardinal) ::: Option A\nSecondFromRight(robin) ::: Option B\nSecondFromRight(blue_jay) ::: Option C\nSecondFromRight(quail) ::: Option D\nSecondFromRight(raven) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Cardinal, Robin, BlueJay, Quail, Raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Raven) ::: The robin is to the right of the raven.\npos(Cardinal) == 1 ::: The cardinal is the leftmost.\npos(Raven) > pos(BlueJay) ::: The raven is to the right of the blue jay.\npos(BlueJay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(Cardinal) == 4) ::: A) The cardinal is the second from the right.\nis_valid(pos(Robin) == 4) ::: B) The robin is the second from the right.\nis_valid(pos(BlueJay) == 4) ::: C) The blue jay is the second from the right.\nis_valid(pos(Quail) == 4) ::: D) The quail is the second from the right.\nis_valid(pos(Raven) == 4) ::: E) The raven is the second from the right."
            }
        ]
    }
]