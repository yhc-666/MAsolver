[
    {
        "id": "logical_deduction_0",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, a blue book, a white book, a purple book, and a yellow book. The blue book is to the right of the yellow book. The white book is to the left of the yellow book. The blue book is the second from the right. The purple book is the second from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the second from the left.",
            "B) The blue book is the second from the left.",
            "C) The white book is the second from the left.",
            "D) The purple book is the second from the left.",
            "E) The yellow book is the second from the left."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nQuery:\nSecondFromLeft(green,  True)   ::: Option A\nSecondFromLeft(blue,   True)   ::: Option B\nSecondFromLeft(white,  True)   ::: Option C\nSecondFromLeft(purple, True)   ::: Option D\nSecondFromLeft(yellow, True)   ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nSecondFromRight(x) ::: Book x is the second book from the right.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(blue) ::: Option B\nSecondFromLeft(white) ::: Option C\nSecondFromLeft(purple) ::: Option D\nSecondFromLeft(yellow) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Blue) == 2) ::: B) The blue book is the second from the left.\nis_valid(pos(White) == 2) ::: C) The white book is the second from the left.\nis_valid(pos(Purple) == 2) ::: D) The purple book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: E) The yellow book is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nQuery:\nSecondFromLeft(green,  True)   ::: Option A\nSecondFromLeft(blue,   True)   ::: Option B\nSecondFromLeft(white,  True)   ::: Option C\nSecondFromLeft(purple, True)   ::: Option D\nSecondFromLeft(yellow, True)   ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nSecondFromRight(x) ::: Book x is the second book from the right.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(blue) ::: Option B\nSecondFromLeft(white) ::: Option C\nSecondFromLeft(purple) ::: Option D\nSecondFromLeft(yellow) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Blue) == 2) ::: B) The blue book is the second from the left.\nis_valid(pos(White) == 2) ::: C) The white book is the second from the left.\nis_valid(pos(Purple) == 2) ::: D) The purple book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: E) The yellow book is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_1",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a sedan, a tractor, a minivan, and a limousine. The tractor is newer than the minivan. The tractor is older than the limousine. The convertible is older than the sedan. The convertible is the second-newest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the second-newest.",
            "B) The sedan is the second-newest.",
            "C) The tractor is the second-newest.",
            "D) The minivan is the second-newest.",
            "E) The limousine is the second-newest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(tractor, True)             ::: The tractor.\nVehicle(minivan, True)             ::: The minivan.\nVehicle(limousine, True)           ::: The limousine.\nNewer(tractor, minivan, True)      ::: The tractor is newer than the minivan.\nNewer(limousine, tractor, True)    ::: The limousine is newer than the tractor.\nOlder(convertible, sedan, True)    ::: The convertible is older than the sedan.\nSecondNewest(convertible, True)    ::: The convertible is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(convertible, True)    ::: Option A\nSecondNewest(sedan, True)          ::: Option B\nSecondNewest(tractor, True)        ::: Option C\nSecondNewest(minivan, True)        ::: Option D\nSecondNewest(limousine, True)      ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, minivan) ::: The tractor is newer than the minivan.\nNewer(limousine, tractor) ::: The limousine is newer than the tractor.\nOlder(convertible, sedan) ::: The convertible is older than the sedan.\nSecondNewest(convertible) ::: The convertible is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(sedan) ::: Option B\nSecondNewest(tractor) ::: Option C\nSecondNewest(minivan) ::: Option D\nSecondNewest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, Tractor, Minivan, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Minivan) ::: The tractor is newer than the minivan\nNewer(Limousine, Tractor) ::: The limousine is newer than the tractor\nOlder(Convertible, Sedan) ::: The convertible is older than the sedan\nSecondNewest(Convertible) ::: The convertible is the second-newest\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest\nis_valid(SecondNewest(Sedan)) ::: B) The sedan is the second-newest\nis_valid(SecondNewest(Tractor)) ::: C) The tractor is the second-newest\nis_valid(SecondNewest(Minivan)) ::: D) The minivan is the second-newest\nis_valid(SecondNewest(Limousine)) ::: E) The limousine is the second-newest"
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(tractor, True)             ::: The tractor.\nVehicle(minivan, True)             ::: The minivan.\nVehicle(limousine, True)           ::: The limousine.\nNewer(tractor, minivan, True)      ::: The tractor is newer than the minivan.\nNewer(limousine, tractor, True)    ::: The limousine is newer than the tractor.\nOlder(convertible, sedan, True)    ::: The convertible is older than the sedan.\nSecondNewest(convertible, True)    ::: The convertible is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(convertible, True)    ::: Option A\nSecondNewest(sedan, True)          ::: Option B\nSecondNewest(tractor, True)        ::: Option C\nSecondNewest(minivan, True)        ::: Option D\nSecondNewest(limousine, True)      ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, minivan) ::: The tractor is newer than the minivan.\nNewer(limousine, tractor) ::: The limousine is newer than the tractor.\nOlder(convertible, sedan) ::: The convertible is older than the sedan.\nSecondNewest(convertible) ::: The convertible is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(sedan) ::: Option B\nSecondNewest(tractor) ::: Option C\nSecondNewest(minivan) ::: Option D\nSecondNewest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, Tractor, Minivan, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Minivan) ::: The tractor is newer than the minivan\nNewer(Limousine, Tractor) ::: The limousine is newer than the tractor\nOlder(Convertible, Sedan) ::: The convertible is older than the sedan\nSecondNewest(Convertible) ::: The convertible is the second-newest\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest\nis_valid(SecondNewest(Sedan)) ::: B) The sedan is the second-newest\nis_valid(SecondNewest(Tractor)) ::: C) The tractor is the second-newest\nis_valid(SecondNewest(Minivan)) ::: D) The minivan is the second-newest\nis_valid(SecondNewest(Limousine)) ::: E) The limousine is the second-newest"
            }
        ]
    },
    {
        "id": "logical_deduction_2",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a station wagon, a sedan, a tractor, a motorcyle, and a limousine. The tractor is newer than the motorcyle. The motorcyle is newer than the sedan. The limousine is the oldest. The station wagon is the newest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The station wagon is the oldest.",
            "B) The sedan is the oldest.",
            "C) The tractor is the oldest.",
            "D) The motorcyle is the oldest.",
            "E) The limousine is the oldest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest among the five vehicles.\nNewest($x, bool)                   ::: Vehicle $x is the newest among the five vehicles.\nFacts:\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(tractor, True)             ::: The tractor.\nVehicle(motorcyle, True)           ::: The motorcyle.\nVehicle(limousine, True)           ::: The limousine.\nNewer(tractor, motorcyle, True)    ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan, True)      ::: The motorcyle is newer than the sedan.\nOldest(limousine, True)            ::: The limousine is the oldest.\nNewest(station_wagon, True)        ::: The station wagon is the newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($x, True) >>> (Older($x, station_wagon, True) && Older($x, sedan, True) && Older($x, tractor, True) && Older($x, motorcyle, True)) ::: The oldest vehicle is older than all others.\nNewest($x, True) >>> (Newer($x, sedan, True) && Newer($x, tractor, True) && Newer($x, motorcyle, True) && Newer($x, limousine, True)) ::: The newest vehicle is newer than all others.\nQuery:\nOldest(station_wagon, True)  ::: Option A\nOldest(sedan, True)          ::: Option B\nOldest(tractor, True)        ::: Option C\nOldest(motorcyle, True)      ::: Option D\nOldest(limousine, True)      ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nOldest(x) ::: Vehicle x is the oldest among the five vehicles.\nNewest(x) ::: Vehicle x is the newest among the five vehicles.\nPremises:\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, motorcyle) ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan) ::: The motorcyle is newer than the sedan.\nOldest(limousine) ::: The limousine is the oldest.\nNewest(station_wagon) ::: The station wagon is the newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x (Oldest(x) \u2192 (Older(x, station_wagon) \u2227 Older(x, sedan) \u2227 Older(x, tractor) \u2227 Older(x, motorcyle))) ::: The oldest vehicle is older than all others.\n\u2200x (Newest(x) \u2192 (Newer(x, sedan) \u2227 Newer(x, tractor) \u2227 Newer(x, motorcyle) \u2227 Newer(x, limousine))) ::: The newest vehicle is newer than all others.\nConclusion:\nOldest(station_wagon) ::: Option A\nOldest(sedan) ::: Option B\nOldest(tractor) ::: Option C\nOldest(motorcyle) ::: Option D\nOldest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([StationWagon, Sedan, Tractor, Motorcycle, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Motorcycle) ::: The tractor is newer than the motorcycle\nNewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan\nOldest(Limousine) ::: The limousine is the oldest\nNewest(StationWagon) ::: The station wagon is the newest\nForAll([x:Vehicle], Implies(Oldest(x), And(Older(x, StationWagon), Older(x, Sedan), Older(x, Tractor), Older(x, Motorcycle)))) ::: The oldest is older than all others\nForAll([x:Vehicle], Implies(Newest(x), And(Newer(x, Sedan), Newer(x, Tractor), Newer(x, Motorcycle), Newer(x, Limousine)))) ::: The newest is newer than all others\n# Options\nis_valid(Oldest(StationWagon)) ::: A) The station wagon is the oldest.\nis_valid(Oldest(Sedan)) ::: B) The sedan is the oldest.\nis_valid(Oldest(Tractor)) ::: C) The tractor is the oldest.\nis_valid(Oldest(Motorcycle)) ::: D) The motorcycle is the oldest.\nis_valid(Oldest(Limousine)) ::: E) The limousine is the oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest among the five vehicles.\nNewest($x, bool)                   ::: Vehicle $x is the newest among the five vehicles.\nFacts:\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(tractor, True)             ::: The tractor.\nVehicle(motorcyle, True)           ::: The motorcyle.\nVehicle(limousine, True)           ::: The limousine.\nNewer(tractor, motorcyle, True)    ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan, True)      ::: The motorcyle is newer than the sedan.\nOldest(limousine, True)            ::: The limousine is the oldest.\nNewest(station_wagon, True)        ::: The station wagon is the newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($x, True) >>> (Older($x, station_wagon, True) && Older($x, sedan, True) && Older($x, tractor, True) && Older($x, motorcyle, True)) ::: The oldest vehicle is older than all others.\nNewest($x, True) >>> (Newer($x, sedan, True) && Newer($x, tractor, True) && Newer($x, motorcyle, True) && Newer($x, limousine, True)) ::: The newest vehicle is newer than all others.\nQuery:\nOldest(station_wagon, True)  ::: Option A\nOldest(sedan, True)          ::: Option B\nOldest(tractor, True)        ::: Option C\nOldest(motorcyle, True)      ::: Option D\nOldest(limousine, True)      ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nOldest(x) ::: Vehicle x is the oldest among the five vehicles.\nNewest(x) ::: Vehicle x is the newest among the five vehicles.\nPremises:\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, motorcyle) ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan) ::: The motorcyle is newer than the sedan.\nOldest(limousine) ::: The limousine is the oldest.\nNewest(station_wagon) ::: The station wagon is the newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x (Oldest(x) \u2192 (Older(x, station_wagon) \u2227 Older(x, sedan) \u2227 Older(x, tractor) \u2227 Older(x, motorcyle))) ::: The oldest vehicle is older than all others.\n\u2200x (Newest(x) \u2192 (Newer(x, sedan) \u2227 Newer(x, tractor) \u2227 Newer(x, motorcyle) \u2227 Newer(x, limousine))) ::: The newest vehicle is newer than all others.\nConclusion:\nOldest(station_wagon) ::: Option A\nOldest(sedan) ::: Option B\nOldest(tractor) ::: Option C\nOldest(motorcyle) ::: Option D\nOldest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([StationWagon, Sedan, Tractor, Motorcycle, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nOldest = Function([Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: If x is newer than y, then y is older than x\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: If x is older than y, then y is newer than x\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\nNewer(Tractor, Motorcycle) ::: The tractor is newer than the motorcycle\nNewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan\nOldest(Limousine) ::: The limousine is the oldest\nNewest(StationWagon) ::: The station wagon is the newest\nForAll([x:Vehicle], Implies(Oldest(x), And(Older(x, StationWagon), Older(x, Sedan), Older(x, Tractor), Older(x, Motorcycle)))) ::: The oldest is older than all others\nForAll([x:Vehicle], Implies(Newest(x), And(Newer(x, Sedan), Newer(x, Tractor), Newer(x, Motorcycle), Newer(x, Limousine)))) ::: The newest is newer than all others\n# Options\nis_valid(Oldest(StationWagon)) ::: A) The station wagon is the oldest.\nis_valid(Oldest(Sedan)) ::: B) The sedan is the oldest.\nis_valid(Oldest(Tractor)) ::: C) The tractor is the oldest.\nis_valid(Oldest(Motorcycle)) ::: D) The motorcycle is the oldest.\nis_valid(Oldest(Limousine)) ::: E) The limousine is the oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_3",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, plums, apples, peaches, and kiwis. The apples are less expensive than the peaches. The plums are the cheapest. The kiwis are the second-cheapest. The watermelons are more expensive than the peaches.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the most expensive.",
            "B) The plums are the most expensive.",
            "C) The apples are the most expensive.",
            "D) The peaches are the most expensive.",
            "E) The kiwis are the most expensive."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest.\nSecondCheapest($x, bool)          ::: Fruit $x is the second-cheapest.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nFacts:\nFruit(watermelons, True)          ::: The watermelons.\nFruit(plums, True)                ::: The plums.\nFruit(apples, True)               ::: The apples.\nFruit(peaches, True)              ::: The peaches.\nFruit(kiwis, True)                ::: The kiwis.\nCheaper(apples, peaches, True)    ::: The apples are less expensive than the peaches.\nCheapest(plums, True)             ::: The plums are the cheapest.\nSecondCheapest(kiwis, True)       ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons, True) ::: The watermelons are more expensive than the peaches.\nRules:\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nCheapest($x, True) >>> Cheaper($x, watermelons, True) && Cheaper($x, plums, True) && Cheaper($x, apples, True) && Cheaper($x, peaches, True) && Cheaper($x, kiwis, True) ::: The cheapest fruit is cheaper than all others.\nSecondCheapest($x, True) >>> Cheaper(plums, $x, True) && !Cheapest($x, True) && !MostExpensive($x, True) ::: The second-cheapest is more expensive than the cheapest but not the most expensive.\nCheaper($a, $b, True) >>> !Cheaper($b, $a, True) ::: Cheaper is asymmetric.\nMostExpensive($x, True) >>> Cheaper(watermelons, $x, True) && Cheaper(plums, $x, True) && Cheaper(apples, $x, True) && Cheaper(peaches, $x, True) && Cheaper(kiwis, $x, True) ::: The most expensive fruit is more expensive than all others.\nQuery:\nMostExpensive(watermelons, True)  ::: Option A\nMostExpensive(plums, True)        ::: Option B\nMostExpensive(apples, True)       ::: Option C\nMostExpensive(peaches, True)      ::: Option D\nMostExpensive(kiwis, True)        ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nCheapest(x) ::: x is the cheapest.\nSecondCheapest(x) ::: x is the second-cheapest.\nMostExpensive(x) ::: x is the most expensive.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(plums) ::: The plums.\nFruit(apples) ::: The apples.\nFruit(peaches) ::: The peaches.\nFruit(kiwis) ::: The kiwis.\nCheaper(apples, peaches) ::: The apples are less expensive than the peaches.\nCheapest(plums) ::: The plums are the cheapest.\nSecondCheapest(kiwis) ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons) ::: The watermelons are more expensive than the peaches.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (Cheapest(x) \u2192 (Cheaper(x, watermelons) \u2227 Cheaper(x, plums) \u2227 Cheaper(x, apples) \u2227 Cheaper(x, peaches) \u2227 Cheaper(x, kiwis))) ::: The cheapest is cheaper than all others.\n\u2200x (SecondCheapest(x) \u2192 (Cheaper(plums, x) \u2227 \u00acCheapest(x) \u2227 \u00acMostExpensive(x))) ::: The second-cheapest is more expensive than the cheapest but not the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x (MostExpensive(x) \u2192 (Cheaper(watermelons, x) \u2227 Cheaper(plums, x) \u2227 Cheaper(apples, x) \u2227 Cheaper(peaches, x) \u2227 Cheaper(kiwis, x))) ::: The most expensive is more expensive than all others.\nConclusion:\nMostExpensive(watermelons) ::: Option A\nMostExpensive(plums) ::: Option B\nMostExpensive(apples) ::: Option C\nMostExpensive(peaches) ::: Option D\nMostExpensive(kiwis) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Watermelons, Plums, Apples, Peaches, Kiwis])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Apples) < price(Peaches) ::: The apples are less expensive than the peaches.\nprice(Plums) == 1 ::: The plums are the cheapest.\nprice(Kiwis) == 2 ::: The kiwis are the second-cheapest.\nprice(Peaches) < price(Watermelons) ::: The watermelons are more expensive than the peaches.\n# Options\nis_valid(price(Watermelons) == 5) ::: A) The watermelons are the most expensive.\nis_valid(price(Plums) == 5) ::: B) The plums are the most expensive.\nis_valid(price(Apples) == 5) ::: C) The apples are the most expensive.\nis_valid(price(Peaches) == 5) ::: D) The peaches are the most expensive.\nis_valid(price(Kiwis) == 5) ::: E) The kiwis are the most expensive."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest.\nSecondCheapest($x, bool)          ::: Fruit $x is the second-cheapest.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nFacts:\nFruit(watermelons, True)          ::: The watermelons.\nFruit(plums, True)                ::: The plums.\nFruit(apples, True)               ::: The apples.\nFruit(peaches, True)              ::: The peaches.\nFruit(kiwis, True)                ::: The kiwis.\nCheaper(apples, peaches, True)    ::: The apples are less expensive than the peaches.\nCheapest(plums, True)             ::: The plums are the cheapest.\nSecondCheapest(kiwis, True)       ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons, True) ::: The watermelons are more expensive than the peaches.\nRules:\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nCheapest($x, True) >>> Cheaper($x, watermelons, True) && Cheaper($x, plums, True) && Cheaper($x, apples, True) && Cheaper($x, peaches, True) && Cheaper($x, kiwis, True) ::: The cheapest fruit is cheaper than all others.\nSecondCheapest($x, True) >>> Cheaper(plums, $x, True) && !Cheapest($x, True) && !MostExpensive($x, True) ::: The second-cheapest is more expensive than the cheapest but not the most expensive.\nCheaper($a, $b, True) >>> !Cheaper($b, $a, True) ::: Cheaper is asymmetric.\nMostExpensive($x, True) >>> Cheaper(watermelons, $x, True) && Cheaper(plums, $x, True) && Cheaper(apples, $x, True) && Cheaper(peaches, $x, True) && Cheaper(kiwis, $x, True) ::: The most expensive fruit is more expensive than all others.\nQuery:\nMostExpensive(watermelons, True)  ::: Option A\nMostExpensive(plums, True)        ::: Option B\nMostExpensive(apples, True)       ::: Option C\nMostExpensive(peaches, True)      ::: Option D\nMostExpensive(kiwis, True)        ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nCheapest(x) ::: x is the cheapest.\nSecondCheapest(x) ::: x is the second-cheapest.\nMostExpensive(x) ::: x is the most expensive.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(plums) ::: The plums.\nFruit(apples) ::: The apples.\nFruit(peaches) ::: The peaches.\nFruit(kiwis) ::: The kiwis.\nCheaper(apples, peaches) ::: The apples are less expensive than the peaches.\nCheapest(plums) ::: The plums are the cheapest.\nSecondCheapest(kiwis) ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons) ::: The watermelons are more expensive than the peaches.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (Cheapest(x) \u2192 (Cheaper(x, watermelons) \u2227 Cheaper(x, plums) \u2227 Cheaper(x, apples) \u2227 Cheaper(x, peaches) \u2227 Cheaper(x, kiwis))) ::: The cheapest is cheaper than all others.\n\u2200x (SecondCheapest(x) \u2192 (Cheaper(plums, x) \u2227 \u00acCheapest(x) \u2227 \u00acMostExpensive(x))) ::: The second-cheapest is more expensive than the cheapest but not the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x (MostExpensive(x) \u2192 (Cheaper(watermelons, x) \u2227 Cheaper(plums, x) \u2227 Cheaper(apples, x) \u2227 Cheaper(peaches, x) \u2227 Cheaper(kiwis, x))) ::: The most expensive is more expensive than all others.\nConclusion:\nMostExpensive(watermelons) ::: Option A\nMostExpensive(plums) ::: Option B\nMostExpensive(apples) ::: Option C\nMostExpensive(peaches) ::: Option D\nMostExpensive(kiwis) ::: Option E",
                "SAT": "# Declarations\nfruits = EnumSort([Watermelons, Plums, Apples, Peaches, Kiwis])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Apples) < price(Peaches) ::: The apples are less expensive than the peaches.\nprice(Plums) == 1 ::: The plums are the cheapest.\nprice(Kiwis) == 2 ::: The kiwis are the second-cheapest.\nprice(Peaches) < price(Watermelons) ::: The watermelons are more expensive than the peaches.\n# Options\nis_valid(price(Watermelons) == 5) ::: A) The watermelons are the most expensive.\nis_valid(price(Plums) == 5) ::: B) The plums are the most expensive.\nis_valid(price(Apples) == 5) ::: C) The apples are the most expensive.\nis_valid(price(Peaches) == 5) ::: D) The peaches are the most expensive.\nis_valid(price(Kiwis) == 5) ::: E) The kiwis are the most expensive."
            }
        ]
    },
    {
        "id": "logical_deduction_4",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a crow, a falcon, a robin, and a blue jay. The robin is to the right of the cardinal. The cardinal is to the right of the blue jay. The blue jay is the second from the left. The crow is the rightmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the second from the left.",
            "B) The crow is the second from the left.",
            "C) The falcon is the second from the left.",
            "D) The robin is the second from the left.",
            "E) The blue jay is the second from the left."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow,     True)            ::: The crow.\nBird(falcon,   True)            ::: The falcon.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromLeft($s, True) && LeftOf($s, $rm, True) && LeftOf($rm, $x, True) >>> SecondFromLeft($x, False) ::: If $s is second from left, then no other bird is second from left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(crow,     True)  ::: Option B\nSecondFromLeft(falcon,   True)  ::: Option C\nSecondFromLeft(robin,    True)  ::: Option D\nSecondFromLeft(blue_jay, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2200y (y \u2260 x \u2192 \u00acSecondFromLeft(y))) ::: Only one bird can be second from left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(falcon) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(blue_jay) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Cardinal, Crow, Falcon, Robin, BlueJay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Cardinal) ::: The robin is to the right of the cardinal.\npos(Cardinal) > pos(BlueJay) ::: The cardinal is to the right of the blue jay.\npos(BlueJay) == 2 ::: The blue jay is the second from the left.\npos(Crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Falcon) == 2) ::: C) The falcon is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: E) The blue jay is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow,     True)            ::: The crow.\nBird(falcon,   True)            ::: The falcon.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nSecondFromLeft($s, True) && LeftOf($s, $rm, True) && LeftOf($rm, $x, True) >>> SecondFromLeft($x, False) ::: If $s is second from left, then no other bird is second from left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(crow,     True)  ::: Option B\nSecondFromLeft(falcon,   True)  ::: Option C\nSecondFromLeft(robin,    True)  ::: Option D\nSecondFromLeft(blue_jay, True)  ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2200y (y \u2260 x \u2192 \u00acSecondFromLeft(y))) ::: Only one bird can be second from left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(falcon) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(blue_jay) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Cardinal, Crow, Falcon, Robin, BlueJay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Cardinal) ::: The robin is to the right of the cardinal.\npos(Cardinal) > pos(BlueJay) ::: The cardinal is to the right of the blue jay.\npos(BlueJay) == 2 ::: The blue jay is the second from the left.\npos(Crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Falcon) == 2) ::: C) The falcon is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: E) The blue jay is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_5",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a sedan, a station wagon, a bus, and a limousine. The sedan is newer than the station wagon. The limousine is the newest. The bus is the second-newest. The convertible is the second-oldest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the second-oldest.",
            "B) The sedan is the second-oldest.",
            "C) The station wagon is the second-oldest.",
            "D) The bus is the second-oldest.",
            "E) The limousine is the second-oldest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(convertible, True)          ::: The convertible.\nVehicle(sedan, True)                ::: The sedan.\nVehicle(station_wagon, True)        ::: The station wagon.\nVehicle(bus, True)                  ::: The bus.\nVehicle(limousine, True)            ::: The limousine.\nNewer(sedan, station_wagon, True)   ::: The sedan is newer than the station wagon.\nNewest(limousine, True)             ::: The limousine is the newest.\nSecondNewest(bus, True)             ::: The bus is the second-newest.\nSecondOldest(convertible, True)     ::: The convertible is the second-oldest.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nSecondNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newest($e, True) ::: The second-newest is newer than all except the newest.\nSecondOldest($a, True) >>> Newer($b, $a, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is newer than all except the oldest.\nQuery:\nSecondOldest(convertible, True)    ::: Option A\nSecondOldest(sedan, True)          ::: Option B\nSecondOldest(station_wagon, True)   ::: Option C\nSecondOldest(bus, True)            ::: Option D\nSecondOldest(limousine, True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(limousine) ::: The limousine.\nNewer(sedan, station_wagon) ::: The sedan is newer than the station wagon.\nNewest(limousine) ::: The limousine is the newest.\nSecondNewest(bus) ::: The bus is the second-newest.\nSecondOldest(convertible) ::: The convertible is the second-oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (SecondNewest(x) \u2192 (\u2203y (Newest(y) \u2227 \u2200z (z \u2260 y \u2192 (z = x \u2228 Newer(x, z)))))) ::: The second-newest is newer than all except the newest.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (\u00acNewer(y, x) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z))))) ::: The second-oldest is newer than all except the oldest.\nConclusion:\nSecondOldest(convertible) ::: Option A\nSecondOldest(sedan) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, StationWagon, Bus, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: The newest is newer than all others\nForAll([x:Vehicle], Implies(SecondNewest(x), Exists([y:Vehicle], And(Newest(y), ForAll([z:Vehicle], Implies(z != y, Or(z == x, Newer(x, z))))))) ::: The second-newest is newer than all except the newest\nForAll([x:Vehicle], Implies(SecondOldest(x), Exists([y:Vehicle], And(Not(Newer(y, x)), ForAll([z:Vehicle], Implies(z != y, Newer(x, z)))))) ::: The second-oldest is newer than all except the oldest\nNewer(Sedan, StationWagon) ::: The sedan is newer than the station wagon\nNewest(Limousine) ::: The limousine is the newest\nSecondNewest(Bus) ::: The bus is the second-newest\nSecondOldest(Convertible) ::: The convertible is the second-oldest\n# Options\nis_valid(SecondOldest(Convertible)) ::: A) The convertible is the second-oldest.\nis_valid(SecondOldest(Sedan)) ::: B) The sedan is the second-oldest.\nis_valid(SecondOldest(StationWagon)) ::: C) The station wagon is the second-oldest.\nis_valid(SecondOldest(Bus)) ::: D) The bus is the second-oldest.\nis_valid(SecondOldest(Limousine)) ::: E) The limousine is the second-oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nSecondNewest($x, bool)             ::: Vehicle $x is the second-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(convertible, True)          ::: The convertible.\nVehicle(sedan, True)                ::: The sedan.\nVehicle(station_wagon, True)        ::: The station wagon.\nVehicle(bus, True)                  ::: The bus.\nVehicle(limousine, True)            ::: The limousine.\nNewer(sedan, station_wagon, True)   ::: The sedan is newer than the station wagon.\nNewest(limousine, True)             ::: The limousine is the newest.\nSecondNewest(bus, True)             ::: The bus is the second-newest.\nSecondOldest(convertible, True)     ::: The convertible is the second-oldest.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nSecondNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newest($e, True) ::: The second-newest is newer than all except the newest.\nSecondOldest($a, True) >>> Newer($b, $a, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is newer than all except the oldest.\nQuery:\nSecondOldest(convertible, True)    ::: Option A\nSecondOldest(sedan, True)          ::: Option B\nSecondOldest(station_wagon, True)   ::: Option C\nSecondOldest(bus, True)            ::: Option D\nSecondOldest(limousine, True)       ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(limousine) ::: The limousine.\nNewer(sedan, station_wagon) ::: The sedan is newer than the station wagon.\nNewest(limousine) ::: The limousine is the newest.\nSecondNewest(bus) ::: The bus is the second-newest.\nSecondOldest(convertible) ::: The convertible is the second-oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (SecondNewest(x) \u2192 (\u2203y (Newest(y) \u2227 \u2200z (z \u2260 y \u2192 (z = x \u2228 Newer(x, z)))))) ::: The second-newest is newer than all except the newest.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (\u00acNewer(y, x) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z))))) ::: The second-oldest is newer than all except the oldest.\nConclusion:\nSecondOldest(convertible) ::: Option A\nSecondOldest(sedan) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, StationWagon, Bus, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: \"Newer\" is asymmetric\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: The newest is newer than all others\nForAll([x:Vehicle], Implies(SecondNewest(x), Exists([y:Vehicle], And(Newest(y), ForAll([z:Vehicle], Implies(z != y, Or(z == x, Newer(x, z))))))) ::: The second-newest is newer than all except the newest\nForAll([x:Vehicle], Implies(SecondOldest(x), Exists([y:Vehicle], And(Not(Newer(y, x)), ForAll([z:Vehicle], Implies(z != y, Newer(x, z)))))) ::: The second-oldest is newer than all except the oldest\nNewer(Sedan, StationWagon) ::: The sedan is newer than the station wagon\nNewest(Limousine) ::: The limousine is the newest\nSecondNewest(Bus) ::: The bus is the second-newest\nSecondOldest(Convertible) ::: The convertible is the second-oldest\n# Options\nis_valid(SecondOldest(Convertible)) ::: A) The convertible is the second-oldest.\nis_valid(SecondOldest(Sedan)) ::: B) The sedan is the second-oldest.\nis_valid(SecondOldest(StationWagon)) ::: C) The station wagon is the second-oldest.\nis_valid(SecondOldest(Bus)) ::: D) The bus is the second-oldest.\nis_valid(SecondOldest(Limousine)) ::: E) The limousine is the second-oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_6",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a crow, a robin, a quail, a blue jay, and a falcon. The robin is to the left of the quail. The falcon is the third from the left. The crow is to the left of the falcon. The blue jay is the leftmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The crow is the third from the left.",
            "B) The robin is the third from the left.",
            "C) The quail is the third from the left.",
            "D) The blue jay is the third from the left.",
            "E) The falcon is the third from the left."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nPosition($x, $n, bool)          ::: Bird $x is at position $n from the left (1-based index).\nFacts:\nBird(crow,    True)             ::: The crow.\nBird(robin,   True)             ::: The robin.\nBird(quail,   True)             ::: The quail.\nBird(blue_jay, True)            ::: The blue jay.\nBird(falcon,  True)             ::: The falcon.\nLeftOf(robin, quail, True)      ::: The robin is to the left of the quail.\nPosition(falcon, 3, True)       ::: The falcon is the third from the left.\nLeftOf(crow, falcon, True)      ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1, True)     ::: The blue jay is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($a, $n, True) && Position($b, $m, True) && $n < $m >>> LeftOf($a, $b, True) ::: If $a is at a lower position than $b, then $a is left of $b.\nPosition($a, $n, True) && Position($b, $m, True) && $n > $m >>> RightOf($a, $b, True) ::: If $a is at a higher position than $b, then $a is right of $b.\nQuery:\nPosition(crow, 3, True)         ::: Option A\nPosition(robin, 3, True)        ::: Option B\nPosition(quail, 3, True)        ::: Option C\nPosition(blue_jay, 3, True)     ::: Option D\nPosition(falcon, 3, True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nPosition(x, n) ::: Bird x is at position n from the left (1-based index).\nPremises:\nBird(crow) ::: The crow.\nBird(robin) ::: The robin.\nBird(quail) ::: The quail.\nBird(blue_jay) ::: The blue jay.\nBird(falcon) ::: The falcon.\nLeftOf(robin, quail) ::: The robin is to the left of the quail.\nPosition(falcon, 3) ::: The falcon is the third from the left.\nLeftOf(crow, falcon) ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1) ::: The blue jay is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x \u2200y \u2200n \u2200m (Position(x, n) \u2227 Position(y, m) \u2227 n < m \u2192 LeftOf(x, y)) ::: Lower position implies left-of.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each bird has a unique position.\n\u2200n \u2203x Position(x, n) ::: Each position is occupied by some bird.\nConclusion:\nPosition(crow, 3) ::: Option A\nPosition(robin, 3) ::: Option B\nPosition(quail, 3) ::: Option C\nPosition(blue_jay, 3) ::: Option D\nPosition(falcon, 3) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Crow, Robin, Quail, BlueJay, Falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) < pos(Quail) ::: The robin is to the left of the quail.\npos(Falcon) == 3 ::: The falcon is the third from the left.\npos(Crow) < pos(Falcon) ::: The crow is to the left of the falcon.\npos(BlueJay) == 1 ::: The blue jay is the leftmost.\n# Options\nis_valid(pos(Crow) == 3) ::: A) The crow is the third from the left.\nis_valid(pos(Robin) == 3) ::: B) The robin is the third from the left.\nis_valid(pos(Quail) == 3) ::: C) The quail is the third from the left.\nis_valid(pos(BlueJay) == 3) ::: D) The blue jay is the third from the left.\nis_valid(pos(Falcon) == 3) ::: E) The falcon is the third from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nPosition($x, $n, bool)          ::: Bird $x is at position $n from the left (1-based index).\nFacts:\nBird(crow,    True)             ::: The crow.\nBird(robin,   True)             ::: The robin.\nBird(quail,   True)             ::: The quail.\nBird(blue_jay, True)            ::: The blue jay.\nBird(falcon,  True)             ::: The falcon.\nLeftOf(robin, quail, True)      ::: The robin is to the left of the quail.\nPosition(falcon, 3, True)       ::: The falcon is the third from the left.\nLeftOf(crow, falcon, True)      ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1, True)     ::: The blue jay is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($a, $n, True) && Position($b, $m, True) && $n < $m >>> LeftOf($a, $b, True) ::: If $a is at a lower position than $b, then $a is left of $b.\nPosition($a, $n, True) && Position($b, $m, True) && $n > $m >>> RightOf($a, $b, True) ::: If $a is at a higher position than $b, then $a is right of $b.\nQuery:\nPosition(crow, 3, True)         ::: Option A\nPosition(robin, 3, True)        ::: Option B\nPosition(quail, 3, True)        ::: Option C\nPosition(blue_jay, 3, True)     ::: Option D\nPosition(falcon, 3, True)       ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nPosition(x, n) ::: Bird x is at position n from the left (1-based index).\nPremises:\nBird(crow) ::: The crow.\nBird(robin) ::: The robin.\nBird(quail) ::: The quail.\nBird(blue_jay) ::: The blue jay.\nBird(falcon) ::: The falcon.\nLeftOf(robin, quail) ::: The robin is to the left of the quail.\nPosition(falcon, 3) ::: The falcon is the third from the left.\nLeftOf(crow, falcon) ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1) ::: The blue jay is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x \u2200y \u2200n \u2200m (Position(x, n) \u2227 Position(y, m) \u2227 n < m \u2192 LeftOf(x, y)) ::: Lower position implies left-of.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each bird has a unique position.\n\u2200n \u2203x Position(x, n) ::: Each position is occupied by some bird.\nConclusion:\nPosition(crow, 3) ::: Option A\nPosition(robin, 3) ::: Option B\nPosition(quail, 3) ::: Option C\nPosition(blue_jay, 3) ::: Option D\nPosition(falcon, 3) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Crow, Robin, Quail, BlueJay, Falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) < pos(Quail) ::: The robin is to the left of the quail.\npos(Falcon) == 3 ::: The falcon is the third from the left.\npos(Crow) < pos(Falcon) ::: The crow is to the left of the falcon.\npos(BlueJay) == 1 ::: The blue jay is the leftmost.\n# Options\nis_valid(pos(Crow) == 3) ::: A) The crow is the third from the left.\nis_valid(pos(Robin) == 3) ::: B) The robin is the third from the left.\nis_valid(pos(Quail) == 3) ::: C) The quail is the third from the left.\nis_valid(pos(BlueJay) == 3) ::: D) The blue jay is the third from the left.\nis_valid(pos(Falcon) == 3) ::: E) The falcon is the third from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_7",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a robin, a blue jay, a quail, and a raven. The robin is to the right of the raven. The cardinal is the leftmost. The raven is to the right of the blue jay. The blue jay is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the second from the left.",
            "B) The robin is the second from the left.",
            "C) The blue jay is the second from the left.",
            "D) The quail is the second from the left.",
            "E) The raven is the second from the left."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven,   True)   ::: The robin is to the right of the raven.\nLeftMost(cardinal, True)        ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay, True)   ::: The blue jay is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(quail,    True)  ::: Option D\nSecondFromLeft(raven,    True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftMost(cardinal) ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay) ::: The blue jay is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(quail) ::: Option D\nSecondFromLeft(raven) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([cardinal, robin, blue_jay, quail, raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(robin) > pos(raven) ::: The robin is to the right of the raven.\npos(cardinal) == 1 ::: The cardinal is the leftmost.\npos(raven) > pos(blue_jay) ::: The raven is to the right of the blue jay.\npos(blue_jay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(quail) == 2) ::: D) The quail is the second from the left.\nis_valid(pos(raven) == 2) ::: E) The raven is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven,   True)   ::: The robin is to the right of the raven.\nLeftMost(cardinal, True)        ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay, True)   ::: The blue jay is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(quail,    True)  ::: Option D\nSecondFromLeft(raven,    True)  ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftMost(cardinal) ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\nThirdFromLeft(blue_jay) ::: The blue jay is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(quail) ::: Option D\nSecondFromLeft(raven) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([cardinal, robin, blue_jay, quail, raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(robin) > pos(raven) ::: The robin is to the right of the raven.\npos(cardinal) == 1 ::: The cardinal is the leftmost.\npos(raven) > pos(blue_jay) ::: The raven is to the right of the blue jay.\npos(blue_jay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(quail) == 2) ::: D) The quail is the second from the left.\nis_valid(pos(raven) == 2) ::: E) The raven is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_8",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a robin, a blue jay, a hawk, and a hummingbird. The owl is the second from the right. The robin is the second from the left. The robin is to the right of the blue jay. The hummingbird is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the rightmost.",
            "B) The robin is the rightmost.",
            "C) The blue jay is the rightmost.",
            "D) The hawk is the rightmost.",
            "E) The hummingbird is the rightmost."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, owl, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, hawk, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: The second from the left implies three birds to its right.\nQuery:\nRightMost(owl, True)            ::: Option A\nRightMost(robin, True)          ::: Option B\nRightMost(blue_jay, True)       ::: Option C\nRightMost(hawk, True)           ::: Option D\nRightMost(hummingbird, True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay) \u2227 RightOf(x, hawk) \u2192 RightMost(x)) ::: A bird to the right of all others is right-most.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z \u2203w (LeftOf(x, y) \u2227 LeftOf(y, z) \u2227 LeftOf(z, w))) ::: Second from left implies three birds to its right.\nConclusion:\nRightMost(owl) ::: Option A\nRightMost(robin) ::: Option B\nRightMost(blue_jay) ::: Option C\nRightMost(hawk) ::: Option D\nRightMost(hummingbird) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right (position 4 in 1-5 ordering)\npos(Robin) == 2 ::: The robin is the second from the left\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk\n# Options\nis_valid(pos(Owl) == 5) ::: A) The owl is the rightmost\nis_valid(pos(Robin) == 5) ::: B) The robin is the rightmost\nis_valid(pos(BlueJay) == 5) ::: C) The blue jay is the rightmost\nis_valid(pos(Hawk) == 5) ::: D) The hawk is the rightmost\nis_valid(pos(Hummingbird) == 5) ::: E) The hummingbird is the rightmost"
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nRightOf($b, owl, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, hawk, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right-most bird.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: The second from the left implies three birds to its right.\nQuery:\nRightMost(owl, True)            ::: Option A\nRightMost(robin, True)          ::: Option B\nRightMost(blue_jay, True)       ::: Option C\nRightMost(hawk, True)           ::: Option D\nRightMost(hummingbird, True)    ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay) \u2227 RightOf(x, hawk) \u2192 RightMost(x)) ::: A bird to the right of all others is right-most.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z \u2203w (LeftOf(x, y) \u2227 LeftOf(y, z) \u2227 LeftOf(z, w))) ::: Second from left implies three birds to its right.\nConclusion:\nRightMost(owl) ::: Option A\nRightMost(robin) ::: Option B\nRightMost(blue_jay) ::: Option C\nRightMost(hawk) ::: Option D\nRightMost(hummingbird) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right (position 4 in 1-5 ordering)\npos(Robin) == 2 ::: The robin is the second from the left\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk\n# Options\nis_valid(pos(Owl) == 5) ::: A) The owl is the rightmost\nis_valid(pos(Robin) == 5) ::: B) The robin is the rightmost\nis_valid(pos(BlueJay) == 5) ::: C) The blue jay is the rightmost\nis_valid(pos(Hawk) == 5) ::: D) The hawk is the rightmost\nis_valid(pos(Hummingbird) == 5) ::: E) The hummingbird is the rightmost"
            }
        ]
    },
    {
        "id": "logical_deduction_9",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a brown book, an orange book, a red book, a purple book, and a black book. The purple book is to the left of the black book. The red book is to the right of the brown book. The orange book is the second from the left. The black book is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The brown book is the second from the right.",
            "B) The orange book is the second from the right.",
            "C) The red book is the second from the right.",
            "D) The purple book is the second from the right.",
            "E) The black book is the second from the right."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nPosition($x, $n, bool)          ::: Book $x is at position $n from the left (1-based index).\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(brown,  True)              ::: The brown book.\nBook(orange, True)              ::: The orange book.\nBook(red,    True)              ::: The red book.\nBook(purple, True)              ::: The purple book.\nBook(black,  True)              ::: The black book.\nLeftOf(purple, black, True)     ::: The purple book is to the left of the black book.\nRightOf(red, brown, True)       ::: The red book is to the right of the brown book.\nPosition(orange, 2, True)       ::: The orange book is the second from the left.\nPosition(black, 3, True)        ::: The black book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($x, $n, True) >>> Position($y, $n+1, True) && LeftOf($x, $y, True) ::: If $x is at position $n, then $y is at position $n+1 and $x is left of $y.\nPosition($x, $n, True) && Position($y, $n-1, True) >>> LeftOf($y, $x, True) ::: If $x is at position $n and $y is at position $n-1, then $y is left of $x.\nPosition($x, 5, True) >>> SecondFromRight($y, True) && Position($y, 4, True) ::: If $x is at position 5 (rightmost), then $y at position 4 is second from the right.\nPosition($x, 4, True) >>> SecondFromRight($x, True) ::: If $x is at position 4, then $x is second from the right.\nQuery:\nSecondFromRight(brown,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(red,    True)  ::: Option C\nSecondFromRight(purple, True)  ::: Option D\nSecondFromRight(black,  True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, n) ::: Book x is at position n from the left (1-based index).\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(brown) ::: The brown book.\nBook(orange) ::: The orange book.\nBook(red) ::: The red book.\nBook(purple) ::: The purple book.\nBook(black) ::: The black book.\nLeftOf(purple, black) ::: The purple book is to the left of the black book.\nLeftOf(brown, red) ::: The brown book is to the left of the red book.\nPosition(orange, 2) ::: The orange book is the second from the left.\nPosition(black, 3) ::: The black book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each book has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position has a unique book.\n\u2200x \u2200y (Position(x, n) \u2227 Position(y, n+1) \u2192 LeftOf(x, y)) ::: Adjacent positions imply ordering.\n\u2200x (Position(x, 5) \u2192 \u2203y (Position(y, 4) \u2227 SecondFromRight(y))) ::: The book at position 4 is second from the right.\n\u2200x (Position(x, 4) \u2192 SecondFromRight(x)) ::: The book at position 4 is second from the right.\nConclusion:\nSecondFromRight(brown) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(red) ::: Option C\nSecondFromRight(purple) ::: Option D\nSecondFromRight(black) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Brown, Orange, Red, Purple, Black])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) < pos(Black) ::: The purple book is to the left of the black book.\npos(Red) > pos(Brown) ::: The red book is to the right of the brown book.\npos(Orange) == 2 ::: The orange book is the second from the left.\npos(Black) == 3 ::: The black book is the third from the left.\n# Options\nis_valid(pos(Brown) == 4) ::: A) The brown book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Red) == 4) ::: C) The red book is the second from the right.\nis_valid(pos(Purple) == 4) ::: D) The purple book is the second from the right.\nis_valid(pos(Black) == 4) ::: E) The black book is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nPosition($x, $n, bool)          ::: Book $x is at position $n from the left (1-based index).\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(brown,  True)              ::: The brown book.\nBook(orange, True)              ::: The orange book.\nBook(red,    True)              ::: The red book.\nBook(purple, True)              ::: The purple book.\nBook(black,  True)              ::: The black book.\nLeftOf(purple, black, True)     ::: The purple book is to the left of the black book.\nRightOf(red, brown, True)       ::: The red book is to the right of the brown book.\nPosition(orange, 2, True)       ::: The orange book is the second from the left.\nPosition(black, 3, True)        ::: The black book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($x, $n, True) >>> Position($y, $n+1, True) && LeftOf($x, $y, True) ::: If $x is at position $n, then $y is at position $n+1 and $x is left of $y.\nPosition($x, $n, True) && Position($y, $n-1, True) >>> LeftOf($y, $x, True) ::: If $x is at position $n and $y is at position $n-1, then $y is left of $x.\nPosition($x, 5, True) >>> SecondFromRight($y, True) && Position($y, 4, True) ::: If $x is at position 5 (rightmost), then $y at position 4 is second from the right.\nPosition($x, 4, True) >>> SecondFromRight($x, True) ::: If $x is at position 4, then $x is second from the right.\nQuery:\nSecondFromRight(brown,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(red,    True)  ::: Option C\nSecondFromRight(purple, True)  ::: Option D\nSecondFromRight(black,  True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, n) ::: Book x is at position n from the left (1-based index).\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(brown) ::: The brown book.\nBook(orange) ::: The orange book.\nBook(red) ::: The red book.\nBook(purple) ::: The purple book.\nBook(black) ::: The black book.\nLeftOf(purple, black) ::: The purple book is to the left of the black book.\nLeftOf(brown, red) ::: The brown book is to the left of the red book.\nPosition(orange, 2) ::: The orange book is the second from the left.\nPosition(black, 3) ::: The black book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each book has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position has a unique book.\n\u2200x \u2200y (Position(x, n) \u2227 Position(y, n+1) \u2192 LeftOf(x, y)) ::: Adjacent positions imply ordering.\n\u2200x (Position(x, 5) \u2192 \u2203y (Position(y, 4) \u2227 SecondFromRight(y))) ::: The book at position 4 is second from the right.\n\u2200x (Position(x, 4) \u2192 SecondFromRight(x)) ::: The book at position 4 is second from the right.\nConclusion:\nSecondFromRight(brown) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(red) ::: Option C\nSecondFromRight(purple) ::: Option D\nSecondFromRight(black) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Brown, Orange, Red, Purple, Black])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) < pos(Black) ::: The purple book is to the left of the black book.\npos(Red) > pos(Brown) ::: The red book is to the right of the brown book.\npos(Orange) == 2 ::: The orange book is the second from the left.\npos(Black) == 3 ::: The black book is the third from the left.\n# Options\nis_valid(pos(Brown) == 4) ::: A) The brown book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Red) == 4) ::: C) The red book is the second from the right.\nis_valid(pos(Purple) == 4) ::: D) The purple book is the second from the right.\nis_valid(pos(Black) == 4) ::: E) The black book is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_10",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a robin, a blue jay, a hawk, and a hummingbird. The owl is the second from the right. The robin is the second from the left. The robin is to the right of the blue jay. The hummingbird is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the second from the left.",
            "B) The robin is the second from the left.",
            "C) The blue jay is the second from the left.",
            "D) The hawk is the second from the left.",
            "E) The hummingbird is the second from the left."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: $a is second from left implies there are three birds to its right.\nSecondFromRight($a, True) >>> RightOf($a, $b, True) && RightOf($b, $c, True) && RightOf($c, $d, True) ::: $a is second from right implies there are three birds to its left.\nQuery:\nSecondFromLeft(owl, True)       ::: Option A\nSecondFromLeft(robin, True)     ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(hawk, True)      ::: Option D\nSecondFromLeft(hummingbird, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z \u2203w (LeftOf(y, x) \u2227 LeftOf(x, z) \u2227 LeftOf(z, w))) ::: x is second from left implies three birds to its right.\n\u2200x (SecondFromRight(x) \u2192 \u2203y \u2203z \u2203w (RightOf(y, x) \u2227 RightOf(x, z) \u2227 RightOf(z, w))) ::: x is second from right implies three birds to its left.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(hawk) ::: Option D\nSecondFromLeft(hummingbird) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([owl, robin, blue_jay, hawk, hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(owl) == 4 ::: The owl is the second from the right.\npos(robin) == 2 ::: The robin is the second from the left.\npos(robin) > pos(blue_jay) ::: The robin is to the right of the blue jay.\npos(hummingbird) > pos(hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(hawk) == 2) ::: D) The hawk is the second from the left.\nis_valid(pos(hummingbird) == 2) ::: E) The hummingbird is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(owl, True)                 ::: The owl.\nBird(robin, True)               ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk, True)                ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($a, True) >>> LeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) ::: $a is second from left implies there are three birds to its right.\nSecondFromRight($a, True) >>> RightOf($a, $b, True) && RightOf($b, $c, True) && RightOf($c, $d, True) ::: $a is second from right implies there are three birds to its left.\nQuery:\nSecondFromLeft(owl, True)       ::: Option A\nSecondFromLeft(robin, True)     ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(hawk, True)      ::: Option D\nSecondFromLeft(hummingbird, True) ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(owl) ::: The owl.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(hawk) ::: The hawk.\nBird(hummingbird) ::: The hummingbird.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y \u2203z \u2203w (LeftOf(y, x) \u2227 LeftOf(x, z) \u2227 LeftOf(z, w))) ::: x is second from left implies three birds to its right.\n\u2200x (SecondFromRight(x) \u2192 \u2203y \u2203z \u2203w (RightOf(y, x) \u2227 RightOf(x, z) \u2227 RightOf(z, w))) ::: x is second from right implies three birds to its left.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(hawk) ::: Option D\nSecondFromLeft(hummingbird) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([owl, robin, blue_jay, hawk, hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(owl) == 4 ::: The owl is the second from the right.\npos(robin) == 2 ::: The robin is the second from the left.\npos(robin) > pos(blue_jay) ::: The robin is to the right of the blue jay.\npos(hummingbird) > pos(hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(blue_jay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(hawk) == 2) ::: D) The hawk is the second from the left.\nis_valid(pos(hummingbird) == 2) ::: E) The hummingbird is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_11",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a truck, a bus, a sedan, and a motorcyle. The bus is newer than the truck. The truck is newer than the convertible. The sedan is the second-oldest. The motorcyle is newer than the bus.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the newest.",
            "B) The truck is the newest.",
            "C) The bus is the newest.",
            "D) The sedan is the newest.",
            "E) The motorcyle is the newest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(truck, True)               ::: The truck.\nVehicle(bus, True)                 ::: The bus.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(motorcyle, True)           ::: The motorcyle.\nNewer(bus, truck, True)            ::: The bus is newer than the truck.\nNewer(truck, convertible, True)    ::: The truck is newer than the convertible.\nNewer(motorcyle, bus, True)        ::: The motorcyle is newer than the bus.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nNewer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) >>> Newest($a, True) ::: A vehicle that is newer than all the other four is the newest.\nNewer($b, $a, True) && Newer($c, $a, True) && Newer($d, $a, True) && Newer($e, $a, True) >>> Oldest($a, True) ::: A vehicle that is older than all the other four is the oldest.\nQuery:\nNewest(convertible, True)          ::: Option A\nNewest(truck, True)               ::: Option B\nNewest(bus, True)                 ::: Option C\nNewest(sedan, True)               ::: Option D\nNewest(motorcyle, True)           ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(truck) ::: The truck.\nVehicle(bus) ::: The bus.\nVehicle(sedan) ::: The sedan.\nVehicle(motorcyle) ::: The motorcyle.\nNewer(bus, truck) ::: The bus is newer than the truck.\nNewer(truck, convertible) ::: The truck is newer than the convertible.\nNewer(motorcyle, bus) ::: The motorcyle is newer than the bus.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: Newer is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Newest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(x, y)))) ::: A vehicle is newest if it is newer than all others.\n\u2200x (Oldest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(y, x)))) ::: A vehicle is oldest if it is older than all others.\nConclusion:\nNewest(convertible) ::: Option A\nNewest(truck) ::: Option B\nNewest(bus) ::: Option C\nNewest(sedan) ::: Option D\nNewest(motorcyle) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Truck, Bus, Sedan, Motorcycle])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\n# Constraints\nNewer(Bus, Truck) ::: The bus is newer than the truck.\nNewer(Truck, Convertible) ::: The truck is newer than the convertible.\nNewer(Motorcycle, Bus) ::: The motorcycle is newer than the bus.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: Newer is asymmetric.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z)) ::: Newer is transitive.\nForAll([x:Vehicle], Implies(And(Vehicle(x), ForAll([y:Vehicle], Implies(And(Vehicle(y), Not(y == x)), Newer(x, y)))), Newest(x))) ::: A vehicle is newest if it is newer than all others.\nForAll([x:Vehicle], Implies(And(Vehicle(x), ForAll([y:Vehicle], Implies(And(Vehicle(y), Not(y == x)), Newer(y, x))), Oldest(x))) ::: A vehicle is oldest if it is older than all others.\n# Options\nis_valid(Newest(Convertible)) ::: A) The convertible is the newest.\nis_valid(Newest(Truck)) ::: B) The truck is the newest.\nis_valid(Newest(Bus)) ::: C) The bus is the newest.\nis_valid(Newest(Sedan)) ::: D) The sedan is the newest.\nis_valid(Newest(Motorcycle)) ::: E) The motorcycle is the newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(truck, True)               ::: The truck.\nVehicle(bus, True)                 ::: The bus.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(motorcyle, True)           ::: The motorcyle.\nNewer(bus, truck, True)            ::: The bus is newer than the truck.\nNewer(truck, convertible, True)    ::: The truck is newer than the convertible.\nNewer(motorcyle, bus, True)        ::: The motorcyle is newer than the bus.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nNewer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) >>> Newest($a, True) ::: A vehicle that is newer than all the other four is the newest.\nNewer($b, $a, True) && Newer($c, $a, True) && Newer($d, $a, True) && Newer($e, $a, True) >>> Oldest($a, True) ::: A vehicle that is older than all the other four is the oldest.\nQuery:\nNewest(convertible, True)          ::: Option A\nNewest(truck, True)               ::: Option B\nNewest(bus, True)                 ::: Option C\nNewest(sedan, True)               ::: Option D\nNewest(motorcyle, True)           ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(truck) ::: The truck.\nVehicle(bus) ::: The bus.\nVehicle(sedan) ::: The sedan.\nVehicle(motorcyle) ::: The motorcyle.\nNewer(bus, truck) ::: The bus is newer than the truck.\nNewer(truck, convertible) ::: The truck is newer than the convertible.\nNewer(motorcyle, bus) ::: The motorcyle is newer than the bus.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: Newer is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Newest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(x, y)))) ::: A vehicle is newest if it is newer than all others.\n\u2200x (Oldest(x) \u2194 (Vehicle(x) \u2227 \u2200y (Vehicle(y) \u2227 y \u2260 x \u2192 Newer(y, x)))) ::: A vehicle is oldest if it is older than all others.\nConclusion:\nNewest(convertible) ::: Option A\nNewest(truck) ::: Option B\nNewest(bus) ::: Option C\nNewest(sedan) ::: Option D\nNewest(motorcyle) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Truck, Bus, Sedan, Motorcycle])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\n# Constraints\nNewer(Bus, Truck) ::: The bus is newer than the truck.\nNewer(Truck, Convertible) ::: The truck is newer than the convertible.\nNewer(Motorcycle, Bus) ::: The motorcycle is newer than the bus.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Not(Newer(y, x)))) ::: Newer is asymmetric.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z)) ::: Newer is transitive.\nForAll([x:Vehicle], Implies(And(Vehicle(x), ForAll([y:Vehicle], Implies(And(Vehicle(y), Not(y == x)), Newer(x, y)))), Newest(x))) ::: A vehicle is newest if it is newer than all others.\nForAll([x:Vehicle], Implies(And(Vehicle(x), ForAll([y:Vehicle], Implies(And(Vehicle(y), Not(y == x)), Newer(y, x))), Oldest(x))) ::: A vehicle is oldest if it is older than all others.\n# Options\nis_valid(Newest(Convertible)) ::: A) The convertible is the newest.\nis_valid(Newest(Truck)) ::: B) The truck is the newest.\nis_valid(Newest(Bus)) ::: C) The bus is the newest.\nis_valid(Newest(Sedan)) ::: D) The sedan is the newest.\nis_valid(Newest(Motorcycle)) ::: E) The motorcycle is the newest."
            }
        ]
    },
    {
        "id": "logical_deduction_12",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn a golf tournament, there were five golfers: Eve, Rob, Ana, Eli, and Mya. Eli finished below Mya. Eve finished first. Ana finished below Eli. Rob finished second.",
        "question": "Which of the following is true?",
        "options": [
            "A) Eve finished third.",
            "B) Rob finished third.",
            "C) Ana finished third.",
            "D) Eli finished third.",
            "E) Mya finished third."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedBelow($x, $y, bool)        ::: Golfer $x finished below golfer $y.\nFinishedFirst($x, bool)            ::: Golfer $x finished first.\nFinishedSecond($x, bool)           ::: Golfer $x finished second.\nFinishedThird($x, bool)            ::: Golfer $x finished third.\nFacts:\nGolfer(Eve, True)                  ::: Eve is one of the golfers.\nGolfer(Rob, True)                  ::: Rob is one of the golfers.\nGolfer(Ana, True)                  ::: Ana is one of the golfers.\nGolfer(Eli, True)                  ::: Eli is one of the golfers.\nGolfer(Mya, True)                  ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya, True)      ::: Eli finished below Mya.\nFinishedFirst(Eve, True)           ::: Eve finished first.\nFinishedBelow(Ana, Eli, True)      ::: Ana finished below Eli.\nFinishedSecond(Rob, True)          ::: Rob finished second.\nRules:\nFinishedBelow($a, $b, True) >>> !FinishedBelow($b, $a, True) ::: If $a finished below $b, then $b did not finish below $a.\nFinishedFirst($a, True) >>> !FinishedBelow($a, $b, True) ::: If $a finished first, then $a did not finish below any other golfer.\nFinishedSecond($a, True) >>> !FinishedBelow($a, $b, True) && FinishedBelow($b, $a, True) ::: If $a finished second, then $a did not finish below any other golfer except the first.\nFinishedThird($a, True) >>> FinishedBelow($a, $b, True) && FinishedBelow($a, $c, True) && !FinishedBelow($a, $d, True) ::: If $a finished third, then $a finished below two golfers and not below the remaining two.\nQuery:\nFinishedThird(Eve, True)  ::: Option A\nFinishedThird(Rob, True)  ::: Option B\nFinishedThird(Ana, True)  ::: Option C\nFinishedThird(Eli, True)  ::: Option D\nFinishedThird(Mya, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedFirst(x) ::: Golfer x finished first.\nFinishedSecond(x) ::: Golfer x finished second.\nFinishedThird(x) ::: Golfer x finished third.\nPremises:\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya) ::: Eli finished below Mya.\nFinishedFirst(Eve) ::: Eve finished first.\nFinishedBelow(Ana, Eli) ::: Ana finished below Eli.\nFinishedSecond(Rob) ::: Rob finished second.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 \u00acFinishedBelow(y, x)) ::: If x finished below y, then y did not finish below x.\n\u2200x (FinishedFirst(x) \u2192 \u2200y \u00acFinishedBelow(x, y)) ::: If x finished first, then x did not finish below any other golfer.\n\u2200x (FinishedSecond(x) \u2192 (\u2200y \u00acFinishedBelow(x, y) \u2228 (\u2203z (FinishedFirst(z) \u2227 FinishedBelow(y, x))) ::: If x finished second, then x did not finish below any other golfer except the first.\n\u2200x (FinishedThird(x) \u2192 (\u2203y \u2203z (FinishedBelow(x, y) \u2227 FinishedBelow(x, z) \u2227 y \u2260 z) \u2227 \u2200w (\u00acFinishedBelow(x, w) \u2228 w = y \u2228 w = z))) ::: If x finished third, then x finished below two golfers and not below the remaining two.\nConclusion:\nFinishedThird(Eve) ::: Option A\nFinishedThird(Rob) ::: Option B\nFinishedThird(Ana) ::: Option C\nFinishedThird(Eli) ::: Option D\nFinishedThird(Mya) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nGolfers = EnumSort([Eve, Rob, Ana, Eli, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Eve) == 1 ::: Eve finished first.\npos(Rob) == 2 ::: Rob finished second.\npos(Eli) > pos(Mya) ::: Eli finished below Mya.\npos(Ana) > pos(Eli) ::: Ana finished below Eli.\n# Options\nis_valid(pos(Eve) == 3) ::: A) Eve finished third.\nis_valid(pos(Rob) == 3) ::: B) Rob finished third.\nis_valid(pos(Ana) == 3) ::: C) Ana finished third.\nis_valid(pos(Eli) == 3) ::: D) Eli finished third.\nis_valid(pos(Mya) == 3) ::: E) Mya finished third."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nGolfer($x, bool)                  ::: $x is one of the five golfers.\nFinishedBelow($x, $y, bool)        ::: Golfer $x finished below golfer $y.\nFinishedFirst($x, bool)            ::: Golfer $x finished first.\nFinishedSecond($x, bool)           ::: Golfer $x finished second.\nFinishedThird($x, bool)            ::: Golfer $x finished third.\nFacts:\nGolfer(Eve, True)                  ::: Eve is one of the golfers.\nGolfer(Rob, True)                  ::: Rob is one of the golfers.\nGolfer(Ana, True)                  ::: Ana is one of the golfers.\nGolfer(Eli, True)                  ::: Eli is one of the golfers.\nGolfer(Mya, True)                  ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya, True)      ::: Eli finished below Mya.\nFinishedFirst(Eve, True)           ::: Eve finished first.\nFinishedBelow(Ana, Eli, True)      ::: Ana finished below Eli.\nFinishedSecond(Rob, True)          ::: Rob finished second.\nRules:\nFinishedBelow($a, $b, True) >>> !FinishedBelow($b, $a, True) ::: If $a finished below $b, then $b did not finish below $a.\nFinishedFirst($a, True) >>> !FinishedBelow($a, $b, True) ::: If $a finished first, then $a did not finish below any other golfer.\nFinishedSecond($a, True) >>> !FinishedBelow($a, $b, True) && FinishedBelow($b, $a, True) ::: If $a finished second, then $a did not finish below any other golfer except the first.\nFinishedThird($a, True) >>> FinishedBelow($a, $b, True) && FinishedBelow($a, $c, True) && !FinishedBelow($a, $d, True) ::: If $a finished third, then $a finished below two golfers and not below the remaining two.\nQuery:\nFinishedThird(Eve, True)  ::: Option A\nFinishedThird(Rob, True)  ::: Option B\nFinishedThird(Ana, True)  ::: Option C\nFinishedThird(Eli, True)  ::: Option D\nFinishedThird(Mya, True)  ::: Option E",
                "FOL": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedFirst(x) ::: Golfer x finished first.\nFinishedSecond(x) ::: Golfer x finished second.\nFinishedThird(x) ::: Golfer x finished third.\nPremises:\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya) ::: Eli finished below Mya.\nFinishedFirst(Eve) ::: Eve finished first.\nFinishedBelow(Ana, Eli) ::: Ana finished below Eli.\nFinishedSecond(Rob) ::: Rob finished second.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 \u00acFinishedBelow(y, x)) ::: If x finished below y, then y did not finish below x.\n\u2200x (FinishedFirst(x) \u2192 \u2200y \u00acFinishedBelow(x, y)) ::: If x finished first, then x did not finish below any other golfer.\n\u2200x (FinishedSecond(x) \u2192 (\u2200y \u00acFinishedBelow(x, y) \u2228 (\u2203z (FinishedFirst(z) \u2227 FinishedBelow(y, x))) ::: If x finished second, then x did not finish below any other golfer except the first.\n\u2200x (FinishedThird(x) \u2192 (\u2203y \u2203z (FinishedBelow(x, y) \u2227 FinishedBelow(x, z) \u2227 y \u2260 z) \u2227 \u2200w (\u00acFinishedBelow(x, w) \u2228 w = y \u2228 w = z))) ::: If x finished third, then x finished below two golfers and not below the remaining two.\nConclusion:\nFinishedThird(Eve) ::: Option A\nFinishedThird(Rob) ::: Option B\nFinishedThird(Ana) ::: Option C\nFinishedThird(Eli) ::: Option D\nFinishedThird(Mya) ::: Option E",
                "SAT": "# Declarations\nGolfers = EnumSort([Eve, Rob, Ana, Eli, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Eve) == 1 ::: Eve finished first.\npos(Rob) == 2 ::: Rob finished second.\npos(Eli) > pos(Mya) ::: Eli finished below Mya.\npos(Ana) > pos(Eli) ::: Ana finished below Eli.\n# Options\nis_valid(pos(Eve) == 3) ::: A) Eve finished third.\nis_valid(pos(Rob) == 3) ::: B) Rob finished third.\nis_valid(pos(Ana) == 3) ::: C) Ana finished third.\nis_valid(pos(Eli) == 3) ::: D) Eli finished third.\nis_valid(pos(Mya) == 3) ::: E) Mya finished third."
            }
        ]
    },
    {
        "id": "logical_deduction_13",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: apples, mangoes, oranges, plums, and pears. The oranges are more expensive than the mangoes. The plums are the cheapest. The apples are less expensive than the mangoes. The pears are more expensive than the oranges.",
        "question": "Which of the following is true?",
        "options": [
            "A) The apples are the cheapest.",
            "B) The mangoes are the cheapest.",
            "C) The oranges are the cheapest.",
            "D) The plums are the cheapest.",
            "E) The pears are the cheapest."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)     ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(apples,  True)            ::: Apples.\nFruit(mangoes, True)            ::: Mangoes.\nFruit(oranges, True)            ::: Oranges.\nFruit(plums,   True)            ::: Plums.\nFruit(pears,   True)            ::: Pears.\nMoreExpensive(oranges, mangoes, True) ::: The oranges are more expensive than the mangoes.\nCheapest(plums, True)           ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples, True) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges, True) ::: The pears are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($b, $a, False) ::: If $a is more expensive than $b, then $b is not more expensive than $a.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nCheapest($x, True) >>> MoreExpensive($x, $y, False) && MoreExpensive($y, $x, True) ::: The cheapest fruit is less expensive than all others.\nQuery:\nCheapest(apples,  True)  ::: Option A\nCheapest(mangoes, True)  ::: Option B\nCheapest(oranges, True)  ::: Option C\nCheapest(plums,   True)  ::: Option D\nCheapest(pears,   True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(apples) ::: Apples.\nFruit(mangoes) ::: Mangoes.\nFruit(oranges) ::: Oranges.\nFruit(plums) ::: Plums.\nFruit(pears) ::: Pears.\nMoreExpensive(oranges, mangoes) ::: The oranges are more expensive than the mangoes.\nCheapest(plums) ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges) ::: The pears are more expensive than the oranges.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 \u00acMoreExpensive(y, x)) ::: MoreExpensive is asymmetric.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x (Cheapest(x) \u2194 (\u2200y (x \u2260 y \u2192 MoreExpensive(y, x))) ::: The cheapest fruit is less expensive than all others.\nConclusion:\nCheapest(apples) ::: Option A\nCheapest(mangoes) ::: Option B\nCheapest(oranges) ::: Option C\nCheapest(plums) ::: Option D\nCheapest(pears) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Apples, Mangoes, Oranges, Plums, Pears])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Oranges) > price(Mangoes) ::: The oranges are more expensive than the mangoes.\nprice(Plums) == 1 ::: The plums are the cheapest (assign lowest price value).\nprice(Apples) < price(Mangoes) ::: The apples are less expensive than the mangoes.\nprice(Pears) > price(Oranges) ::: The pears are more expensive than the oranges.\nForAll([f:fruits], price(f) >= 1) ::: All prices must be positive.\n# Options\nis_valid(price(Apples) == 1) ::: A) The apples are the cheapest.\nis_valid(price(Mangoes) == 1) ::: B) The mangoes are the cheapest.\nis_valid(price(Oranges) == 1) ::: C) The oranges are the cheapest.\nis_valid(price(Plums) == 1) ::: D) The plums are the cheapest.\nis_valid(price(Pears) == 1) ::: E) The pears are the cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)     ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(apples,  True)            ::: Apples.\nFruit(mangoes, True)            ::: Mangoes.\nFruit(oranges, True)            ::: Oranges.\nFruit(plums,   True)            ::: Plums.\nFruit(pears,   True)            ::: Pears.\nMoreExpensive(oranges, mangoes, True) ::: The oranges are more expensive than the mangoes.\nCheapest(plums, True)           ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples, True) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges, True) ::: The pears are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($b, $a, False) ::: If $a is more expensive than $b, then $b is not more expensive than $a.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nCheapest($x, True) >>> MoreExpensive($x, $y, False) && MoreExpensive($y, $x, True) ::: The cheapest fruit is less expensive than all others.\nQuery:\nCheapest(apples,  True)  ::: Option A\nCheapest(mangoes, True)  ::: Option B\nCheapest(oranges, True)  ::: Option C\nCheapest(plums,   True)  ::: Option D\nCheapest(pears,   True)  ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(apples) ::: Apples.\nFruit(mangoes) ::: Mangoes.\nFruit(oranges) ::: Oranges.\nFruit(plums) ::: Plums.\nFruit(pears) ::: Pears.\nMoreExpensive(oranges, mangoes) ::: The oranges are more expensive than the mangoes.\nCheapest(plums) ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges) ::: The pears are more expensive than the oranges.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 \u00acMoreExpensive(y, x)) ::: MoreExpensive is asymmetric.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x (Cheapest(x) \u2194 (\u2200y (x \u2260 y \u2192 MoreExpensive(y, x))) ::: The cheapest fruit is less expensive than all others.\nConclusion:\nCheapest(apples) ::: Option A\nCheapest(mangoes) ::: Option B\nCheapest(oranges) ::: Option C\nCheapest(plums) ::: Option D\nCheapest(pears) ::: Option E",
                "SAT": "# Declarations\nfruits = EnumSort([Apples, Mangoes, Oranges, Plums, Pears])\nprice = Function([fruits] -> [IntSort()])\n# Constraints\nDistinct([f:fruits], price(f)) ::: Each fruit has a unique price\nprice(Oranges) > price(Mangoes) ::: The oranges are more expensive than the mangoes.\nprice(Plums) == 1 ::: The plums are the cheapest (assign lowest price value).\nprice(Apples) < price(Mangoes) ::: The apples are less expensive than the mangoes.\nprice(Pears) > price(Oranges) ::: The pears are more expensive than the oranges.\nForAll([f:fruits], price(f) >= 1) ::: All prices must be positive.\n# Options\nis_valid(price(Apples) == 1) ::: A) The apples are the cheapest.\nis_valid(price(Mangoes) == 1) ::: B) The mangoes are the cheapest.\nis_valid(price(Oranges) == 1) ::: C) The oranges are the cheapest.\nis_valid(price(Plums) == 1) ::: D) The plums are the cheapest.\nis_valid(price(Pears) == 1) ::: E) The pears are the cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_14",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: mangoes, kiwis, plums, pears, and watermelons. The kiwis are less expensive than the plums. The pears are the third-most expensive. The kiwis are the second-cheapest. The watermelons are the most expensive.",
        "question": "Which of the following is true?",
        "options": [
            "A) The mangoes are the third-most expensive.",
            "B) The kiwis are the third-most expensive.",
            "C) The plums are the third-most expensive.",
            "D) The pears are the third-most expensive.",
            "E) The watermelons are the third-most expensive."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nExpensiveRank($x, $n, bool)      ::: Fruit $x is the $n-th most expensive (1 = most expensive).\nFacts:\nFruit(mangoes, True)             ::: The mangoes.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(plums, True)               ::: The plums.\nFruit(pears, True)               ::: The pears.\nFruit(watermelons, True)         ::: The watermelons.\nCheaper(kiwis, plums, True)      ::: The kiwis are less expensive than the plums.\nExpensiveRank(pears, 3, True)    ::: The pears are the third-most expensive.\nExpensiveRank(kiwis, 4, True)    ::: The kiwis are the second-cheapest (i.e., fourth-most expensive).\nExpensiveRank(watermelons, 1, True) ::: The watermelons are the most expensive.\nRules:\nCheaper($a, $b, True) >>> ExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n > $m ::: If $a is cheaper than $b, then $a's rank is higher (less expensive) than $b's.\nExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n < $m >>> Cheaper($b, $a, True) ::: If $a's rank is lower (more expensive) than $b's, then $b is cheaper than $a.\nQuery:\nExpensiveRank(mangoes, 3, True)  ::: Option A\nExpensiveRank(kiwis, 3, True)    ::: Option B\nExpensiveRank(plums, 3, True)    ::: Option C\nExpensiveRank(pears, 3, True)    ::: Option D\nExpensiveRank(watermelons, 3, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nRank(fruit, pos) ::: fruit has price position pos, where pos \u2208 {one,two,three,four,five}; one = most expensive, five = cheapest.\nCheaper(x, y) ::: x is cheaper (less expensive) than y.\nPremises:\nRank(watermelons, one) ::: Watermelons are the most expensive.\nRank(pears, three) ::: Pears are the third-most expensive.\nRank(kiwis, four) ::: Kiwis are the second-cheapest.\nCheaper(kiwis, plums) ::: Kiwis are cheaper than plums.\n\u2200f \u2200p \u2200q ((Rank(f, p) \u2227 Rank(f, q)) \u2192 (p = q)) ::: One rank per fruit.\n\u2200p \u2200f \u2200g ((Rank(f, p) \u2227 Rank(g, p)) \u2192 (f = g)) ::: One fruit per rank.\nRank(mangoes, one) \u2228 Rank(mangoes, two) \u2228 Rank(mangoes, three) \u2228 Rank(mangoes, four) \u2228 Rank(mangoes, five) ::: Mangoes occupy some rank.\nRank(plums, one) \u2228 Rank(plums, two) \u2228 Rank(plums, three) \u2228 Rank(plums, four) \u2228 Rank(plums, five) ::: Plums occupy some rank.\n\u2200x \u2200y (Cheaper(x, y) \u2194 (Rank(x, p) \u2227 Rank(y, q) \u2227 (p > q))) ::: Cheaper relation defined via ranks.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: \"Cheaper\" is asymmetric.\nConclusion:\nRank(mangoes, three) ::: Option A.\nRank(kiwis, three) ::: Option B.\nRank(plums, three) ::: Option C.\nRank(pears, three) ::: Option D.\nRank(watermelons, three) ::: Option E."
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Mangoes, Kiwis, Plums, Pears, Watermelons])\nranks = IntSort([1, 2, 3, 4, 5])\nrank = Function([fruits] -> [ranks])\n# Constraints\nDistinct([f:fruits], rank(f)) ::: Each fruit has a unique rank\nrank(Kiwis) < rank(Plums) ::: The kiwis are less expensive than the plums.\nrank(Pears) == 3 ::: The pears are the third-most expensive.\nrank(Kiwis) == 4 ::: The kiwis are the second-cheapest (fourth-most expensive).\nrank(Watermelons) == 1 ::: The watermelons are the most expensive.\n# Options\nis_valid(rank(Mangoes) == 3) ::: A) The mangoes are the third-most expensive.\nis_valid(rank(Kiwis) == 3) ::: B) The kiwis are the third-most expensive.\nis_valid(rank(Plums) == 3) ::: C) The plums are the third-most expensive.\nis_valid(rank(Pears) == 3) ::: D) The pears are the third-most expensive.\nis_valid(rank(Watermelons) == 3) ::: E) The watermelons are the third-most expensive."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nExpensiveRank($x, $n, bool)      ::: Fruit $x is the $n-th most expensive (1 = most expensive).\nFacts:\nFruit(mangoes, True)             ::: The mangoes.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(plums, True)               ::: The plums.\nFruit(pears, True)               ::: The pears.\nFruit(watermelons, True)         ::: The watermelons.\nCheaper(kiwis, plums, True)      ::: The kiwis are less expensive than the plums.\nExpensiveRank(pears, 3, True)    ::: The pears are the third-most expensive.\nExpensiveRank(kiwis, 4, True)    ::: The kiwis are the second-cheapest (i.e., fourth-most expensive).\nExpensiveRank(watermelons, 1, True) ::: The watermelons are the most expensive.\nRules:\nCheaper($a, $b, True) >>> ExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n > $m ::: If $a is cheaper than $b, then $a's rank is higher (less expensive) than $b's.\nExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n < $m >>> Cheaper($b, $a, True) ::: If $a's rank is lower (more expensive) than $b's, then $b is cheaper than $a.\nQuery:\nExpensiveRank(mangoes, 3, True)  ::: Option A\nExpensiveRank(kiwis, 3, True)    ::: Option B\nExpensiveRank(plums, 3, True)    ::: Option C\nExpensiveRank(pears, 3, True)    ::: Option D\nExpensiveRank(watermelons, 3, True) ::: Option E",
                "FOL": "Predicates:\nRank(fruit, pos) ::: fruit has price position pos, where pos \u2208 {one,two,three,four,five}; one = most expensive, five = cheapest.\nCheaper(x, y) ::: x is cheaper (less expensive) than y.\nPremises:\nRank(watermelons, one) ::: Watermelons are the most expensive.\nRank(pears, three) ::: Pears are the third-most expensive.\nRank(kiwis, four) ::: Kiwis are the second-cheapest.\nCheaper(kiwis, plums) ::: Kiwis are cheaper than plums.\n\u2200f \u2200p \u2200q ((Rank(f, p) \u2227 Rank(f, q)) \u2192 (p = q)) ::: One rank per fruit.\n\u2200p \u2200f \u2200g ((Rank(f, p) \u2227 Rank(g, p)) \u2192 (f = g)) ::: One fruit per rank.\nRank(mangoes, one) \u2228 Rank(mangoes, two) \u2228 Rank(mangoes, three) \u2228 Rank(mangoes, four) \u2228 Rank(mangoes, five) ::: Mangoes occupy some rank.\nRank(plums, one) \u2228 Rank(plums, two) \u2228 Rank(plums, three) \u2228 Rank(plums, four) \u2228 Rank(plums, five) ::: Plums occupy some rank.\n\u2200x \u2200y (Cheaper(x, y) \u2194 (Rank(x, p) \u2227 Rank(y, q) \u2227 (p > q))) ::: Cheaper relation defined via ranks.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: \"Cheaper\" is asymmetric.\nConclusion:\nRank(mangoes, three) ::: Option A.\nRank(kiwis, three) ::: Option B.\nRank(plums, three) ::: Option C.\nRank(pears, three) ::: Option D.\nRank(watermelons, three) ::: Option E.",
                "SAT": "# Declarations\nfruits = EnumSort([Mangoes, Kiwis, Plums, Pears, Watermelons])\nranks = IntSort([1, 2, 3, 4, 5])\nrank = Function([fruits] -> [ranks])\n# Constraints\nDistinct([f:fruits], rank(f)) ::: Each fruit has a unique rank\nrank(Kiwis) < rank(Plums) ::: The kiwis are less expensive than the plums.\nrank(Pears) == 3 ::: The pears are the third-most expensive.\nrank(Kiwis) == 4 ::: The kiwis are the second-cheapest (fourth-most expensive).\nrank(Watermelons) == 1 ::: The watermelons are the most expensive.\n# Options\nis_valid(rank(Mangoes) == 3) ::: A) The mangoes are the third-most expensive.\nis_valid(rank(Kiwis) == 3) ::: B) The kiwis are the third-most expensive.\nis_valid(rank(Plums) == 3) ::: C) The plums are the third-most expensive.\nis_valid(rank(Pears) == 3) ::: D) The pears are the third-most expensive.\nis_valid(rank(Watermelons) == 3) ::: E) The watermelons are the third-most expensive."
            }
        ]
    },
    {
        "id": "logical_deduction_15",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, an orange book, a gray book, a yellow book, and a purple book. The green book is the rightmost. The gray book is to the right of the orange book. The purple book is to the left of the yellow book. The purple book is to the right of the gray book.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the second from the left.",
            "B) The orange book is the second from the left.",
            "C) The gray book is the second from the left.",
            "D) The yellow book is the second from the left.",
            "E) The purple book is the second from the left."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(orange, True)              ::: The orange book.\nBook(gray,   True)              ::: The gray book.\nBook(yellow, True)              ::: The yellow book.\nBook(purple, True)              ::: The purple book.\nRightMost(green, True)          ::: The green book is the rightmost.\nRightOf(gray, orange, True)     ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow, True)    ::: The purple book is to the left of the yellow book.\nRightOf(purple, gray, True)     ::: The purple book is to the right of the gray book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) >>> SecondFromLeft($b, True) ::: The second book in the sequence is second from the left.\nQuery:\nSecondFromLeft(green,  True)  ::: Option A\nSecondFromLeft(orange, True)  ::: Option B\nSecondFromLeft(gray,   True)  ::: Option C\nSecondFromLeft(yellow, True)  ::: Option D\nSecondFromLeft(purple, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(orange) ::: The orange book.\nBook(gray) ::: The gray book.\nBook(yellow) ::: The yellow book.\nBook(purple) ::: The purple book.\nRightMost(green) ::: The green book is the rightmost.\nLeftOf(orange, gray) ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow) ::: The purple book is to the left of the yellow book.\nLeftOf(gray, purple) ::: The purple book is to the right of the gray book.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x (RightMost(x) \u2194 (Book(x) \u2227 \u00ac\u2203y LeftOf(x, y))) ::: RightMost definition.\n\u2200x (SecondFromLeft(x) \u2194 (Book(x) \u2227 \u2203y (LeftOf(y, x) \u2227 \u00ac\u2203z LeftOf(z, y)))) ::: SecondFromLeft definition.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(orange) ::: Option B\nSecondFromLeft(gray) ::: Option C\nSecondFromLeft(yellow) ::: Option D\nSecondFromLeft(purple) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Green, Orange, Gray, Yellow, Purple])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Green) == 5 ::: The green book is the rightmost.\npos(Gray) > pos(Orange) ::: The gray book is to the right of the orange book.\npos(Purple) < pos(Yellow) ::: The purple book is to the left of the yellow book.\npos(Purple) > pos(Gray) ::: The purple book is to the right of the gray book.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Orange) == 2) ::: B) The orange book is the second from the left.\nis_valid(pos(Gray) == 2) ::: C) The gray book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: D) The yellow book is the second from the left.\nis_valid(pos(Purple) == 2) ::: E) The purple book is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nRightMost($x, bool)             ::: Book $x is the right\u2011most book on the shelf.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(orange, True)              ::: The orange book.\nBook(gray,   True)              ::: The gray book.\nBook(yellow, True)              ::: The yellow book.\nBook(purple, True)              ::: The purple book.\nRightMost(green, True)          ::: The green book is the rightmost.\nRightOf(gray, orange, True)     ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow, True)    ::: The purple book is to the left of the yellow book.\nRightOf(purple, gray, True)     ::: The purple book is to the right of the gray book.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left\u2011of is transitive.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) && LeftOf($c, $d, True) >>> SecondFromLeft($b, True) ::: The second book in the sequence is second from the left.\nQuery:\nSecondFromLeft(green,  True)  ::: Option A\nSecondFromLeft(orange, True)  ::: Option B\nSecondFromLeft(gray,   True)  ::: Option C\nSecondFromLeft(yellow, True)  ::: Option D\nSecondFromLeft(purple, True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightMost(x) ::: Book x is the right-most book on the shelf.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(orange) ::: The orange book.\nBook(gray) ::: The gray book.\nBook(yellow) ::: The yellow book.\nBook(purple) ::: The purple book.\nRightMost(green) ::: The green book is the rightmost.\nLeftOf(orange, gray) ::: The gray book is to the right of the orange book.\nLeftOf(purple, yellow) ::: The purple book is to the left of the yellow book.\nLeftOf(gray, purple) ::: The purple book is to the right of the gray book.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x (RightMost(x) \u2194 (Book(x) \u2227 \u00ac\u2203y LeftOf(x, y))) ::: RightMost definition.\n\u2200x (SecondFromLeft(x) \u2194 (Book(x) \u2227 \u2203y (LeftOf(y, x) \u2227 \u00ac\u2203z LeftOf(z, y)))) ::: SecondFromLeft definition.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(orange) ::: Option B\nSecondFromLeft(gray) ::: Option C\nSecondFromLeft(yellow) ::: Option D\nSecondFromLeft(purple) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Green, Orange, Gray, Yellow, Purple])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Green) == 5 ::: The green book is the rightmost.\npos(Gray) > pos(Orange) ::: The gray book is to the right of the orange book.\npos(Purple) < pos(Yellow) ::: The purple book is to the left of the yellow book.\npos(Purple) > pos(Gray) ::: The purple book is to the right of the gray book.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Orange) == 2) ::: B) The orange book is the second from the left.\nis_valid(pos(Gray) == 2) ::: C) The gray book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: D) The yellow book is the second from the left.\nis_valid(pos(Purple) == 2) ::: E) The purple book is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_16",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, oranges, loquats, plums, and kiwis. The plums are less expensive than the kiwis. The plums are more expensive than the watermelons. The loquats are more expensive than the kiwis. The oranges are the most expensive.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the second-cheapest.",
            "B) The oranges are the second-cheapest.",
            "C) The loquats are the second-cheapest.",
            "D) The plums are the second-cheapest.",
            "E) The kiwis are the second-cheapest."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is strictly cheaper than fruit $y.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is strictly more expensive than fruit $y.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second cheapest.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(oranges, True)             ::: The oranges.\nFruit(loquats, True)             ::: The loquats.\nFruit(plums, True)               ::: The plums.\nFruit(kiwis, True)               ::: The kiwis.\nCheaper(plums, kiwis, True)      ::: The plums are less expensive than the kiwis.\nMoreExpensive(plums, watermelons, True) ::: The plums are more expensive than the watermelons.\nMoreExpensive(loquats, kiwis, True) ::: The loquats are more expensive than the kiwis.\nMostExpensive(oranges, True)     ::: The oranges are the most expensive.\nRules:\nCheaper($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is cheaper than $b, then $b is more expensive than $a.\nMoreExpensive($a, $b, True) >>> Cheaper($b, $a, True) ::: If $a is more expensive than $b, then $b is cheaper than $a.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nMostExpensive($m, True) >>> MoreExpensive($m, watermelons, True) && MoreExpensive($m, oranges, True) && MoreExpensive($m, loquats, True) && MoreExpensive($m, plums, True) && MoreExpensive($m, kiwis, True) ::: The most expensive fruit is more expensive than all others.\nCheaper(watermelons, $s, True) && Cheaper($s, plums, True) && Cheaper($s, kiwis, True) && Cheaper($s, loquats, True) >>> SecondCheapest($s, True) ::: The fruit that is cheaper than plums, kiwis, and loquats but more expensive than watermelons is the second cheapest.\nQuery:\nSecondCheapest(watermelons, True)  ::: Option A\nSecondCheapest(oranges, True)      ::: Option B\nSecondCheapest(loquats, True)      ::: Option C\nSecondCheapest(plums, True)        ::: Option D\nSecondCheapest(kiwis, True)        ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nMostExpensive(x) ::: x is the most expensive.\nSecondCheapest(x) ::: x is the second cheapest.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(oranges) ::: The oranges.\nFruit(loquats) ::: The loquats.\nFruit(plums) ::: The plums.\nFruit(kiwis) ::: The kiwis.\nCheaper(plums, kiwis) ::: The plums are cheaper than the kiwis.\nCheaper(watermelons, plums) ::: The watermelons are cheaper than the plums.\nCheaper(kiwis, loquats) ::: The kiwis are cheaper than the loquats.\nMostExpensive(oranges) ::: The oranges are the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (MostExpensive(x) \u2192 \u2200y (Fruit(y) \u2227 y \u2260 x \u2192 Cheaper(y, x))) ::: The most expensive is more expensive than all others.\n\u2200x (SecondCheapest(x) \u2194 (Cheaper(watermelons, x) \u2227 Cheaper(x, plums) \u2227 Cheaper(x, kiwis) \u2227 Cheaper(x, loquats))) ::: The second cheapest is more expensive than watermelons but cheaper than plums, kiwis, and loquats.\nConclusion:\nSecondCheapest(watermelons) ::: Option A\nSecondCheapest(oranges) ::: Option B\nSecondCheapest(loquats) ::: Option C\nSecondCheapest(plums) ::: Option D\nSecondCheapest(kiwis) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nFruit = EnumSort([Watermelons, Oranges, Loquats, Plums, Kiwis])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Plums) < price(Kiwis) ::: The plums are less expensive than the kiwis.\nprice(Plums) > price(Watermelons) ::: The plums are more expensive than the watermelons.\nprice(Loquats) > price(Kiwis) ::: The loquats are more expensive than the kiwis.\nprice(Oranges) > price(Watermelons) ::: The oranges are the most expensive.\nprice(Oranges) > price(Loquats) ::: The oranges are the most expensive.\nprice(Oranges) > price(Plums) ::: The oranges are the most expensive.\nprice(Oranges) > price(Kiwis) ::: The oranges are the most expensive.\nForAll([f:Fruit], Implies(f != Watermelons, price(f) > price(Watermelons))) ::: Watermelons are the cheapest.\nExists([f:Fruit], And(price(f) > price(Watermelons), price(f) < price(Plums), price(f) < price(Kiwis), price(f) < price(Loquats))) ::: There exists a second cheapest fruit.\n# Options\nis_valid(price(Watermelons) == 2) ::: A) The watermelons are the second-cheapest.\nis_valid(price(Oranges) == 2) ::: B) The oranges are the second-cheapest.\nis_valid(price(Loquats) == 2) ::: C) The loquats are the second-cheapest.\nis_valid(price(Plums) == 2) ::: D) The plums are the second-cheapest.\nis_valid(price(Kiwis) == 2) ::: E) The kiwis are the second-cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is strictly cheaper than fruit $y.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is strictly more expensive than fruit $y.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nSecondCheapest($x, bool)         ::: Fruit $x is the second cheapest.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(oranges, True)             ::: The oranges.\nFruit(loquats, True)             ::: The loquats.\nFruit(plums, True)               ::: The plums.\nFruit(kiwis, True)               ::: The kiwis.\nCheaper(plums, kiwis, True)      ::: The plums are less expensive than the kiwis.\nMoreExpensive(plums, watermelons, True) ::: The plums are more expensive than the watermelons.\nMoreExpensive(loquats, kiwis, True) ::: The loquats are more expensive than the kiwis.\nMostExpensive(oranges, True)     ::: The oranges are the most expensive.\nRules:\nCheaper($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is cheaper than $b, then $b is more expensive than $a.\nMoreExpensive($a, $b, True) >>> Cheaper($b, $a, True) ::: If $a is more expensive than $b, then $b is cheaper than $a.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nMostExpensive($m, True) >>> MoreExpensive($m, watermelons, True) && MoreExpensive($m, oranges, True) && MoreExpensive($m, loquats, True) && MoreExpensive($m, plums, True) && MoreExpensive($m, kiwis, True) ::: The most expensive fruit is more expensive than all others.\nCheaper(watermelons, $s, True) && Cheaper($s, plums, True) && Cheaper($s, kiwis, True) && Cheaper($s, loquats, True) >>> SecondCheapest($s, True) ::: The fruit that is cheaper than plums, kiwis, and loquats but more expensive than watermelons is the second cheapest.\nQuery:\nSecondCheapest(watermelons, True)  ::: Option A\nSecondCheapest(oranges, True)      ::: Option B\nSecondCheapest(loquats, True)      ::: Option C\nSecondCheapest(plums, True)        ::: Option D\nSecondCheapest(kiwis, True)        ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nMostExpensive(x) ::: x is the most expensive.\nSecondCheapest(x) ::: x is the second cheapest.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(oranges) ::: The oranges.\nFruit(loquats) ::: The loquats.\nFruit(plums) ::: The plums.\nFruit(kiwis) ::: The kiwis.\nCheaper(plums, kiwis) ::: The plums are cheaper than the kiwis.\nCheaper(watermelons, plums) ::: The watermelons are cheaper than the plums.\nCheaper(kiwis, loquats) ::: The kiwis are cheaper than the loquats.\nMostExpensive(oranges) ::: The oranges are the most expensive.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (MostExpensive(x) \u2192 \u2200y (Fruit(y) \u2227 y \u2260 x \u2192 Cheaper(y, x))) ::: The most expensive is more expensive than all others.\n\u2200x (SecondCheapest(x) \u2194 (Cheaper(watermelons, x) \u2227 Cheaper(x, plums) \u2227 Cheaper(x, kiwis) \u2227 Cheaper(x, loquats))) ::: The second cheapest is more expensive than watermelons but cheaper than plums, kiwis, and loquats.\nConclusion:\nSecondCheapest(watermelons) ::: Option A\nSecondCheapest(oranges) ::: Option B\nSecondCheapest(loquats) ::: Option C\nSecondCheapest(plums) ::: Option D\nSecondCheapest(kiwis) ::: Option E",
                "SAT": "# Declarations\nFruit = EnumSort([Watermelons, Oranges, Loquats, Plums, Kiwis])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Plums) < price(Kiwis) ::: The plums are less expensive than the kiwis.\nprice(Plums) > price(Watermelons) ::: The plums are more expensive than the watermelons.\nprice(Loquats) > price(Kiwis) ::: The loquats are more expensive than the kiwis.\nprice(Oranges) > price(Watermelons) ::: The oranges are the most expensive.\nprice(Oranges) > price(Loquats) ::: The oranges are the most expensive.\nprice(Oranges) > price(Plums) ::: The oranges are the most expensive.\nprice(Oranges) > price(Kiwis) ::: The oranges are the most expensive.\nForAll([f:Fruit], Implies(f != Watermelons, price(f) > price(Watermelons))) ::: Watermelons are the cheapest.\nExists([f:Fruit], And(price(f) > price(Watermelons), price(f) < price(Plums), price(f) < price(Kiwis), price(f) < price(Loquats))) ::: There exists a second cheapest fruit.\n# Options\nis_valid(price(Watermelons) == 2) ::: A) The watermelons are the second-cheapest.\nis_valid(price(Oranges) == 2) ::: B) The oranges are the second-cheapest.\nis_valid(price(Loquats) == 2) ::: C) The loquats are the second-cheapest.\nis_valid(price(Plums) == 2) ::: D) The plums are the second-cheapest.\nis_valid(price(Kiwis) == 2) ::: E) The kiwis are the second-cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_17",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, apples, mangoes, pears, and cantaloupes. The watermelons are more expensive than the cantaloupes. The mangoes are less expensive than the pears. The apples are the second-cheapest. The watermelons are less expensive than the mangoes.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the cheapest.",
            "B) The apples are the cheapest.",
            "C) The mangoes are the cheapest.",
            "D) The pears are the cheapest.",
            "E) The cantaloupes are the cheapest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nLessExpensive($x, $y, bool)      ::: Fruit $x is less expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(apples, True)              ::: The apples.\nFruit(mangoes, True)             ::: The mangoes.\nFruit(pears, True)               ::: The pears.\nFruit(cantaloupes, True)         ::: The cantaloupes.\nMoreExpensive(watermelons, cantaloupes, True) ::: The watermelons are more expensive than the cantaloupes.\nLessExpensive(mangoes, pears, True)           ::: The mangoes are less expensive than the pears.\nLessExpensive(apples, $y, True) && MoreExpensive(apples, $z, True) ::: The apples are the second-cheapest.\nLessExpensive(watermelons, mangoes, True)     ::: The watermelons are less expensive than the mangoes.\nRules:\nMoreExpensive($a, $b, True) >>> LessExpensive($b, $a, True) ::: If $a is more expensive than $b, then $b is less expensive than $a.\nLessExpensive($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is less expensive than $b, then $b is more expensive than $a.\nLessExpensive($a, $b, True) && LessExpensive($b, $c, True) >>> LessExpensive($a, $c, True) ::: LessExpensive is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nLessExpensive($a, watermelons, True) && LessExpensive($a, apples, True) && LessExpensive($a, mangoes, True) && LessExpensive($a, pears, True) >>> Cheapest($a, True) ::: A fruit that is less expensive than all the other four is the cheapest.\nQuery:\nCheapest(watermelons, True)  ::: Option A\nCheapest(apples, True)       ::: Option B\nCheapest(mangoes, True)      ::: Option C\nCheapest(pears, True)        ::: Option D\nCheapest(cantaloupes, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nLessExpensive(x, y) ::: Fruit x is less expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(apples) ::: The apples.\nFruit(mangoes) ::: The mangoes.\nFruit(pears) ::: The pears.\nFruit(cantaloupes) ::: The cantaloupes.\nMoreExpensive(watermelons, cantaloupes) ::: The watermelons are more expensive than the cantaloupes.\nLessExpensive(mangoes, pears) ::: The mangoes are less expensive than the pears.\n\u2203y \u2203z (LessExpensive(apples, y) \u2227 MoreExpensive(apples, z)) ::: The apples are the second-cheapest.\nLessExpensive(watermelons, mangoes) ::: The watermelons are less expensive than the mangoes.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 LessExpensive(y, x)) ::: If x is more expensive than y, then y is less expensive than x.\n\u2200x \u2200y (LessExpensive(x, y) \u2192 MoreExpensive(y, x)) ::: If x is less expensive than y, then y is more expensive than x.\n\u2200x \u2200y \u2200z (LessExpensive(x, y) \u2227 LessExpensive(y, z) \u2192 LessExpensive(x, z)) ::: LessExpensive is transitive.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x (LessExpensive(x, watermelons) \u2227 LessExpensive(x, apples) \u2227 LessExpensive(x, mangoes) \u2227 LessExpensive(x, pears) \u2192 Cheapest(x)) ::: A fruit that is less expensive than all the other four is the cheapest.\nConclusion:\nCheapest(watermelons) ::: Option A\nCheapest(apples) ::: Option B\nCheapest(mangoes) ::: Option C\nCheapest(pears) ::: Option D\nCheapest(cantaloupes) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nFruit = EnumSort([Watermelons, Apples, Mangoes, Pears, Cantaloupes])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Watermelons) > price(Cantaloupes) ::: The watermelons are more expensive than the cantaloupes.\nprice(Mangoes) < price(Pears) ::: The mangoes are less expensive than the pears.\nExists([y:Fruit, z:Fruit], And(price(Apples) > price(z), price(Apples) < price(y))) ::: The apples are the second-cheapest.\nprice(Watermelons) < price(Mangoes) ::: The watermelons are less expensive than the mangoes.\nForAll([x:Fruit, y:Fruit], Implies(price(x) > price(y), price(y) < price(x))) ::: More expensive implies less expensive.\nForAll([x:Fruit, y:Fruit, z:Fruit], Implies(And(price(x) < price(y), price(y) < price(z)), price(x) < price(z))) ::: Transitivity of less expensive.\nForAll([x:Fruit], Implies(And(price(x) < price(Watermelons), price(x) < price(Apples), price(x) < price(Mangoes), price(x) < price(Pears)), price(x) == price(Cantaloupes))) ::: A fruit cheaper than all others is the cheapest.\n# Options\nis_valid(price(Cantaloupes) < price(Watermelons) And price(Cantaloupes) < price(Apples) And price(Cantaloupes) < price(Mangoes) And price(Cantaloupes) < price(Pears)) ::: E) The cantaloupes are the cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nLessExpensive($x, $y, bool)      ::: Fruit $x is less expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(apples, True)              ::: The apples.\nFruit(mangoes, True)             ::: The mangoes.\nFruit(pears, True)               ::: The pears.\nFruit(cantaloupes, True)         ::: The cantaloupes.\nMoreExpensive(watermelons, cantaloupes, True) ::: The watermelons are more expensive than the cantaloupes.\nLessExpensive(mangoes, pears, True)           ::: The mangoes are less expensive than the pears.\nLessExpensive(apples, $y, True) && MoreExpensive(apples, $z, True) ::: The apples are the second-cheapest.\nLessExpensive(watermelons, mangoes, True)     ::: The watermelons are less expensive than the mangoes.\nRules:\nMoreExpensive($a, $b, True) >>> LessExpensive($b, $a, True) ::: If $a is more expensive than $b, then $b is less expensive than $a.\nLessExpensive($a, $b, True) >>> MoreExpensive($b, $a, True) ::: If $a is less expensive than $b, then $b is more expensive than $a.\nLessExpensive($a, $b, True) && LessExpensive($b, $c, True) >>> LessExpensive($a, $c, True) ::: LessExpensive is transitive.\nMoreExpensive($a, $b, True) && MoreExpensive($b, $c, True) >>> MoreExpensive($a, $c, True) ::: MoreExpensive is transitive.\nLessExpensive($a, watermelons, True) && LessExpensive($a, apples, True) && LessExpensive($a, mangoes, True) && LessExpensive($a, pears, True) >>> Cheapest($a, True) ::: A fruit that is less expensive than all the other four is the cheapest.\nQuery:\nCheapest(watermelons, True)  ::: Option A\nCheapest(apples, True)       ::: Option B\nCheapest(mangoes, True)      ::: Option C\nCheapest(pears, True)        ::: Option D\nCheapest(cantaloupes, True)  ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nLessExpensive(x, y) ::: Fruit x is less expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(apples) ::: The apples.\nFruit(mangoes) ::: The mangoes.\nFruit(pears) ::: The pears.\nFruit(cantaloupes) ::: The cantaloupes.\nMoreExpensive(watermelons, cantaloupes) ::: The watermelons are more expensive than the cantaloupes.\nLessExpensive(mangoes, pears) ::: The mangoes are less expensive than the pears.\n\u2203y \u2203z (LessExpensive(apples, y) \u2227 MoreExpensive(apples, z)) ::: The apples are the second-cheapest.\nLessExpensive(watermelons, mangoes) ::: The watermelons are less expensive than the mangoes.\n\u2200x \u2200y (MoreExpensive(x, y) \u2192 LessExpensive(y, x)) ::: If x is more expensive than y, then y is less expensive than x.\n\u2200x \u2200y (LessExpensive(x, y) \u2192 MoreExpensive(y, x)) ::: If x is less expensive than y, then y is more expensive than x.\n\u2200x \u2200y \u2200z (LessExpensive(x, y) \u2227 LessExpensive(y, z) \u2192 LessExpensive(x, z)) ::: LessExpensive is transitive.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: MoreExpensive is transitive.\n\u2200x (LessExpensive(x, watermelons) \u2227 LessExpensive(x, apples) \u2227 LessExpensive(x, mangoes) \u2227 LessExpensive(x, pears) \u2192 Cheapest(x)) ::: A fruit that is less expensive than all the other four is the cheapest.\nConclusion:\nCheapest(watermelons) ::: Option A\nCheapest(apples) ::: Option B\nCheapest(mangoes) ::: Option C\nCheapest(pears) ::: Option D\nCheapest(cantaloupes) ::: Option E",
                "SAT": "# Declarations\nFruit = EnumSort([Watermelons, Apples, Mangoes, Pears, Cantaloupes])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nDistinct([f:Fruit], price(f)) ::: Each fruit has a unique price\nprice(Watermelons) > price(Cantaloupes) ::: The watermelons are more expensive than the cantaloupes.\nprice(Mangoes) < price(Pears) ::: The mangoes are less expensive than the pears.\nExists([y:Fruit, z:Fruit], And(price(Apples) > price(z), price(Apples) < price(y))) ::: The apples are the second-cheapest.\nprice(Watermelons) < price(Mangoes) ::: The watermelons are less expensive than the mangoes.\nForAll([x:Fruit, y:Fruit], Implies(price(x) > price(y), price(y) < price(x))) ::: More expensive implies less expensive.\nForAll([x:Fruit, y:Fruit, z:Fruit], Implies(And(price(x) < price(y), price(y) < price(z)), price(x) < price(z))) ::: Transitivity of less expensive.\nForAll([x:Fruit], Implies(And(price(x) < price(Watermelons), price(x) < price(Apples), price(x) < price(Mangoes), price(x) < price(Pears)), price(x) == price(Cantaloupes))) ::: A fruit cheaper than all others is the cheapest.\n# Options\nis_valid(price(Cantaloupes) < price(Watermelons) And price(Cantaloupes) < price(Apples) And price(Cantaloupes) < price(Mangoes) And price(Cantaloupes) < price(Pears)) ::: E) The cantaloupes are the cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_18",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a hawk, a raven, a robin, a hummingbird, and a crow. The robin is the leftmost. The raven is the second from the left. The hawk is the second from the right. The crow is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The hawk is the second from the right.",
            "B) The raven is the second from the right.",
            "C) The robin is the second from the right.",
            "D) The hummingbird is the second from the right.",
            "E) The crow is the second from the right."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nFacts:\nBird(hawk, True)                ::: The hawk.\nBird(raven, True)               ::: The raven.\nBird(robin, True)               ::: The robin.\nBird(hummingbird, True)         ::: The hummingbird.\nBird(crow, True)                ::: The crow.\nLeftMost(robin, True)           ::: The robin is the leftmost.\nSecondFromLeft(raven, True)     ::: The raven is the second from the left.\nSecondFromRight(hawk, True)     ::: The hawk is the second from the right.\nThirdFromLeft(crow, True)       ::: The crow is the third from the left.\nRules:\nSecondFromRight($a, True) >>> SecondFromRight($a, True) ::: If $a is second from the right, then $a is second from the right (tautology to maintain consistency).\nQuery:\nSecondFromRight(hawk, True)     ::: Option A\nSecondFromRight(raven, True)    ::: Option B\nSecondFromRight(robin, True)    ::: Option C\nSecondFromRight(hummingbird, True) ::: Option D\nSecondFromRight(crow, True)     ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nPremises:\nBird(hawk) ::: The hawk.\nBird(raven) ::: The raven.\nBird(robin) ::: The robin.\nBird(hummingbird) ::: The hummingbird.\nBird(crow) ::: The crow.\nLeftMost(robin) ::: The robin is the leftmost.\nSecondFromLeft(raven) ::: The raven is the second from the left.\nSecondFromRight(hawk) ::: The hawk is the second from the right.\nThirdFromLeft(crow) ::: The crow is the third from the left.\n\u2200x \u2200y ((LeftMost(x) \u2227 LeftMost(y)) \u2192 (x = y)) ::: Only one leftmost bird.\n\u2200x \u2200y ((SecondFromLeft(x) \u2227 SecondFromLeft(y)) \u2192 (x = y)) ::: Only one second from left.\n\u2200x \u2200y ((SecondFromRight(x) \u2227 SecondFromRight(y)) \u2192 (x = y)) ::: Only one second from right.\n\u2200x \u2200y ((ThirdFromLeft(x) \u2227 ThirdFromLeft(y)) \u2192 (x = y)) ::: Only one third from left.\n\u2200x (Bird(x) \u2192 (LeftMost(x) \u2228 SecondFromLeft(x) \u2228 ThirdFromLeft(x) \u2228 SecondFromRight(x) \u2228 (x = hummingbird))) ::: Each bird has a unique position.\nConclusion:\nSecondFromRight(hawk) ::: Option A\nSecondFromRight(raven) ::: Option B\nSecondFromRight(robin) ::: Option C\nSecondFromRight(hummingbird) ::: Option D\nSecondFromRight(crow) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Hawk, Raven, Robin, Hummingbird, Crow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) == 1 ::: The robin is the leftmost.\npos(Raven) == 2 ::: The raven is the second from the left.\npos(Hawk) == 4 ::: The hawk is the second from the right.\npos(Crow) == 3 ::: The crow is the third from the left.\n# Options\nis_valid(pos(Hawk) == 4) ::: A) The hawk is the second from the right.\nis_valid(pos(Raven) == 4) ::: B) The raven is the second from the right.\nis_valid(pos(Robin) == 4) ::: C) The robin is the second from the right.\nis_valid(pos(Hummingbird) == 4) ::: D) The hummingbird is the second from the right.\nis_valid(pos(Crow) == 4) ::: E) The crow is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nThirdFromLeft($x, bool)         ::: Bird $x is the third bird from the left.\nFacts:\nBird(hawk, True)                ::: The hawk.\nBird(raven, True)               ::: The raven.\nBird(robin, True)               ::: The robin.\nBird(hummingbird, True)         ::: The hummingbird.\nBird(crow, True)                ::: The crow.\nLeftMost(robin, True)           ::: The robin is the leftmost.\nSecondFromLeft(raven, True)     ::: The raven is the second from the left.\nSecondFromRight(hawk, True)     ::: The hawk is the second from the right.\nThirdFromLeft(crow, True)       ::: The crow is the third from the left.\nRules:\nSecondFromRight($a, True) >>> SecondFromRight($a, True) ::: If $a is second from the right, then $a is second from the right (tautology to maintain consistency).\nQuery:\nSecondFromRight(hawk, True)     ::: Option A\nSecondFromRight(raven, True)    ::: Option B\nSecondFromRight(robin, True)    ::: Option C\nSecondFromRight(hummingbird, True) ::: Option D\nSecondFromRight(crow, True)     ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nThirdFromLeft(x) ::: Bird x is the third bird from the left.\nPremises:\nBird(hawk) ::: The hawk.\nBird(raven) ::: The raven.\nBird(robin) ::: The robin.\nBird(hummingbird) ::: The hummingbird.\nBird(crow) ::: The crow.\nLeftMost(robin) ::: The robin is the leftmost.\nSecondFromLeft(raven) ::: The raven is the second from the left.\nSecondFromRight(hawk) ::: The hawk is the second from the right.\nThirdFromLeft(crow) ::: The crow is the third from the left.\n\u2200x \u2200y ((LeftMost(x) \u2227 LeftMost(y)) \u2192 (x = y)) ::: Only one leftmost bird.\n\u2200x \u2200y ((SecondFromLeft(x) \u2227 SecondFromLeft(y)) \u2192 (x = y)) ::: Only one second from left.\n\u2200x \u2200y ((SecondFromRight(x) \u2227 SecondFromRight(y)) \u2192 (x = y)) ::: Only one second from right.\n\u2200x \u2200y ((ThirdFromLeft(x) \u2227 ThirdFromLeft(y)) \u2192 (x = y)) ::: Only one third from left.\n\u2200x (Bird(x) \u2192 (LeftMost(x) \u2228 SecondFromLeft(x) \u2228 ThirdFromLeft(x) \u2228 SecondFromRight(x) \u2228 (x = hummingbird))) ::: Each bird has a unique position.\nConclusion:\nSecondFromRight(hawk) ::: Option A\nSecondFromRight(raven) ::: Option B\nSecondFromRight(robin) ::: Option C\nSecondFromRight(hummingbird) ::: Option D\nSecondFromRight(crow) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Hawk, Raven, Robin, Hummingbird, Crow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) == 1 ::: The robin is the leftmost.\npos(Raven) == 2 ::: The raven is the second from the left.\npos(Hawk) == 4 ::: The hawk is the second from the right.\npos(Crow) == 3 ::: The crow is the third from the left.\n# Options\nis_valid(pos(Hawk) == 4) ::: A) The hawk is the second from the right.\nis_valid(pos(Raven) == 4) ::: B) The raven is the second from the right.\nis_valid(pos(Robin) == 4) ::: C) The robin is the second from the right.\nis_valid(pos(Hummingbird) == 4) ::: D) The hummingbird is the second from the right.\nis_valid(pos(Crow) == 4) ::: E) The crow is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_19",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a tractor, a station wagon, a bus, a motorcyle, and a minivan. The minivan is older than the motorcyle. The bus is the newest. The tractor is the third-newest. The station wagon is the second-oldest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The tractor is the newest.",
            "B) The station wagon is the newest.",
            "C) The bus is the newest.",
            "D) The motorcyle is the newest.",
            "E) The minivan is the newest."
        ],
        "answer": "C",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nThirdNewest($x, bool)              ::: Vehicle $x is the third-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(tractor, True)             ::: The tractor.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(bus, True)                 ::: The bus.\nVehicle(motorcycle, True)          ::: The motorcycle.\nVehicle(minivan, True)             ::: The minivan.\nOlder(minivan, motorcycle, True)   ::: The minivan is older than the motorcycle.\nNewest(bus, True)                  ::: The bus is the newest.\nThirdNewest(tractor, True)         ::: The tractor is the third-newest.\nSecondOldest(station_wagon, True)  ::: The station wagon is the second-oldest.\nRules:\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nThirdNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Older($a, $d, True) && Older($a, $e, True) ::: The third-newest is newer than two and older than two.\nSecondOldest($a, True) >>> Older($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is older than one and newer than three.\nQuery:\nNewest(tractor, True)       ::: Option A\nNewest(station_wagon, True) ::: Option B\nNewest(bus, True)           ::: Option C\nNewest(motorcycle, True)    ::: Option D\nNewest(minivan, True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nOldest(x) ::: Vehicle x is the oldest.\nThirdNewest(x) ::: Vehicle x is the third-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(tractor) ::: The tractor.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(motorcycle) ::: The motorcycle.\nVehicle(minivan) ::: The minivan.\nOlder(minivan, motorcycle) ::: The minivan is older than the motorcycle.\nNewest(bus) ::: The bus is the newest.\nThirdNewest(tractor) ::: The tractor is the third-newest.\nSecondOldest(station_wagon) ::: The station wagon is the second-oldest.\n\u2200x \u2200y (Older(x, y) \u2194 Newer(y, x)) ::: Older and newer are inverses.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (ThirdNewest(x) \u2192 (\u2203y \u2203z (Newer(x, y) \u2227 Newer(x, z) \u2227 Older(x, y) \u2227 Older(x, z) \u2227 y \u2260 z))) ::: Third-newest is newer than two and older than two.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (Older(x, y) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z)))) ::: Second-oldest is older than one and newer than three.\nConclusion:\nNewest(tractor) ::: Option A\nNewest(station_wagon) ::: Option B\nNewest(bus) ::: Option C\nNewest(motorcycle) ::: Option D\nNewest(minivan) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Tractor, StationWagon, Bus, Motorcycle, Minivan])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nThirdNewest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Newer(x, y) == Not(Newer(y, x))) ::: Newer is asymmetric\nNewest(Bus) ::: The bus is the newest.\nThirdNewest(Tractor) ::: The tractor is the third-newest.\nSecondOldest(StationWagon) ::: The station wagon is the second-oldest.\nNewer(Minivan, Motorcycle) ::: The minivan is older than the motorcycle (expressed as newer relation)\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: Newest is newer than all others\nForAll([x:Vehicle], Implies(ThirdNewest(x), Count([y:Vehicle], Newer(x, y)) == 2)) ::: Third-newest is newer than exactly two\nForAll([x:Vehicle], Implies(SecondOldest(x), Count([y:Vehicle], Newer(y, x)) == 1)) ::: Second-oldest is older than exactly one\n# Options\nis_valid(Newest(Tractor)) ::: A) The tractor is the newest.\nis_valid(Newest(StationWagon)) ::: B) The station wagon is the newest.\nis_valid(Newest(Bus)) ::: C) The bus is the newest.\nis_valid(Newest(Motorcycle)) ::: D) The motorcycle is the newest.\nis_valid(Newest(Minivan)) ::: E) The minivan is the newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nThirdNewest($x, bool)              ::: Vehicle $x is the third-newest.\nSecondOldest($x, bool)             ::: Vehicle $x is the second-oldest.\nFacts:\nVehicle(tractor, True)             ::: The tractor.\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(bus, True)                 ::: The bus.\nVehicle(motorcycle, True)          ::: The motorcycle.\nVehicle(minivan, True)             ::: The minivan.\nOlder(minivan, motorcycle, True)   ::: The minivan is older than the motorcycle.\nNewest(bus, True)                  ::: The bus is the newest.\nThirdNewest(tractor, True)         ::: The tractor is the third-newest.\nSecondOldest(station_wagon, True)  ::: The station wagon is the second-oldest.\nRules:\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The newest vehicle is newer than all others.\nThirdNewest($a, True) >>> Newer($a, $b, True) && Newer($a, $c, True) && Older($a, $d, True) && Older($a, $e, True) ::: The third-newest is newer than two and older than two.\nSecondOldest($a, True) >>> Older($a, $b, True) && Newer($a, $c, True) && Newer($a, $d, True) && Newer($a, $e, True) ::: The second-oldest is older than one and newer than three.\nQuery:\nNewest(tractor, True)       ::: Option A\nNewest(station_wagon, True) ::: Option B\nNewest(bus, True)           ::: Option C\nNewest(motorcycle, True)    ::: Option D\nNewest(minivan, True)       ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nNewest(x) ::: Vehicle x is the newest.\nOldest(x) ::: Vehicle x is the oldest.\nThirdNewest(x) ::: Vehicle x is the third-newest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nPremises:\nVehicle(tractor) ::: The tractor.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(motorcycle) ::: The motorcycle.\nVehicle(minivan) ::: The minivan.\nOlder(minivan, motorcycle) ::: The minivan is older than the motorcycle.\nNewest(bus) ::: The bus is the newest.\nThirdNewest(tractor) ::: The tractor is the third-newest.\nSecondOldest(station_wagon) ::: The station wagon is the second-oldest.\n\u2200x \u2200y (Older(x, y) \u2194 Newer(y, x)) ::: Older and newer are inverses.\n\u2200x (Newest(x) \u2192 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (ThirdNewest(x) \u2192 (\u2203y \u2203z (Newer(x, y) \u2227 Newer(x, z) \u2227 Older(x, y) \u2227 Older(x, z) \u2227 y \u2260 z))) ::: Third-newest is newer than two and older than two.\n\u2200x (SecondOldest(x) \u2192 (\u2203y (Older(x, y) \u2227 \u2200z (z \u2260 y \u2192 Newer(x, z)))) ::: Second-oldest is older than one and newer than three.\nConclusion:\nNewest(tractor) ::: Option A\nNewest(station_wagon) ::: Option B\nNewest(bus) ::: Option C\nNewest(motorcycle) ::: Option D\nNewest(minivan) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Tractor, StationWagon, Bus, Motorcycle, Minivan])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nNewest = Function([Vehicle] -> [Bool])\nThirdNewest = Function([Vehicle] -> [Bool])\nSecondOldest = Function([Vehicle] -> [Bool])\n# Constraints\nForAll([x:Vehicle, y:Vehicle], Newer(x, y) == Not(Newer(y, x))) ::: Newer is asymmetric\nNewest(Bus) ::: The bus is the newest.\nThirdNewest(Tractor) ::: The tractor is the third-newest.\nSecondOldest(StationWagon) ::: The station wagon is the second-oldest.\nNewer(Minivan, Motorcycle) ::: The minivan is older than the motorcycle (expressed as newer relation)\nForAll([x:Vehicle], Implies(Newest(x), ForAll([y:Vehicle], Implies(x != y, Newer(x, y))))) ::: Newest is newer than all others\nForAll([x:Vehicle], Implies(ThirdNewest(x), Count([y:Vehicle], Newer(x, y)) == 2)) ::: Third-newest is newer than exactly two\nForAll([x:Vehicle], Implies(SecondOldest(x), Count([y:Vehicle], Newer(y, x)) == 1)) ::: Second-oldest is older than exactly one\n# Options\nis_valid(Newest(Tractor)) ::: A) The tractor is the newest.\nis_valid(Newest(StationWagon)) ::: B) The station wagon is the newest.\nis_valid(Newest(Bus)) ::: C) The bus is the newest.\nis_valid(Newest(Motorcycle)) ::: D) The motorcycle is the newest.\nis_valid(Newest(Minivan)) ::: E) The minivan is the newest."
            }
        ]
    },
    {
        "id": "logical_deduction_20",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a blue jay, a raven, a crow, a falcon, and a quail. The crow is to the left of the quail. The falcon is the leftmost. The blue jay is to the right of the quail. The raven is the second from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The blue jay is the second from the left.",
            "B) The raven is the second from the left.",
            "C) The crow is the second from the left.",
            "D) The falcon is the second from the left.",
            "E) The quail is the second from the left."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(blue_jay, True)            ::: The blue jay.\nBird(raven, True)               ::: The raven.\nBird(crow, True)                ::: The crow.\nBird(falcon, True)              ::: The falcon.\nBird(quail, True)               ::: The quail.\nLeftOf(crow, quail, True)       ::: The crow is to the left of the quail.\nLeftMost(falcon, True)          ::: The falcon is the leftmost.\nRightOf(blue_jay, quail, True)  ::: The blue jay is to the right of the quail.\nSecondFromLeft(raven, True)     ::: The raven is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(blue_jay, True)  ::: Option A\nSecondFromLeft(raven, True)     ::: Option B\nSecondFromLeft(crow, True)      ::: Option C\nSecondFromLeft(falcon, True)    ::: Option D\nSecondFromLeft(quail, True)     ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(blue_jay) ::: The blue jay.\nBird(raven) ::: The raven.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(quail) ::: The quail.\nLeftOf(crow, quail) ::: The crow is to the left of the quail.\nLeftMost(falcon) ::: The falcon is the leftmost.\nRightOf(blue_jay, quail) ::: The blue jay is to the right of the quail.\nSecondFromLeft(raven) ::: The raven is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(blue_jay) ::: Option A\nSecondFromLeft(raven) ::: Option B\nSecondFromLeft(crow) ::: Option C\nSecondFromLeft(falcon) ::: Option D\nSecondFromLeft(quail) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([blue_jay, raven, crow, falcon, quail])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(crow) < pos(quail) ::: The crow is to the left of the quail.\npos(falcon) == 1 ::: The falcon is the leftmost.\npos(blue_jay) > pos(quail) ::: The blue jay is to the right of the quail.\npos(raven) == 2 ::: The raven is the second from the left.\n# Options\nis_valid(pos(blue_jay) == 2) ::: A) The blue jay is the second from the left.\nis_valid(pos(raven) == 2) ::: B) The raven is the second from the left.\nis_valid(pos(crow) == 2) ::: C) The crow is the second from the left.\nis_valid(pos(falcon) == 2) ::: D) The falcon is the second from the left.\nis_valid(pos(quail) == 2) ::: E) The quail is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(blue_jay, True)            ::: The blue jay.\nBird(raven, True)               ::: The raven.\nBird(crow, True)                ::: The crow.\nBird(falcon, True)              ::: The falcon.\nBird(quail, True)               ::: The quail.\nLeftOf(crow, quail, True)       ::: The crow is to the left of the quail.\nLeftMost(falcon, True)          ::: The falcon is the leftmost.\nRightOf(blue_jay, quail, True)  ::: The blue jay is to the right of the quail.\nSecondFromLeft(raven, True)     ::: The raven is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most is second from the left.\nQuery:\nSecondFromLeft(blue_jay, True)  ::: Option A\nSecondFromLeft(raven, True)     ::: Option B\nSecondFromLeft(crow, True)      ::: Option C\nSecondFromLeft(falcon, True)    ::: Option D\nSecondFromLeft(quail, True)     ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(blue_jay) ::: The blue jay.\nBird(raven) ::: The raven.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(quail) ::: The quail.\nLeftOf(crow, quail) ::: The crow is to the left of the quail.\nLeftMost(falcon) ::: The falcon is the leftmost.\nRightOf(blue_jay, quail) ::: The blue jay is to the right of the quail.\nSecondFromLeft(raven) ::: The raven is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 RightOf(y, x)) ::: If x is left of y, then y is right of x.\n\u2200x \u2200y (RightOf(x, y) \u2192 LeftOf(y, x)) ::: If x is right of y, then y is left of x.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x \u2200y (LeftMost(x) \u2227 LeftOf(x, y) \u2192 SecondFromLeft(y)) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(blue_jay) ::: Option A\nSecondFromLeft(raven) ::: Option B\nSecondFromLeft(crow) ::: Option C\nSecondFromLeft(falcon) ::: Option D\nSecondFromLeft(quail) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([blue_jay, raven, crow, falcon, quail])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(crow) < pos(quail) ::: The crow is to the left of the quail.\npos(falcon) == 1 ::: The falcon is the leftmost.\npos(blue_jay) > pos(quail) ::: The blue jay is to the right of the quail.\npos(raven) == 2 ::: The raven is the second from the left.\n# Options\nis_valid(pos(blue_jay) == 2) ::: A) The blue jay is the second from the left.\nis_valid(pos(raven) == 2) ::: B) The raven is the second from the left.\nis_valid(pos(crow) == 2) ::: C) The crow is the second from the left.\nis_valid(pos(falcon) == 2) ::: D) The falcon is the second from the left.\nis_valid(pos(quail) == 2) ::: E) The quail is the second from the left."
            }
        ]
    }
]