[
    {
        "id": "logical_deduction_0",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a green book, a blue book, a white book, a purple book, and a yellow book. The blue book is to the right of the yellow book. The white book is to the left of the yellow book. The blue book is the second from the right. The purple book is the second from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The green book is the second from the left.",
            "B) The blue book is the second from the left.",
            "C) The white book is the second from the left.",
            "D) The purple book is the second from the left.",
            "E) The yellow book is the second from the left."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nSecondFromRight($a, True) >>> RightOf($rm, $a, True) && RightOf($a, $others, True) ::: $a is second from the right if it is immediately left of the rightmost book and right of the remaining books.\nSecondFromLeft($a, True) >>> LeftOf($lm, $a, True) && LeftOf($a, $others, True) ::: $a is second from the left if it is immediately right of the leftmost book and left of the remaining books.\nQuery:\nSecondFromLeft(green,  True)  ::: Option A\nSecondFromLeft(blue,   True)  ::: Option B\nSecondFromLeft(white,  True)  ::: Option C\nSecondFromLeft(purple, True)  ::: Option D\nSecondFromLeft(yellow, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nSecondFromRight(x) ::: Book x is the second book from the right.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: RightOf is transitive.\n\u2200x (SecondFromRight(x) \u2192 \u2203y (RightOf(y, x) \u2227 \u2200z (Book(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 RightOf(x, z)))) ::: x is second from right if it has exactly one book to its right and all others to its left.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y (LeftOf(y, x) \u2227 \u2200z (Book(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 LeftOf(x, z)))) ::: x is second from left if it has exactly one book to its left and all others to its right.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(blue) ::: Option B\nSecondFromLeft(white) ::: Option C\nSecondFromLeft(purple) ::: Option D\nSecondFromLeft(yellow) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Blue) == 2) ::: B) The blue book is the second from the left.\nis_valid(pos(White) == 2) ::: C) The white book is the second from the left.\nis_valid(pos(Purple) == 2) ::: D) The purple book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: E) The yellow book is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nSecondFromLeft($x, bool)        ::: Book $x is the second book from the left.\nFacts:\nBook(green,  True)              ::: The green book.\nBook(blue,   True)              ::: The blue book.\nBook(white,  True)              ::: The white book.\nBook(purple, True)              ::: The purple book.\nBook(yellow, True)              ::: The yellow book.\nRightOf(blue, yellow, True)     ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow, True)     ::: The white book is to the left of the yellow book.\nSecondFromRight(blue, True)     ::: The blue book is the second from the right.\nSecondFromLeft(purple, True)    ::: The purple book is the second from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nSecondFromRight($a, True) >>> RightOf($rm, $a, True) && RightOf($a, $others, True) ::: $a is second from the right if it is immediately left of the rightmost book and right of the remaining books.\nSecondFromLeft($a, True) >>> LeftOf($lm, $a, True) && LeftOf($a, $others, True) ::: $a is second from the left if it is immediately right of the leftmost book and left of the remaining books.\nQuery:\nSecondFromLeft(green,  True)  ::: Option A\nSecondFromLeft(blue,   True)  ::: Option B\nSecondFromLeft(white,  True)  ::: Option C\nSecondFromLeft(purple, True)  ::: Option D\nSecondFromLeft(yellow, True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nRightOf(x, y) ::: Book x is strictly to the right of book y.\nSecondFromRight(x) ::: Book x is the second book from the right.\nSecondFromLeft(x) ::: Book x is the second book from the left.\nPremises:\nBook(green) ::: The green book.\nBook(blue) ::: The blue book.\nBook(white) ::: The white book.\nBook(purple) ::: The purple book.\nBook(yellow) ::: The yellow book.\nRightOf(blue, yellow) ::: The blue book is to the right of the yellow book.\nLeftOf(white, yellow) ::: The white book is to the left of the yellow book.\nSecondFromRight(blue) ::: The blue book is the second from the right.\nSecondFromLeft(purple) ::: The purple book is the second from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: RightOf is transitive.\n\u2200x (SecondFromRight(x) \u2192 \u2203y (RightOf(y, x) \u2227 \u2200z (Book(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 RightOf(x, z)))) ::: x is second from right if it has exactly one book to its right and all others to its left.\n\u2200x (SecondFromLeft(x) \u2192 \u2203y (LeftOf(y, x) \u2227 \u2200z (Book(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 LeftOf(x, z)))) ::: x is second from left if it has exactly one book to its left and all others to its right.\nConclusion:\nSecondFromLeft(green) ::: Option A\nSecondFromLeft(blue) ::: Option B\nSecondFromLeft(white) ::: Option C\nSecondFromLeft(purple) ::: Option D\nSecondFromLeft(yellow) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Green, Blue, White, Purple, Yellow])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Blue) > pos(Yellow) ::: The blue book is to the right of the yellow book.\npos(White) < pos(Yellow) ::: The white book is to the left of the yellow book.\npos(Blue) == 4 ::: The blue book is the second from the right.\npos(Purple) == 2 ::: The purple book is the second from the left.\n# Options\nis_valid(pos(Green) == 2) ::: A) The green book is the second from the left.\nis_valid(pos(Blue) == 2) ::: B) The blue book is the second from the left.\nis_valid(pos(White) == 2) ::: C) The white book is the second from the left.\nis_valid(pos(Purple) == 2) ::: D) The purple book is the second from the left.\nis_valid(pos(Yellow) == 2) ::: E) The yellow book is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_1",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a sedan, a tractor, a minivan, and a limousine. The tractor is newer than the minivan. The tractor is older than the limousine. The convertible is older than the sedan. The convertible is the second-newest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the second-newest.",
            "B) The sedan is the second-newest.",
            "C) The tractor is the second-newest.",
            "D) The minivan is the second-newest.",
            "E) The limousine is the second-newest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)               ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)               ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)            ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(sedan, True)              ::: The sedan.\nVehicle(tractor, True)            ::: The tractor.\nVehicle(minivan, True)            ::: The minivan.\nVehicle(limousine, True)          ::: The limousine.\nNewer(tractor, minivan, True)     ::: The tractor is newer than the minivan.\nNewer(limousine, tractor, True)   ::: The limousine is newer than the tractor.\nOlder(convertible, sedan, True)   ::: The convertible is older than the sedan.\nSecondNewest(convertible, True)   ::: The convertible is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(convertible, True)  ::: Option A\nSecondNewest(sedan, True)        ::: Option B\nSecondNewest(tractor, True)      ::: Option C\nSecondNewest(minivan, True)      ::: Option D\nSecondNewest(limousine, True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, minivan) ::: The tractor is newer than the minivan.\nNewer(limousine, tractor) ::: The limousine is newer than the tractor.\nOlder(convertible, sedan) ::: The convertible is older than the sedan.\nSecondNewest(convertible) ::: The convertible is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x \u2200y (SecondNewest(x) \u2227 SecondNewest(y) \u2192 x = y) ::: Only one vehicle can be second-newest.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(sedan) ::: Option B\nSecondNewest(tractor) ::: Option C\nSecondNewest(minivan) ::: Option D\nSecondNewest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, Tractor, Minivan, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nNewer(Tractor, Minivan) ::: The tractor is newer than the minivan.\nNewer(Limousine, Tractor) ::: The limousine is newer than the tractor.\nOlder(Convertible, Sedan) ::: The convertible is older than the sedan.\nSecondNewest(Convertible) ::: The convertible is the second-newest.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: Newer implies older\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: Older implies newer\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest.\nis_valid(SecondNewest(Sedan)) ::: B) The sedan is the second-newest.\nis_valid(SecondNewest(Tractor)) ::: C) The tractor is the second-newest.\nis_valid(SecondNewest(Minivan)) ::: D) The minivan is the second-newest.\nis_valid(SecondNewest(Limousine)) ::: E) The limousine is the second-newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)               ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)               ::: Vehicle $x is older than vehicle $y.\nSecondNewest($x, bool)            ::: Vehicle $x is the second-newest vehicle.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(sedan, True)              ::: The sedan.\nVehicle(tractor, True)            ::: The tractor.\nVehicle(minivan, True)            ::: The minivan.\nVehicle(limousine, True)          ::: The limousine.\nNewer(tractor, minivan, True)     ::: The tractor is newer than the minivan.\nNewer(limousine, tractor, True)   ::: The limousine is newer than the tractor.\nOlder(convertible, sedan, True)   ::: The convertible is older than the sedan.\nSecondNewest(convertible, True)   ::: The convertible is the second-newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nQuery:\nSecondNewest(convertible, True)  ::: Option A\nSecondNewest(sedan, True)        ::: Option B\nSecondNewest(tractor, True)      ::: Option C\nSecondNewest(minivan, True)      ::: Option D\nSecondNewest(limousine, True)    ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nSecondNewest(x) ::: Vehicle x is the second-newest vehicle.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(minivan) ::: The minivan.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, minivan) ::: The tractor is newer than the minivan.\nNewer(limousine, tractor) ::: The limousine is newer than the tractor.\nOlder(convertible, sedan) ::: The convertible is older than the sedan.\nSecondNewest(convertible) ::: The convertible is the second-newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x \u2200y (SecondNewest(x) \u2227 SecondNewest(y) \u2192 x = y) ::: Only one vehicle can be second-newest.\nConclusion:\nSecondNewest(convertible) ::: Option A\nSecondNewest(sedan) ::: Option B\nSecondNewest(tractor) ::: Option C\nSecondNewest(minivan) ::: Option D\nSecondNewest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, Tractor, Minivan, Limousine])\nNewer = Function([Vehicle, Vehicle] -> [Bool])\nOlder = Function([Vehicle, Vehicle] -> [Bool])\nSecondNewest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nNewer(Tractor, Minivan) ::: The tractor is newer than the minivan.\nNewer(Limousine, Tractor) ::: The limousine is newer than the tractor.\nOlder(Convertible, Sedan) ::: The convertible is older than the sedan.\nSecondNewest(Convertible) ::: The convertible is the second-newest.\nForAll([x:Vehicle, y:Vehicle], Implies(Newer(x, y), Older(y, x))) ::: Newer implies older\nForAll([x:Vehicle, y:Vehicle], Implies(Older(x, y), Newer(y, x))) ::: Older implies newer\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Newer(x, y), Newer(y, z)), Newer(x, z))) ::: Newer is transitive\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(Older(x, y), Older(y, z)), Older(x, z))) ::: Older is transitive\n# Options\nis_valid(SecondNewest(Convertible)) ::: A) The convertible is the second-newest.\nis_valid(SecondNewest(Sedan)) ::: B) The sedan is the second-newest.\nis_valid(SecondNewest(Tractor)) ::: C) The tractor is the second-newest.\nis_valid(SecondNewest(Minivan)) ::: D) The minivan is the second-newest.\nis_valid(SecondNewest(Limousine)) ::: E) The limousine is the second-newest."
            }
        ]
    },
    {
        "id": "logical_deduction_2",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a station wagon, a sedan, a tractor, a motorcyle, and a limousine. The tractor is newer than the motorcyle. The motorcyle is newer than the sedan. The limousine is the oldest. The station wagon is the newest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The station wagon is the oldest.",
            "B) The sedan is the oldest.",
            "C) The tractor is the oldest.",
            "D) The motorcyle is the oldest.",
            "E) The limousine is the oldest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan,        True)       ::: The sedan.\nVehicle(tractor,      True)       ::: The tractor.\nVehicle(motorcyle,    True)       ::: The motorcyle.\nVehicle(limousine,    True)       ::: The limousine.\nNewer(tractor, motorcyle, True)   ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan, True)     ::: The motorcyle is newer than the sedan.\nOldest(limousine, True)           ::: The limousine is the oldest.\nNewest(station_wagon, True)       ::: The station wagon is the newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($x, True) >>> Older($x, station_wagon, True) && Older($x, sedan, True) && Older($x, tractor, True) && Older($x, motorcyle, True) ::: The oldest vehicle is older than all others.\nNewest($x, True) >>> Newer($x, sedan, True) && Newer($x, tractor, True) && Newer($x, motorcyle, True) && Newer($x, limousine, True) ::: The newest vehicle is newer than all others.\nQuery:\nOldest(station_wagon, True)       ::: Option A\nOldest(sedan,        True)       ::: Option B\nOldest(tractor,      True)       ::: Option C\nOldest(motorcyle,    True)       ::: Option D\nOldest(limousine,    True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, motorcyle) ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan) ::: The motorcyle is newer than the sedan.\nOldest(limousine) ::: The limousine is the oldest.\nNewest(station_wagon) ::: The station wagon is the newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x (Oldest(x) \u2192 (Older(x, station_wagon) \u2227 Older(x, sedan) \u2227 Older(x, tractor) \u2227 Older(x, motorcyle))) ::: The oldest vehicle is older than all others.\n\u2200x (Newest(x) \u2192 (Newer(x, sedan) \u2227 Newer(x, tractor) \u2227 Newer(x, motorcyle) \u2227 Newer(x, limousine))) ::: The newest vehicle is newer than all others.\nConclusion:\nOldest(station_wagon) ::: Option A\nOldest(sedan) ::: Option B\nOldest(tractor) ::: Option C\nOldest(motorcyle) ::: Option D\nOldest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([StationWagon, Sedan, Tractor, Motorcycle, Limousine])\nnewer = Function([Vehicle, Vehicle] -> [Bool])\nolder = Function([Vehicle, Vehicle] -> [Bool])\noldest = Function([Vehicle] -> [Bool])\nnewest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nnewer(Tractor, Motorcycle) ::: The tractor is newer than the motorcycle.\nnewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan.\noldest(Limousine) ::: The limousine is the oldest.\nnewest(StationWagon) ::: The station wagon is the newest.\nForAll([x:Vehicle, y:Vehicle], Implies(newer(x, y), older(y, x))) ::: If x is newer than y, then y is older than x.\nForAll([x:Vehicle, y:Vehicle], Implies(older(x, y), newer(y, x))) ::: If x is older than y, then y is newer than x.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(newer(x, y), newer(y, z)), newer(x, z))) ::: Newer is transitive.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(older(x, y), older(y, z)), older(x, z))) ::: Older is transitive.\nForAll([x:Vehicle], Implies(oldest(x), And(older(x, StationWagon), older(x, Sedan), older(x, Tractor), older(x, Motorcycle)))) ::: The oldest is older than all others.\nForAll([x:Vehicle], Implies(newest(x), And(newer(x, Sedan), newer(x, Tractor), newer(x, Motorcycle), newer(x, Limousine)))) ::: The newest is newer than all others.\n# Options\nis_valid(oldest(StationWagon)) ::: A) The station wagon is the oldest.\nis_valid(oldest(Sedan)) ::: B) The sedan is the oldest.\nis_valid(oldest(Tractor)) ::: C) The tractor is the oldest.\nis_valid(oldest(Motorcycle)) ::: D) The motorcycle is the oldest.\nis_valid(oldest(Limousine)) ::: E) The limousine is the oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOlder($x, $y, bool)                ::: Vehicle $x is older than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(station_wagon, True)       ::: The station wagon.\nVehicle(sedan,        True)       ::: The sedan.\nVehicle(tractor,      True)       ::: The tractor.\nVehicle(motorcyle,    True)       ::: The motorcyle.\nVehicle(limousine,    True)       ::: The limousine.\nNewer(tractor, motorcyle, True)   ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan, True)     ::: The motorcyle is newer than the sedan.\nOldest(limousine, True)           ::: The limousine is the oldest.\nNewest(station_wagon, True)       ::: The station wagon is the newest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nOlder($a, $b, True) >>> Newer($b, $a, True) ::: If $a is older than $b, then $b is newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOlder($a, $b, True) && Older($b, $c, True) >>> Older($a, $c, True) ::: Older is transitive.\nOldest($x, True) >>> Older($x, station_wagon, True) && Older($x, sedan, True) && Older($x, tractor, True) && Older($x, motorcyle, True) ::: The oldest vehicle is older than all others.\nNewest($x, True) >>> Newer($x, sedan, True) && Newer($x, tractor, True) && Newer($x, motorcyle, True) && Newer($x, limousine, True) ::: The newest vehicle is newer than all others.\nQuery:\nOldest(station_wagon, True)       ::: Option A\nOldest(sedan,        True)       ::: Option B\nOldest(tractor,      True)       ::: Option C\nOldest(motorcyle,    True)       ::: Option D\nOldest(limousine,    True)       ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOlder(x, y) ::: Vehicle x is older than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(station_wagon) ::: The station wagon.\nVehicle(sedan) ::: The sedan.\nVehicle(tractor) ::: The tractor.\nVehicle(motorcyle) ::: The motorcyle.\nVehicle(limousine) ::: The limousine.\nNewer(tractor, motorcyle) ::: The tractor is newer than the motorcyle.\nNewer(motorcyle, sedan) ::: The motorcyle is newer than the sedan.\nOldest(limousine) ::: The limousine is the oldest.\nNewest(station_wagon) ::: The station wagon is the newest.\n\u2200x \u2200y (Newer(x, y) \u2192 Older(y, x)) ::: If x is newer than y, then y is older than x.\n\u2200x \u2200y (Older(x, y) \u2192 Newer(y, x)) ::: If x is older than y, then y is newer than x.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x \u2200y \u2200z (Older(x, y) \u2227 Older(y, z) \u2192 Older(x, z)) ::: Older is transitive.\n\u2200x (Oldest(x) \u2192 (Older(x, station_wagon) \u2227 Older(x, sedan) \u2227 Older(x, tractor) \u2227 Older(x, motorcyle))) ::: The oldest vehicle is older than all others.\n\u2200x (Newest(x) \u2192 (Newer(x, sedan) \u2227 Newer(x, tractor) \u2227 Newer(x, motorcyle) \u2227 Newer(x, limousine))) ::: The newest vehicle is newer than all others.\nConclusion:\nOldest(station_wagon) ::: Option A\nOldest(sedan) ::: Option B\nOldest(tractor) ::: Option C\nOldest(motorcyle) ::: Option D\nOldest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([StationWagon, Sedan, Tractor, Motorcycle, Limousine])\nnewer = Function([Vehicle, Vehicle] -> [Bool])\nolder = Function([Vehicle, Vehicle] -> [Bool])\noldest = Function([Vehicle] -> [Bool])\nnewest = Function([Vehicle] -> [Bool])\n# Constraints\nDistinct([v:Vehicle], v) ::: Each vehicle is unique\nnewer(Tractor, Motorcycle) ::: The tractor is newer than the motorcycle.\nnewer(Motorcycle, Sedan) ::: The motorcycle is newer than the sedan.\noldest(Limousine) ::: The limousine is the oldest.\nnewest(StationWagon) ::: The station wagon is the newest.\nForAll([x:Vehicle, y:Vehicle], Implies(newer(x, y), older(y, x))) ::: If x is newer than y, then y is older than x.\nForAll([x:Vehicle, y:Vehicle], Implies(older(x, y), newer(y, x))) ::: If x is older than y, then y is newer than x.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(newer(x, y), newer(y, z)), newer(x, z))) ::: Newer is transitive.\nForAll([x:Vehicle, y:Vehicle, z:Vehicle], Implies(And(older(x, y), older(y, z)), older(x, z))) ::: Older is transitive.\nForAll([x:Vehicle], Implies(oldest(x), And(older(x, StationWagon), older(x, Sedan), older(x, Tractor), older(x, Motorcycle)))) ::: The oldest is older than all others.\nForAll([x:Vehicle], Implies(newest(x), And(newer(x, Sedan), newer(x, Tractor), newer(x, Motorcycle), newer(x, Limousine)))) ::: The newest is newer than all others.\n# Options\nis_valid(oldest(StationWagon)) ::: A) The station wagon is the oldest.\nis_valid(oldest(Sedan)) ::: B) The sedan is the oldest.\nis_valid(oldest(Tractor)) ::: C) The tractor is the oldest.\nis_valid(oldest(Motorcycle)) ::: D) The motorcycle is the oldest.\nis_valid(oldest(Limousine)) ::: E) The limousine is the oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_3",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: watermelons, plums, apples, peaches, and kiwis. The apples are less expensive than the peaches. The plums are the cheapest. The kiwis are the second-cheapest. The watermelons are more expensive than the peaches.",
        "question": "Which of the following is true?",
        "options": [
            "A) The watermelons are the most expensive.",
            "B) The plums are the most expensive.",
            "C) The apples are the most expensive.",
            "D) The peaches are the most expensive.",
            "E) The kiwis are the most expensive."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest.\nSecondCheapest($x, bool)         ::: Fruit $x is the second-cheapest.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(plums, True)               ::: The plums.\nFruit(apples, True)              ::: The apples.\nFruit(peaches, True)             ::: The peaches.\nFruit(kiwis, True)               ::: The kiwis.\nCheaper(apples, peaches, True)   ::: The apples are less expensive than the peaches.\nCheapest(plums, True)            ::: The plums are the cheapest.\nSecondCheapest(kiwis, True)      ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons, True) ::: The watermelons are more expensive than the peaches.\nRules:\nCheaper($a, $b, True) >>> Cheaper($b, $a, False) ::: If $a is cheaper than $b, then $b is not cheaper than $a.\nCheapest($a, True) >>> Cheaper($a, $b, True) && Cheaper($a, $c, True) && Cheaper($a, $d, True) && Cheaper($a, $e, True) ::: The cheapest fruit is cheaper than all other fruits.\nSecondCheapest($a, True) >>> Cheaper($cheapest, $a, True) && Cheaper($a, $b, True) && Cheaper($a, $c, True) && Cheaper($a, $d, True) ::: The second-cheapest fruit is cheaper than all except the cheapest.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nCheaper($a, $b, True) && Cheaper($b, $c, True) && Cheaper($c, $d, True) && Cheaper($d, $e, True) >>> MostExpensive($e, True) ::: The fruit that is more expensive than all others is the most expensive.\nQuery:\nMostExpensive(watermelons, True) ::: Option A\nMostExpensive(plums, True)       ::: Option B\nMostExpensive(apples, True)      ::: Option C\nMostExpensive(peaches, True)     ::: Option D\nMostExpensive(kiwis, True)       ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nCheapest(x) ::: x is the cheapest.\nSecondCheapest(x) ::: x is the second-cheapest.\nMostExpensive(x) ::: x is the most expensive.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(plums) ::: The plums.\nFruit(apples) ::: The apples.\nFruit(peaches) ::: The peaches.\nFruit(kiwis) ::: The kiwis.\nCheaper(apples, peaches) ::: The apples are less expensive than the peaches.\nCheapest(plums) ::: The plums are the cheapest.\nSecondCheapest(kiwis) ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons) ::: The watermelons are more expensive than the peaches.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x (Cheapest(x) \u2192 \u2200y (Fruit(y) \u2227 x \u2260 y \u2192 Cheaper(x, y))) ::: The cheapest is cheaper than all others.\n\u2200x (SecondCheapest(x) \u2192 \u2203y (Cheapest(y) \u2227 Cheaper(y, x) \u2227 \u2200z (Fruit(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 Cheaper(x, z)))) ::: The second-cheapest is cheaper than all except the cheapest.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (MostExpensive(x) \u2194 \u2200y (Fruit(y) \u2227 x \u2260 y \u2192 Cheaper(y, x))) ::: The most expensive is more expensive than all others.\nConclusion:\nMostExpensive(watermelons) ::: Option A\nMostExpensive(plums) ::: Option B\nMostExpensive(apples) ::: Option C\nMostExpensive(peaches) ::: Option D\nMostExpensive(kiwis) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nFruit = EnumSort([Watermelons, Plums, Apples, Peaches, Kiwis])\nCheaper = Function([Fruit, Fruit] -> [Bool])\nCheapest = Function([Fruit] -> [Bool])\nSecondCheapest = Function([Fruit] -> [Bool])\nMostExpensive = Function([Fruit] -> [Bool])\n# Constraints\nForAll([x:Fruit, y:Fruit], Implies(Cheaper(x, y), Not(Cheaper(y, x)))) ::: Cheaper is asymmetric\nForAll([x:Fruit], Implies(Cheapest(x), ForAll([y:Fruit], Implies(x != y, Cheaper(x, y))))) ::: Cheapest is cheaper than all others\nForAll([x:Fruit], Implies(SecondCheapest(x), Exists([y:Fruit], And(Cheapest(y), Cheaper(y, x), ForAll([z:Fruit], Implies(And(z != y, z != x), Cheaper(x, z)))))) ::: Second-cheapest is cheaper than all except cheapest\nForAll([x:Fruit, y:Fruit, z:Fruit], Implies(And(Cheaper(x, y), Cheaper(y, z)), Cheaper(x, z)) ::: Cheaper is transitive\nForAll([x:Fruit], Implies(MostExpensive(x), ForAll([y:Fruit], Implies(x != y, Cheaper(y, x))))) ::: Most expensive is more expensive than all others\nCheaper(Apples, Peaches) ::: The apples are less expensive than the peaches.\nCheapest(Plums) ::: The plums are the cheapest.\nSecondCheapest(Kiwis) ::: The kiwis are the second-cheapest.\nCheaper(Peaches, Watermelons) ::: The watermelons are more expensive than the peaches.\n# Options\nis_valid(MostExpensive(Watermelons)) ::: A) The watermelons are the most expensive.\nis_valid(MostExpensive(Plums)) ::: B) The plums are the most expensive.\nis_valid(MostExpensive(Apples)) ::: C) The apples are the most expensive.\nis_valid(MostExpensive(Peaches)) ::: D) The peaches are the most expensive.\nis_valid(MostExpensive(Kiwis)) ::: E) The kiwis are the most expensive."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest.\nSecondCheapest($x, bool)         ::: Fruit $x is the second-cheapest.\nMostExpensive($x, bool)          ::: Fruit $x is the most expensive.\nFacts:\nFruit(watermelons, True)         ::: The watermelons.\nFruit(plums, True)               ::: The plums.\nFruit(apples, True)              ::: The apples.\nFruit(peaches, True)             ::: The peaches.\nFruit(kiwis, True)               ::: The kiwis.\nCheaper(apples, peaches, True)   ::: The apples are less expensive than the peaches.\nCheapest(plums, True)            ::: The plums are the cheapest.\nSecondCheapest(kiwis, True)      ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons, True) ::: The watermelons are more expensive than the peaches.\nRules:\nCheaper($a, $b, True) >>> Cheaper($b, $a, False) ::: If $a is cheaper than $b, then $b is not cheaper than $a.\nCheapest($a, True) >>> Cheaper($a, $b, True) && Cheaper($a, $c, True) && Cheaper($a, $d, True) && Cheaper($a, $e, True) ::: The cheapest fruit is cheaper than all other fruits.\nSecondCheapest($a, True) >>> Cheaper($cheapest, $a, True) && Cheaper($a, $b, True) && Cheaper($a, $c, True) && Cheaper($a, $d, True) ::: The second-cheapest fruit is cheaper than all except the cheapest.\nCheaper($a, $b, True) && Cheaper($b, $c, True) >>> Cheaper($a, $c, True) ::: Cheaper is transitive.\nCheaper($a, $b, True) && Cheaper($b, $c, True) && Cheaper($c, $d, True) && Cheaper($d, $e, True) >>> MostExpensive($e, True) ::: The fruit that is more expensive than all others is the most expensive.\nQuery:\nMostExpensive(watermelons, True) ::: Option A\nMostExpensive(plums, True)       ::: Option B\nMostExpensive(apples, True)      ::: Option C\nMostExpensive(peaches, True)     ::: Option D\nMostExpensive(kiwis, True)       ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nCheaper(x, y) ::: x is cheaper than y.\nCheapest(x) ::: x is the cheapest.\nSecondCheapest(x) ::: x is the second-cheapest.\nMostExpensive(x) ::: x is the most expensive.\nPremises:\nFruit(watermelons) ::: The watermelons.\nFruit(plums) ::: The plums.\nFruit(apples) ::: The apples.\nFruit(peaches) ::: The peaches.\nFruit(kiwis) ::: The kiwis.\nCheaper(apples, peaches) ::: The apples are less expensive than the peaches.\nCheapest(plums) ::: The plums are the cheapest.\nSecondCheapest(kiwis) ::: The kiwis are the second-cheapest.\nCheaper(peaches, watermelons) ::: The watermelons are more expensive than the peaches.\n\u2200x \u2200y (Cheaper(x, y) \u2192 \u00acCheaper(y, x)) ::: Cheaper is asymmetric.\n\u2200x (Cheapest(x) \u2192 \u2200y (Fruit(y) \u2227 x \u2260 y \u2192 Cheaper(x, y))) ::: The cheapest is cheaper than all others.\n\u2200x (SecondCheapest(x) \u2192 \u2203y (Cheapest(y) \u2227 Cheaper(y, x) \u2227 \u2200z (Fruit(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 Cheaper(x, z)))) ::: The second-cheapest is cheaper than all except the cheapest.\n\u2200x \u2200y \u2200z (Cheaper(x, y) \u2227 Cheaper(y, z) \u2192 Cheaper(x, z)) ::: Cheaper is transitive.\n\u2200x (MostExpensive(x) \u2194 \u2200y (Fruit(y) \u2227 x \u2260 y \u2192 Cheaper(y, x))) ::: The most expensive is more expensive than all others.\nConclusion:\nMostExpensive(watermelons) ::: Option A\nMostExpensive(plums) ::: Option B\nMostExpensive(apples) ::: Option C\nMostExpensive(peaches) ::: Option D\nMostExpensive(kiwis) ::: Option E",
                "SAT": "# Declarations\nFruit = EnumSort([Watermelons, Plums, Apples, Peaches, Kiwis])\nCheaper = Function([Fruit, Fruit] -> [Bool])\nCheapest = Function([Fruit] -> [Bool])\nSecondCheapest = Function([Fruit] -> [Bool])\nMostExpensive = Function([Fruit] -> [Bool])\n# Constraints\nForAll([x:Fruit, y:Fruit], Implies(Cheaper(x, y), Not(Cheaper(y, x)))) ::: Cheaper is asymmetric\nForAll([x:Fruit], Implies(Cheapest(x), ForAll([y:Fruit], Implies(x != y, Cheaper(x, y))))) ::: Cheapest is cheaper than all others\nForAll([x:Fruit], Implies(SecondCheapest(x), Exists([y:Fruit], And(Cheapest(y), Cheaper(y, x), ForAll([z:Fruit], Implies(And(z != y, z != x), Cheaper(x, z)))))) ::: Second-cheapest is cheaper than all except cheapest\nForAll([x:Fruit, y:Fruit, z:Fruit], Implies(And(Cheaper(x, y), Cheaper(y, z)), Cheaper(x, z)) ::: Cheaper is transitive\nForAll([x:Fruit], Implies(MostExpensive(x), ForAll([y:Fruit], Implies(x != y, Cheaper(y, x))))) ::: Most expensive is more expensive than all others\nCheaper(Apples, Peaches) ::: The apples are less expensive than the peaches.\nCheapest(Plums) ::: The plums are the cheapest.\nSecondCheapest(Kiwis) ::: The kiwis are the second-cheapest.\nCheaper(Peaches, Watermelons) ::: The watermelons are more expensive than the peaches.\n# Options\nis_valid(MostExpensive(Watermelons)) ::: A) The watermelons are the most expensive.\nis_valid(MostExpensive(Plums)) ::: B) The plums are the most expensive.\nis_valid(MostExpensive(Apples)) ::: C) The apples are the most expensive.\nis_valid(MostExpensive(Peaches)) ::: D) The peaches are the most expensive.\nis_valid(MostExpensive(Kiwis)) ::: E) The kiwis are the most expensive."
            }
        ]
    },
    {
        "id": "logical_deduction_4",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a crow, a falcon, a robin, and a blue jay. The robin is to the right of the cardinal. The cardinal is to the right of the blue jay. The blue jay is the second from the left. The crow is the rightmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the second from the left.",
            "B) The crow is the second from the left.",
            "C) The falcon is the second from the left.",
            "D) The robin is the second from the left.",
            "E) The blue jay is the second from the left."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right\u2011most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow,     True)            ::: The crow.\nBird(falcon,   True)            ::: The falcon.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($a, $b, True) && RightOf($a, $c, True) && RightOf($a, $d, True) && RightOf($a, $e, True) >>> RightMost($a, True) ::: A bird that is to the right of all the other four is the right\u2011most bird.\nLeftOf($a, $b, True) && LeftOf($a, $c, True) && LeftOf($a, $d, True) && LeftOf($a, $e, True) >>> SecondFromLeft($a, True) ::: A bird that is to the left of all the other four is the second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(crow,     True)  ::: Option B\nSecondFromLeft(falcon,   True)  ::: Option C\nSecondFromLeft(robin,    True)  ::: Option D\nSecondFromLeft(blue_jay, True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightMost(x) \u2194 (\u2200y (Bird(y) \u2227 y \u2260 x \u2192 LeftOf(y, x)))) ::: Right-most is to the right of all others.\n\u2200x (SecondFromLeft(x) \u2194 (\u2203y (LeftOf(y, x) \u2227 \u2200z (Bird(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 RightOf(z, y))))) ::: Second-from-left has exactly one bird to its left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(falcon) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(blue_jay) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Cardinal, Crow, Falcon, Robin, BlueJay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Cardinal) ::: The robin is to the right of the cardinal.\npos(Cardinal) > pos(BlueJay) ::: The cardinal is to the right of the blue jay.\npos(BlueJay) == 2 ::: The blue jay is the second from the left.\npos(Crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Falcon) == 2) ::: C) The falcon is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: E) The blue jay is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right\u2011most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(crow,     True)            ::: The crow.\nBird(falcon,   True)            ::: The falcon.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nRightOf(robin, cardinal, True)  ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay, True) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay, True)  ::: The blue jay is the second from the left.\nRightMost(crow, True)           ::: The crow is the rightmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($a, $b, True) && RightOf($a, $c, True) && RightOf($a, $d, True) && RightOf($a, $e, True) >>> RightMost($a, True) ::: A bird that is to the right of all the other four is the right\u2011most bird.\nLeftOf($a, $b, True) && LeftOf($a, $c, True) && LeftOf($a, $d, True) && LeftOf($a, $e, True) >>> SecondFromLeft($a, True) ::: A bird that is to the left of all the other four is the second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(crow,     True)  ::: Option B\nSecondFromLeft(falcon,   True)  ::: Option C\nSecondFromLeft(robin,    True)  ::: Option D\nSecondFromLeft(blue_jay, True)  ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(crow) ::: The crow.\nBird(falcon) ::: The falcon.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nRightOf(robin, cardinal) ::: The robin is to the right of the cardinal.\nRightOf(cardinal, blue_jay) ::: The cardinal is to the right of the blue jay.\nSecondFromLeft(blue_jay) ::: The blue jay is the second from the left.\nRightMost(crow) ::: The crow is the rightmost.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\n\u2200x (RightMost(x) \u2194 (\u2200y (Bird(y) \u2227 y \u2260 x \u2192 LeftOf(y, x)))) ::: Right-most is to the right of all others.\n\u2200x (SecondFromLeft(x) \u2194 (\u2203y (LeftOf(y, x) \u2227 \u2200z (Bird(z) \u2227 z \u2260 y \u2227 z \u2260 x \u2192 RightOf(z, y))))) ::: Second-from-left has exactly one bird to its left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(crow) ::: Option B\nSecondFromLeft(falcon) ::: Option C\nSecondFromLeft(robin) ::: Option D\nSecondFromLeft(blue_jay) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Cardinal, Crow, Falcon, Robin, BlueJay])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Cardinal) ::: The robin is to the right of the cardinal.\npos(Cardinal) > pos(BlueJay) ::: The cardinal is to the right of the blue jay.\npos(BlueJay) == 2 ::: The blue jay is the second from the left.\npos(Crow) == 5 ::: The crow is the rightmost.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Crow) == 2) ::: B) The crow is the second from the left.\nis_valid(pos(Falcon) == 2) ::: C) The falcon is the second from the left.\nis_valid(pos(Robin) == 2) ::: D) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: E) The blue jay is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_5",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a sedan, a station wagon, a bus, and a limousine. The sedan is newer than the station wagon. The limousine is the newest. The bus is the second-newest. The convertible is the second-oldest.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the second-oldest.",
            "B) The sedan is the second-oldest.",
            "C) The station wagon is the second-oldest.",
            "D) The bus is the second-oldest.",
            "E) The limousine is the second-oldest."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)               ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                  ::: Vehicle $x is the oldest.\nSecondOldest($x, bool)            ::: Vehicle $x is the second-oldest.\nSecondNewest($x, bool)            ::: Vehicle $x is the second-newest.\nNewest($x, bool)                  ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)        ::: The convertible.\nVehicle(sedan, True)              ::: The sedan.\nVehicle(station_wagon, True)      ::: The station wagon.\nVehicle(bus, True)                ::: The bus.\nVehicle(limousine, True)          ::: The limousine.\nNewer(sedan, station_wagon, True) ::: The sedan is newer than the station wagon.\nNewest(limousine, True)           ::: The limousine is the newest.\nSecondNewest(bus, True)           ::: The bus is the second-newest.\nSecondOldest(convertible, True)   ::: The convertible is the second-oldest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nNewest($n, True) >>> Newer($n, $x, True) && Newer($n, $y, True) && Newer($n, $z, True) && Newer($n, $w, True) ::: The newest vehicle is newer than all others.\nSecondNewest($s, True) >>> Newer($s, $x, True) && Newer($s, $y, True) && Newer($s, $z, True) && Newer($n, $s, True) ::: The second-newest is newer than all except the newest.\nSecondOldest($s, True) >>> Older($s, $x, True) && Older($s, $y, True) && Older($s, $z, True) && Older($w, $s, True) ::: The second-oldest is older than all except the oldest.\nQuery:\nSecondOldest(convertible, True)  ::: Option A\nSecondOldest(sedan, True)        ::: Option B\nSecondOldest(station_wagon, True) ::: Option C\nSecondOldest(bus, True)          ::: Option D\nSecondOldest(limousine, True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(limousine) ::: The limousine.\nNewer(sedan, station_wagon) ::: The sedan is newer than the station wagon.\nNewest(limousine) ::: The limousine is the newest.\nSecondNewest(bus) ::: The bus is the second-newest.\nSecondOldest(convertible) ::: The convertible is the second-oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x \u2200y \u2200z ((Newer(x, y) \u2227 Newer(y, z)) \u2192 Newer(x, z)) ::: \"Newer\" is transitive.\n\u2200x (Newest(x) \u2194 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (SecondNewest(x) \u2194 (\u2203y (Newest(y) \u2227 \u2200z (z \u2260 y \u2192 (z = x \u2228 Newer(y, z)))))) ::: The second-newest is newer than all except the newest.\n\u2200x (SecondOldest(x) \u2194 (\u2203y (Oldest(y) \u2227 \u2200z (z \u2260 y \u2192 (z = x \u2228 Older(y, z)))))) ::: The second-oldest is older than all except the oldest.\n\u2200x (Oldest(x) \u2194 (\u2200y (x \u2260 y \u2192 Older(x, y)))) ::: The oldest is older than all others.\nConclusion:\nSecondOldest(convertible) ::: Option A\nSecondOldest(sedan) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(limousine) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, StationWagon, Bus, Limousine])\nage = IntSort([1, 2, 3, 4, 5]) ::: 1 is oldest, 5 is newest\nvehicle_age = Function([Vehicle] -> [age])\n# Constraints\nDistinct([v:Vehicle], vehicle_age(v)) ::: Each vehicle has a unique age\nvehicle_age(Sedan) > vehicle_age(StationWagon) ::: The sedan is newer than the station wagon.\nvehicle_age(Limousine) == 5 ::: The limousine is the newest.\nvehicle_age(Bus) == 4 ::: The bus is the second-newest.\nvehicle_age(Convertible) == 2 ::: The convertible is the second-oldest.\n# Options\nis_valid(vehicle_age(Convertible) == 2) ::: A) The convertible is the second-oldest.\nis_valid(vehicle_age(Sedan) == 2) ::: B) The sedan is the second-oldest.\nis_valid(vehicle_age(StationWagon) == 2) ::: C) The station wagon is the second-oldest.\nis_valid(vehicle_age(Bus) == 2) ::: D) The bus is the second-oldest.\nis_valid(vehicle_age(Limousine) == 2) ::: E) The limousine is the second-oldest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)               ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                  ::: Vehicle $x is the oldest.\nSecondOldest($x, bool)            ::: Vehicle $x is the second-oldest.\nSecondNewest($x, bool)            ::: Vehicle $x is the second-newest.\nNewest($x, bool)                  ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)        ::: The convertible.\nVehicle(sedan, True)              ::: The sedan.\nVehicle(station_wagon, True)      ::: The station wagon.\nVehicle(bus, True)                ::: The bus.\nVehicle(limousine, True)          ::: The limousine.\nNewer(sedan, station_wagon, True) ::: The sedan is newer than the station wagon.\nNewest(limousine, True)           ::: The limousine is the newest.\nSecondNewest(bus, True)           ::: The bus is the second-newest.\nSecondOldest(convertible, True)   ::: The convertible is the second-oldest.\nRules:\nNewer($a, $b, True) >>> Older($b, $a, True) ::: If $a is newer than $b, then $b is older than $a.\nNewest($n, True) >>> Newer($n, $x, True) && Newer($n, $y, True) && Newer($n, $z, True) && Newer($n, $w, True) ::: The newest vehicle is newer than all others.\nSecondNewest($s, True) >>> Newer($s, $x, True) && Newer($s, $y, True) && Newer($s, $z, True) && Newer($n, $s, True) ::: The second-newest is newer than all except the newest.\nSecondOldest($s, True) >>> Older($s, $x, True) && Older($s, $y, True) && Older($s, $z, True) && Older($w, $s, True) ::: The second-oldest is older than all except the oldest.\nQuery:\nSecondOldest(convertible, True)  ::: Option A\nSecondOldest(sedan, True)        ::: Option B\nSecondOldest(station_wagon, True) ::: Option C\nSecondOldest(bus, True)          ::: Option D\nSecondOldest(limousine, True)    ::: Option E",
                "FOL": "Predicates:\nVehicle(x) ::: x is one of the five vehicles.\nNewer(x, y) ::: Vehicle x is newer than vehicle y.\nOldest(x) ::: Vehicle x is the oldest.\nSecondOldest(x) ::: Vehicle x is the second-oldest.\nSecondNewest(x) ::: Vehicle x is the second-newest.\nNewest(x) ::: Vehicle x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(sedan) ::: The sedan.\nVehicle(station_wagon) ::: The station wagon.\nVehicle(bus) ::: The bus.\nVehicle(limousine) ::: The limousine.\nNewer(sedan, station_wagon) ::: The sedan is newer than the station wagon.\nNewest(limousine) ::: The limousine is the newest.\nSecondNewest(bus) ::: The bus is the second-newest.\nSecondOldest(convertible) ::: The convertible is the second-oldest.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: \"Newer\" is asymmetric.\n\u2200x \u2200y \u2200z ((Newer(x, y) \u2227 Newer(y, z)) \u2192 Newer(x, z)) ::: \"Newer\" is transitive.\n\u2200x (Newest(x) \u2194 (\u2200y (x \u2260 y \u2192 Newer(x, y)))) ::: The newest is newer than all others.\n\u2200x (SecondNewest(x) \u2194 (\u2203y (Newest(y) \u2227 \u2200z (z \u2260 y \u2192 (z = x \u2228 Newer(y, z)))))) ::: The second-newest is newer than all except the newest.\n\u2200x (SecondOldest(x) \u2194 (\u2203y (Oldest(y) \u2227 \u2200z (z \u2260 y \u2192 (z = x \u2228 Older(y, z)))))) ::: The second-oldest is older than all except the oldest.\n\u2200x (Oldest(x) \u2194 (\u2200y (x \u2260 y \u2192 Older(x, y)))) ::: The oldest is older than all others.\nConclusion:\nSecondOldest(convertible) ::: Option A\nSecondOldest(sedan) ::: Option B\nSecondOldest(station_wagon) ::: Option C\nSecondOldest(bus) ::: Option D\nSecondOldest(limousine) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Sedan, StationWagon, Bus, Limousine])\nage = IntSort([1, 2, 3, 4, 5]) ::: 1 is oldest, 5 is newest\nvehicle_age = Function([Vehicle] -> [age])\n# Constraints\nDistinct([v:Vehicle], vehicle_age(v)) ::: Each vehicle has a unique age\nvehicle_age(Sedan) > vehicle_age(StationWagon) ::: The sedan is newer than the station wagon.\nvehicle_age(Limousine) == 5 ::: The limousine is the newest.\nvehicle_age(Bus) == 4 ::: The bus is the second-newest.\nvehicle_age(Convertible) == 2 ::: The convertible is the second-oldest.\n# Options\nis_valid(vehicle_age(Convertible) == 2) ::: A) The convertible is the second-oldest.\nis_valid(vehicle_age(Sedan) == 2) ::: B) The sedan is the second-oldest.\nis_valid(vehicle_age(StationWagon) == 2) ::: C) The station wagon is the second-oldest.\nis_valid(vehicle_age(Bus) == 2) ::: D) The bus is the second-oldest.\nis_valid(vehicle_age(Limousine) == 2) ::: E) The limousine is the second-oldest."
            }
        ]
    },
    {
        "id": "logical_deduction_6",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a crow, a robin, a quail, a blue jay, and a falcon. The robin is to the left of the quail. The falcon is the third from the left. The crow is to the left of the falcon. The blue jay is the leftmost.",
        "question": "Which of the following is true?",
        "options": [
            "A) The crow is the third from the left.",
            "B) The robin is the third from the left.",
            "C) The quail is the third from the left.",
            "D) The blue jay is the third from the left.",
            "E) The falcon is the third from the left."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nPosition($x, $n, bool)          ::: Bird $x is in position $n from the left (1-based index).\nFacts:\nBird(crow,    True)             ::: The crow.\nBird(robin,   True)             ::: The robin.\nBird(quail,   True)             ::: The quail.\nBird(blue_jay, True)            ::: The blue jay.\nBird(falcon,  True)             ::: The falcon.\nLeftOf(robin, quail, True)      ::: The robin is to the left of the quail.\nPosition(falcon, 3, True)       ::: The falcon is the third from the left.\nLeftOf(crow, falcon, True)      ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1, True)     ::: The blue jay is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nPosition($a, $n, True) >>> !Position($a, $m, True) for $m != $n ::: Each bird has a unique position.\nPosition($a, $n, True) >>> !Position($b, $n, True) for $b != $a ::: Each position is occupied by one bird.\nQuery:\nPosition(crow,    3, True)     ::: Option A\nPosition(robin,   3, True)     ::: Option B\nPosition(quail,   3, True)     ::: Option C\nPosition(blue_jay, 3, True)    ::: Option D\nPosition(falcon,  3, True)     ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nPosition(x, n) ::: Bird x is in position n from the left (1-based index).\nPremises:\nBird(crow) ::: The crow.\nBird(robin) ::: The robin.\nBird(quail) ::: The quail.\nBird(blue_jay) ::: The blue jay.\nBird(falcon) ::: The falcon.\nLeftOf(robin, quail) ::: The robin is to the left of the quail.\nPosition(falcon, 3) ::: The falcon is the third from the left.\nLeftOf(crow, falcon) ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1) ::: The blue jay is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each bird has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position is occupied by one bird.\nConclusion:\nPosition(crow, 3) ::: Option A\nPosition(robin, 3) ::: Option B\nPosition(quail, 3) ::: Option C\nPosition(blue_jay, 3) ::: Option D\nPosition(falcon, 3) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([crow, robin, quail, blue_jay, falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(robin) < pos(quail) ::: The robin is to the left of the quail.\npos(falcon) == 3 ::: The falcon is the third from the left.\npos(crow) < pos(falcon) ::: The crow is to the left of the falcon.\npos(blue_jay) == 1 ::: The blue jay is the leftmost.\n# Options\nis_valid(pos(crow) == 3) ::: A) The crow is the third from the left.\nis_valid(pos(robin) == 3) ::: B) The robin is the third from the left.\nis_valid(pos(quail) == 3) ::: C) The quail is the third from the left.\nis_valid(pos(blue_jay) == 3) ::: D) The blue jay is the third from the left.\nis_valid(pos(falcon) == 3) ::: E) The falcon is the third from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nPosition($x, $n, bool)          ::: Bird $x is in position $n from the left (1-based index).\nFacts:\nBird(crow,    True)             ::: The crow.\nBird(robin,   True)             ::: The robin.\nBird(quail,   True)             ::: The quail.\nBird(blue_jay, True)            ::: The blue jay.\nBird(falcon,  True)             ::: The falcon.\nLeftOf(robin, quail, True)      ::: The robin is to the left of the quail.\nPosition(falcon, 3, True)       ::: The falcon is the third from the left.\nLeftOf(crow, falcon, True)      ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1, True)     ::: The blue jay is the leftmost.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nLeftOf($a, $b, True) && LeftOf($b, $c, True) >>> LeftOf($a, $c, True) ::: Left-of is transitive.\nPosition($a, $n, True) >>> !Position($a, $m, True) for $m != $n ::: Each bird has a unique position.\nPosition($a, $n, True) >>> !Position($b, $n, True) for $b != $a ::: Each position is occupied by one bird.\nQuery:\nPosition(crow,    3, True)     ::: Option A\nPosition(robin,   3, True)     ::: Option B\nPosition(quail,   3, True)     ::: Option C\nPosition(blue_jay, 3, True)    ::: Option D\nPosition(falcon,  3, True)     ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nPosition(x, n) ::: Bird x is in position n from the left (1-based index).\nPremises:\nBird(crow) ::: The crow.\nBird(robin) ::: The robin.\nBird(quail) ::: The quail.\nBird(blue_jay) ::: The blue jay.\nBird(falcon) ::: The falcon.\nLeftOf(robin, quail) ::: The robin is to the left of the quail.\nPosition(falcon, 3) ::: The falcon is the third from the left.\nLeftOf(crow, falcon) ::: The crow is to the left of the falcon.\nPosition(blue_jay, 1) ::: The blue jay is the leftmost.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: Left-of is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: Left-of is transitive.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each bird has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position is occupied by one bird.\nConclusion:\nPosition(crow, 3) ::: Option A\nPosition(robin, 3) ::: Option B\nPosition(quail, 3) ::: Option C\nPosition(blue_jay, 3) ::: Option D\nPosition(falcon, 3) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([crow, robin, quail, blue_jay, falcon])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(robin) < pos(quail) ::: The robin is to the left of the quail.\npos(falcon) == 3 ::: The falcon is the third from the left.\npos(crow) < pos(falcon) ::: The crow is to the left of the falcon.\npos(blue_jay) == 1 ::: The blue jay is the leftmost.\n# Options\nis_valid(pos(crow) == 3) ::: A) The crow is the third from the left.\nis_valid(pos(robin) == 3) ::: B) The robin is the third from the left.\nis_valid(pos(quail) == 3) ::: C) The quail is the third from the left.\nis_valid(pos(blue_jay) == 3) ::: D) The blue jay is the third from the left.\nis_valid(pos(falcon) == 3) ::: E) The falcon is the third from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_7",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: a cardinal, a robin, a blue jay, a quail, and a raven. The robin is to the right of the raven. The cardinal is the leftmost. The raven is to the right of the blue jay. The blue jay is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The cardinal is the second from the left.",
            "B) The robin is the second from the left.",
            "C) The blue jay is the second from the left.",
            "D) The quail is the second from the left.",
            "E) The raven is the second from the left."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven,   True)   ::: The robin is to the right of the raven.\nLeftMost(cardinal, True)        ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nLeftOf(blue_jay, cardinal, False) && LeftOf(blue_jay, robin, False) && LeftOf(blue_jay, quail, False) && LeftOf(blue_jay, raven, False) >>> SecondFromLeft(blue_jay, True) ::: The blue jay is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, False) && LeftOf($s, robin, True) && LeftOf($s, blue_jay, True) && LeftOf($s, quail, True) && LeftOf($s, raven, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most\u2014and still left of the remaining three\u2014is second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(quail,    True)  ::: Option D\nSecondFromLeft(raven,    True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftMost(cardinal) ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\n\u00acLeftOf(blue_jay, cardinal) \u2227 \u00acLeftOf(blue_jay, robin) \u2227 \u00acLeftOf(blue_jay, quail) \u2227 \u00acLeftOf(blue_jay, raven) \u2192 SecondFromLeft(blue_jay) ::: The blue jay is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\nLeftMost(cardinal) \u2227 \u2200y (\u00acLeftOf(y, cardinal) \u2227 y \u2260 cardinal \u2192 (LeftOf(y, robin) \u2227 LeftOf(y, blue_jay) \u2227 LeftOf(y, quail) \u2227 LeftOf(y, raven))) \u2192 SecondFromLeft(y) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(quail) ::: Option D\nSecondFromLeft(raven) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Cardinal, Robin, BlueJay, Quail, Raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Raven) ::: The robin is to the right of the raven.\npos(Cardinal) == 1 ::: The cardinal is the leftmost.\npos(Raven) > pos(BlueJay) ::: The raven is to the right of the blue jay.\npos(BlueJay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(Quail) == 2) ::: D) The quail is the second from the left.\nis_valid(pos(Raven) == 2) ::: E) The raven is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nLeftMost($x, bool)              ::: Bird $x is the left-most bird on the branch.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(cardinal, True)            ::: The cardinal.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(quail,    True)            ::: The quail.\nBird(raven,    True)            ::: The raven.\nRightOf(robin, raven,   True)   ::: The robin is to the right of the raven.\nLeftMost(cardinal, True)        ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay, True)  ::: The raven is to the right of the blue jay.\nLeftOf(blue_jay, cardinal, False) && LeftOf(blue_jay, robin, False) && LeftOf(blue_jay, quail, False) && LeftOf(blue_jay, raven, False) >>> SecondFromLeft(blue_jay, True) ::: The blue jay is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nLeftMost($lm, True) && LeftOf($lm, $s, False) && LeftOf($s, robin, True) && LeftOf($s, blue_jay, True) && LeftOf($s, quail, True) && LeftOf($s, raven, True) >>> SecondFromLeft($s, True) ::: The bird immediately right of the left-most\u2014and still left of the remaining three\u2014is second from the left.\nQuery:\nSecondFromLeft(cardinal, True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(quail,    True)  ::: Option D\nSecondFromLeft(raven,    True)  ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nLeftMost(x) ::: Bird x is the left-most bird on the branch.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(cardinal) ::: The cardinal.\nBird(robin) ::: The robin.\nBird(blue_jay) ::: The blue jay.\nBird(quail) ::: The quail.\nBird(raven) ::: The raven.\nRightOf(robin, raven) ::: The robin is to the right of the raven.\nLeftMost(cardinal) ::: The cardinal is the leftmost.\nRightOf(raven, blue_jay) ::: The raven is to the right of the blue jay.\n\u00acLeftOf(blue_jay, cardinal) \u2227 \u00acLeftOf(blue_jay, robin) \u2227 \u00acLeftOf(blue_jay, quail) \u2227 \u00acLeftOf(blue_jay, raven) \u2192 SecondFromLeft(blue_jay) ::: The blue jay is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: Left-of and right-of are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z)) ::: Right-of is transitive.\nLeftMost(cardinal) \u2227 \u2200y (\u00acLeftOf(y, cardinal) \u2227 y \u2260 cardinal \u2192 (LeftOf(y, robin) \u2227 LeftOf(y, blue_jay) \u2227 LeftOf(y, quail) \u2227 LeftOf(y, raven))) \u2192 SecondFromLeft(y) ::: The bird immediately right of the left-most is second from the left.\nConclusion:\nSecondFromLeft(cardinal) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(quail) ::: Option D\nSecondFromLeft(raven) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Cardinal, Robin, BlueJay, Quail, Raven])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Robin) > pos(Raven) ::: The robin is to the right of the raven.\npos(Cardinal) == 1 ::: The cardinal is the leftmost.\npos(Raven) > pos(BlueJay) ::: The raven is to the right of the blue jay.\npos(BlueJay) == 3 ::: The blue jay is the third from the left.\n# Options\nis_valid(pos(Cardinal) == 2) ::: A) The cardinal is the second from the left.\nis_valid(pos(Robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(Quail) == 2) ::: D) The quail is the second from the left.\nis_valid(pos(Raven) == 2) ::: E) The raven is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_8",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a robin, a blue jay, a hawk, and a hummingbird. The owl is the second from the right. The robin is the second from the left. The robin is to the right of the blue jay. The hummingbird is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the rightmost.",
            "B) The robin is the rightmost.",
            "C) The blue jay is the rightmost.",
            "D) The hawk is the rightmost.",
            "E) The hummingbird is the rightmost."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right\u2011most bird on the branch.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(owl,      True)            ::: The owl.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk,     True)            ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($b, owl, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, hawk, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right\u2011most bird.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, owl, True) && RightOf($s, robin, True) && RightOf($s, blue_jay, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the right\u2011most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nRightMost(owl, True)            ::: Option A\nRightMost(robin, True)          ::: Option B\nRightMost(blue_jay, True)       ::: Option C\nRightMost(hawk, True)           ::: Option D\nRightMost(hummingbird, True)    ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(owl) \u2227 Bird(robin) \u2227 Bird(blue_jay) \u2227 Bird(hawk) \u2227 Bird(hummingbird) ::: The five birds.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z) ::: RightOf is transitive.\n\u2200x (RightMost(x) \u2194 (RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay) \u2227 RightOf(x, hawk))) ::: RightMost definition.\n\u2200x (SecondFromRight(x) \u2194 (RightMost(rm) \u2227 RightOf(rm, x) \u2227 RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay))) ::: SecondFromRight definition.\nConclusion:\nRightMost(owl) ::: Option A\nRightMost(robin) ::: Option B\nRightMost(blue_jay) ::: Option C\nRightMost(hawk) ::: Option D\nRightMost(hummingbird) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right.\npos(Robin) == 2 ::: The robin is the second from the left.\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay.\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(Owl) == 5) ::: A) The owl is the rightmost.\nis_valid(pos(Robin) == 5) ::: B) The robin is the rightmost.\nis_valid(pos(BlueJay) == 5) ::: C) The blue jay is the rightmost.\nis_valid(pos(Hawk) == 5) ::: D) The hawk is the rightmost.\nis_valid(pos(Hummingbird) == 5) ::: E) The hummingbird is the rightmost."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nRightMost($x, bool)             ::: Bird $x is the right\u2011most bird on the branch.\nSecondFromRight($x, bool)       ::: Bird $x is the second bird from the right.\nSecondFromLeft($x, bool)        ::: Bird $x is the second bird from the left.\nFacts:\nBird(owl,      True)            ::: The owl.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk,     True)            ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True)  ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right\u2011of is transitive.\nRightOf($b, owl, True) && RightOf($b, robin, True) && RightOf($b, blue_jay, True) && RightOf($b, hawk, True) >>> RightMost($b, True) ::: A bird that is to the right of all the other four is the right\u2011most bird.\nRightMost($rm, True) && RightOf($rm, $s, True) && RightOf($s, owl, True) && RightOf($s, robin, True) && RightOf($s, blue_jay, True) >>> SecondFromRight($s, True) ::: The bird immediately left of the right\u2011most\u2014and still right of the remaining three\u2014is second from the right.\nQuery:\nRightMost(owl, True)            ::: Option A\nRightMost(robin, True)          ::: Option B\nRightMost(blue_jay, True)       ::: Option C\nRightMost(hawk, True)           ::: Option D\nRightMost(hummingbird, True)    ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nRightOf(x, y) ::: Bird x is strictly to the right of bird y.\nRightMost(x) ::: Bird x is the right-most bird on the branch.\nSecondFromRight(x) ::: Bird x is the second bird from the right.\nSecondFromLeft(x) ::: Bird x is the second bird from the left.\nPremises:\nBird(owl) \u2227 Bird(robin) \u2227 Bird(blue_jay) \u2227 Bird(hawk) \u2227 Bird(hummingbird) ::: The five birds.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nRightOf(robin, blue_jay) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2194 RightOf(y, x)) ::: LeftOf and RightOf are inverses.\n\u2200x \u2200y \u2200z (RightOf(x, y) \u2227 RightOf(y, z) \u2192 RightOf(x, z) ::: RightOf is transitive.\n\u2200x (RightMost(x) \u2194 (RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay) \u2227 RightOf(x, hawk))) ::: RightMost definition.\n\u2200x (SecondFromRight(x) \u2194 (RightMost(rm) \u2227 RightOf(rm, x) \u2227 RightOf(x, owl) \u2227 RightOf(x, robin) \u2227 RightOf(x, blue_jay))) ::: SecondFromRight definition.\nConclusion:\nRightMost(owl) ::: Option A\nRightMost(robin) ::: Option B\nRightMost(blue_jay) ::: Option C\nRightMost(hawk) ::: Option D\nRightMost(hummingbird) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right.\npos(Robin) == 2 ::: The robin is the second from the left.\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay.\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(Owl) == 5) ::: A) The owl is the rightmost.\nis_valid(pos(Robin) == 5) ::: B) The robin is the rightmost.\nis_valid(pos(BlueJay) == 5) ::: C) The blue jay is the rightmost.\nis_valid(pos(Hawk) == 5) ::: D) The hawk is the rightmost.\nis_valid(pos(Hummingbird) == 5) ::: E) The hummingbird is the rightmost."
            }
        ]
    },
    {
        "id": "logical_deduction_9",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a shelf, there are five books: a brown book, an orange book, a red book, a purple book, and a black book. The purple book is to the left of the black book. The red book is to the right of the brown book. The orange book is the second from the left. The black book is the third from the left.",
        "question": "Which of the following is true?",
        "options": [
            "A) The brown book is the second from the right.",
            "B) The orange book is the second from the right.",
            "C) The red book is the second from the right.",
            "D) The purple book is the second from the right.",
            "E) The black book is the second from the right."
        ],
        "answer": "A",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nPosition($x, $n, bool)          ::: Book $x is in position $n (1-based, left to right).\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(brown,  True)              ::: The brown book.\nBook(orange, True)              ::: The orange book.\nBook(red,    True)              ::: The red book.\nBook(purple, True)              ::: The purple book.\nBook(black,  True)              ::: The black book.\nLeftOf(purple, black, True)     ::: The purple book is to the left of the black book.\nRightOf(red, brown, True)       ::: The red book is to the right of the brown book.\nPosition(orange, 2, True)       ::: The orange book is the second from the left.\nPosition(black, 3, True)        ::: The black book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($x, $n, True) >>> Position($y, $n+1, True) && LeftOf($x, $y, True) ::: Position implies ordering.\nPosition($x, 5, True) >>> SecondFromRight($y, True) && Position($y, 4, True) ::: The book in position 4 is second from the right when position 5 is rightmost.\nQuery:\nSecondFromRight(brown,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(red,    True)  ::: Option C\nSecondFromRight(purple, True)  ::: Option D\nSecondFromRight(black,  True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, n) ::: Book x is in position n (1-based, left to right).\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(brown) ::: The brown book.\nBook(orange) ::: The orange book.\nBook(red) ::: The red book.\nBook(purple) ::: The purple book.\nBook(black) ::: The black book.\nLeftOf(purple, black) ::: The purple book is to the left of the black book.\nLeftOf(brown, red) ::: The brown book is to the left of the red book.\nPosition(orange, 2) ::: The orange book is the second from the left.\nPosition(black, 3) ::: The black book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each book has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position has a unique book.\n\u2200x (Book(x) \u2192 (Position(x, 1) \u2228 Position(x, 2) \u2228 Position(x, 3) \u2228 Position(x, 4) \u2228 Position(x, 5))) ::: Each book has a position.\n\u2200x (SecondFromRight(x) \u2194 Position(x, 4)) ::: SecondFromRight is position 4 (since there are 5 books).\nConclusion:\nSecondFromRight(brown) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(red) ::: Option C\nSecondFromRight(purple) ::: Option D\nSecondFromRight(black) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nobjects = EnumSort([Brown, Orange, Red, Purple, Black])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) < pos(Black) ::: The purple book is to the left of the black book.\npos(Red) > pos(Brown) ::: The red book is to the right of the brown book.\npos(Orange) == 2 ::: The orange book is the second from the left.\npos(Black) == 3 ::: The black book is the third from the left.\n# Options\nis_valid(pos(Brown) == 4) ::: A) The brown book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Red) == 4) ::: C) The red book is the second from the right.\nis_valid(pos(Purple) == 4) ::: D) The purple book is the second from the right.\nis_valid(pos(Black) == 4) ::: E) The black book is the second from the right."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBook($x, bool)                  ::: $x is one of the five books.\nLeftOf($x, $y, bool)            ::: Book $x is strictly to the left of book $y.\nRightOf($x, $y, bool)           ::: Book $x is strictly to the right of book $y.\nPosition($x, $n, bool)          ::: Book $x is in position $n (1-based, left to right).\nSecondFromRight($x, bool)       ::: Book $x is the second book from the right.\nFacts:\nBook(brown,  True)              ::: The brown book.\nBook(orange, True)              ::: The orange book.\nBook(red,    True)              ::: The red book.\nBook(purple, True)              ::: The purple book.\nBook(black,  True)              ::: The black book.\nLeftOf(purple, black, True)     ::: The purple book is to the left of the black book.\nRightOf(red, brown, True)       ::: The red book is to the right of the brown book.\nPosition(orange, 2, True)       ::: The orange book is the second from the left.\nPosition(black, 3, True)        ::: The black book is the third from the left.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nPosition($x, $n, True) >>> Position($y, $n+1, True) && LeftOf($x, $y, True) ::: Position implies ordering.\nPosition($x, 5, True) >>> SecondFromRight($y, True) && Position($y, 4, True) ::: The book in position 4 is second from the right when position 5 is rightmost.\nQuery:\nSecondFromRight(brown,  True)  ::: Option A\nSecondFromRight(orange, True)  ::: Option B\nSecondFromRight(red,    True)  ::: Option C\nSecondFromRight(purple, True)  ::: Option D\nSecondFromRight(black,  True)  ::: Option E",
                "FOL": "Predicates:\nBook(x) ::: x is one of the five books.\nLeftOf(x, y) ::: Book x is strictly to the left of book y.\nPosition(x, n) ::: Book x is in position n (1-based, left to right).\nSecondFromRight(x) ::: Book x is the second book from the right.\nPremises:\nBook(brown) ::: The brown book.\nBook(orange) ::: The orange book.\nBook(red) ::: The red book.\nBook(purple) ::: The purple book.\nBook(black) ::: The black book.\nLeftOf(purple, black) ::: The purple book is to the left of the black book.\nLeftOf(brown, red) ::: The brown book is to the left of the red book.\nPosition(orange, 2) ::: The orange book is the second from the left.\nPosition(black, 3) ::: The black book is the third from the left.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x \u2200n \u2200m (Position(x, n) \u2227 Position(x, m) \u2192 n = m) ::: Each book has a unique position.\n\u2200n \u2200x \u2200y (Position(x, n) \u2227 Position(y, n) \u2192 x = y) ::: Each position has a unique book.\n\u2200x (Book(x) \u2192 (Position(x, 1) \u2228 Position(x, 2) \u2228 Position(x, 3) \u2228 Position(x, 4) \u2228 Position(x, 5))) ::: Each book has a position.\n\u2200x (SecondFromRight(x) \u2194 Position(x, 4)) ::: SecondFromRight is position 4 (since there are 5 books).\nConclusion:\nSecondFromRight(brown) ::: Option A\nSecondFromRight(orange) ::: Option B\nSecondFromRight(red) ::: Option C\nSecondFromRight(purple) ::: Option D\nSecondFromRight(black) ::: Option E",
                "SAT": "# Declarations\nobjects = EnumSort([Brown, Orange, Red, Purple, Black])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([objects] -> [positions])\n# Constraints\nDistinct([b:objects], pos(b)) ::: Each book occupies a unique position\npos(Purple) < pos(Black) ::: The purple book is to the left of the black book.\npos(Red) > pos(Brown) ::: The red book is to the right of the brown book.\npos(Orange) == 2 ::: The orange book is the second from the left.\npos(Black) == 3 ::: The black book is the third from the left.\n# Options\nis_valid(pos(Brown) == 4) ::: A) The brown book is the second from the right.\nis_valid(pos(Orange) == 4) ::: B) The orange book is the second from the right.\nis_valid(pos(Red) == 4) ::: C) The red book is the second from the right.\nis_valid(pos(Purple) == 4) ::: D) The purple book is the second from the right.\nis_valid(pos(Black) == 4) ::: E) The black book is the second from the right."
            }
        ]
    },
    {
        "id": "logical_deduction_10",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nOn a branch, there are five birds: an owl, a robin, a blue jay, a hawk, and a hummingbird. The owl is the second from the right. The robin is the second from the left. The robin is to the right of the blue jay. The hummingbird is to the right of the hawk.",
        "question": "Which of the following is true?",
        "options": [
            "A) The owl is the second from the left.",
            "B) The robin is the second from the left.",
            "C) The blue jay is the second from the left.",
            "D) The hawk is the second from the left.",
            "E) The hummingbird is the second from the left."
        ],
        "answer": "B",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromLeft($x, bool)        ::: Bird $x is the second from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second from the right.\nFacts:\nBird(owl,      True)            ::: The owl.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk,     True)            ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($x, True) >>> LeftOf($x, $y, True) && LeftOf($z, $x, True) ::: $x is second from left if it has one bird to its left and three to its right (assuming five birds total).\nQuery:\nSecondFromLeft(owl,      True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(hawk,     True)  ::: Option D\nSecondFromLeft(hummingbird, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nSecondFromLeft(x) ::: Bird x is the second from the left.\nSecondFromRight(x) ::: Bird x is the second from the right.\nPremises:\nBird(owl) \u2227 Bird(robin) \u2227 Bird(blue_jay) \u2227 Bird(hawk) \u2227 Bird(hummingbird) ::: The five birds.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nLeftOf(blue_jay, robin) ::: The robin is to the right of the blue jay.\nLeftOf(hawk, hummingbird) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x (SecondFromLeft(x) \u2194 (\u2203y LeftOf(y, x) \u2227 \u2200z (z \u2260 y \u2192 (LeftOf(z, x) \u2194 z = y)))) ::: x is second from left if exactly one bird is to its left.\n\u2200x (SecondFromRight(x) \u2194 (\u2203y LeftOf(x, y) \u2227 \u2200z (z \u2260 y \u2192 (LeftOf(x, z) \u2194 z = y)))) ::: x is second from right if exactly one bird is to its right.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(hawk) ::: Option D\nSecondFromLeft(hummingbird) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right.\npos(Robin) == 2 ::: The robin is the second from the left.\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay.\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(Owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(Robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(Hawk) == 2) ::: D) The hawk is the second from the left.\nis_valid(pos(Hummingbird) == 2) ::: E) The hummingbird is the second from the left."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nBird($x, bool)                  ::: $x is one of the five birds.\nLeftOf($x, $y, bool)            ::: Bird $x is strictly to the left of bird $y.\nRightOf($x, $y, bool)           ::: Bird $x is strictly to the right of bird $y.\nSecondFromLeft($x, bool)        ::: Bird $x is the second from the left.\nSecondFromRight($x, bool)       ::: Bird $x is the second from the right.\nFacts:\nBird(owl,      True)            ::: The owl.\nBird(robin,    True)            ::: The robin.\nBird(blue_jay, True)            ::: The blue jay.\nBird(hawk,     True)            ::: The hawk.\nBird(hummingbird, True)         ::: The hummingbird.\nSecondFromRight(owl, True)      ::: The owl is the second from the right.\nSecondFromLeft(robin, True)     ::: The robin is the second from the left.\nRightOf(robin, blue_jay, True) ::: The robin is to the right of the blue jay.\nRightOf(hummingbird, hawk, True) ::: The hummingbird is to the right of the hawk.\nRules:\nLeftOf($a, $b, True) >>> RightOf($b, $a, True) ::: If $a is left of $b, then $b is right of $a.\nRightOf($a, $b, True) >>> LeftOf($b, $a, True) ::: If $a is right of $b, then $b is left of $a.\nRightOf($a, $b, True) && RightOf($b, $c, True) >>> RightOf($a, $c, True) ::: Right-of is transitive.\nSecondFromLeft($x, True) >>> LeftOf($x, $y, True) && LeftOf($z, $x, True) ::: $x is second from left if it has one bird to its left and three to its right (assuming five birds total).\nQuery:\nSecondFromLeft(owl,      True)  ::: Option A\nSecondFromLeft(robin,    True)  ::: Option B\nSecondFromLeft(blue_jay, True)  ::: Option C\nSecondFromLeft(hawk,     True)  ::: Option D\nSecondFromLeft(hummingbird, True) ::: Option E",
                "FOL": "Predicates:\nBird(x) ::: x is one of the five birds.\nLeftOf(x, y) ::: Bird x is strictly to the left of bird y.\nSecondFromLeft(x) ::: Bird x is the second from the left.\nSecondFromRight(x) ::: Bird x is the second from the right.\nPremises:\nBird(owl) \u2227 Bird(robin) \u2227 Bird(blue_jay) \u2227 Bird(hawk) \u2227 Bird(hummingbird) ::: The five birds.\nSecondFromRight(owl) ::: The owl is the second from the right.\nSecondFromLeft(robin) ::: The robin is the second from the left.\nLeftOf(blue_jay, robin) ::: The robin is to the right of the blue jay.\nLeftOf(hawk, hummingbird) ::: The hummingbird is to the right of the hawk.\n\u2200x \u2200y (LeftOf(x, y) \u2192 \u00acLeftOf(y, x)) ::: LeftOf is asymmetric.\n\u2200x \u2200y \u2200z (LeftOf(x, y) \u2227 LeftOf(y, z) \u2192 LeftOf(x, z)) ::: LeftOf is transitive.\n\u2200x (SecondFromLeft(x) \u2194 (\u2203y LeftOf(y, x) \u2227 \u2200z (z \u2260 y \u2192 (LeftOf(z, x) \u2194 z = y)))) ::: x is second from left if exactly one bird is to its left.\n\u2200x (SecondFromRight(x) \u2194 (\u2203y LeftOf(x, y) \u2227 \u2200z (z \u2260 y \u2192 (LeftOf(x, z) \u2194 z = y)))) ::: x is second from right if exactly one bird is to its right.\nConclusion:\nSecondFromLeft(owl) ::: Option A\nSecondFromLeft(robin) ::: Option B\nSecondFromLeft(blue_jay) ::: Option C\nSecondFromLeft(hawk) ::: Option D\nSecondFromLeft(hummingbird) ::: Option E",
                "SAT": "# Declarations\nbirds = EnumSort([Owl, Robin, BlueJay, Hawk, Hummingbird])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([birds] -> [positions])\n# Constraints\nDistinct([b:birds], pos(b)) ::: Each bird occupies a unique position\npos(Owl) == 4 ::: The owl is the second from the right.\npos(Robin) == 2 ::: The robin is the second from the left.\npos(Robin) > pos(BlueJay) ::: The robin is to the right of the blue jay.\npos(Hummingbird) > pos(Hawk) ::: The hummingbird is to the right of the hawk.\n# Options\nis_valid(pos(Owl) == 2) ::: A) The owl is the second from the left.\nis_valid(pos(Robin) == 2) ::: B) The robin is the second from the left.\nis_valid(pos(BlueJay) == 2) ::: C) The blue jay is the second from the left.\nis_valid(pos(Hawk) == 2) ::: D) The hawk is the second from the left.\nis_valid(pos(Hummingbird) == 2) ::: E) The hummingbird is the second from the left."
            }
        ]
    },
    {
        "id": "logical_deduction_11",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn an antique car show, there are five vehicles: a convertible, a truck, a bus, a sedan, and a motorcyle. The bus is newer than the truck. The truck is newer than the convertible. The sedan is the second-oldest. The motorcyle is newer than the bus.",
        "question": "Which of the following is true?",
        "options": [
            "A) The convertible is the newest.",
            "B) The truck is the newest.",
            "C) The bus is the newest.",
            "D) The sedan is the newest.",
            "E) The motorcyle is the newest."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(truck, True)               ::: The truck.\nVehicle(bus, True)                 ::: The bus.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(motorcyle, True)           ::: The motorcyle.\nNewer(bus, truck, True)            ::: The bus is newer than the truck.\nNewer(truck, convertible, True)    ::: The truck is newer than the convertible.\nOldest(sedan, False)               ::: The sedan is not the oldest (since it is the second-oldest).\nNewer(motorcyle, bus, True)        ::: The motorcyle is newer than the bus.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOldest($x, True) >>> !Newer($x, $y, True) for all $y ::: The oldest vehicle is not newer than any other vehicle.\nNewest($x, True) >>> !Newer($y, $x, True) for all $y ::: The newest vehicle is not older than any other vehicle.\nQuery:\nNewest(convertible, True)          ::: Option A\nNewest(truck, True)                ::: Option B\nNewest(bus, True)                  ::: Option C\nNewest(sedan, True)                ::: Option D\nNewest(motorcyle, True)            ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nVehicle($x) ::: $x is one of the five vehicles.\nNewer($x, $y) ::: Vehicle $x is newer than vehicle $y.\nOldest($x) ::: Vehicle $x is the oldest.\nNewest($x) ::: Vehicle $x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(truck) ::: The truck.\nVehicle(bus) ::: The bus.\nVehicle(sedan) ::: The sedan.\nVehicle(motorcyle) ::: The motorcyle.\nNewer(bus, truck) ::: The bus is newer than the truck.\nNewer(truck, convertible) ::: The truck is newer than the convertible.\n\u00acOldest(sedan) ::: The sedan is not the oldest (since it is the second-oldest).\nNewer(motorcyle, bus) ::: The motorcyle is newer than the bus.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: Newer is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Oldest(x) \u2192 \u2200y (x \u2260 y \u2192 \u00acNewer(x, y))) ::: The oldest is not newer than any other.\n\u2200x (Newest(x) \u2192 \u2200y (x \u2260 y \u2192 \u00acNewer(y, x))) ::: The newest is not older than any other.\nConclusion:\nNewest(convertible) ::: Option A\nNewest(truck) ::: Option B\nNewest(bus) ::: Option C\nNewest(sedan) ::: Option D\nNewest(motorcyle) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nVehicle = EnumSort([Convertible, Truck, Bus, Sedan, Motorcycle])\nage = IntSort([1, 2, 3, 4, 5])\nvehicle_age = Function([Vehicle] -> [age])\n# Constraints\nDistinct([v:Vehicle], vehicle_age(v)) ::: Each vehicle has a unique age\nvehicle_age(Bus) > vehicle_age(Truck) ::: The bus is newer than the truck.\nvehicle_age(Truck) > vehicle_age(Convertible) ::: The truck is newer than the convertible.\nvehicle_age(Sedan) == 4 ::: The sedan is the second-oldest (age 4 out of 5).\nvehicle_age(Motorcycle) > vehicle_age(Bus) ::: The motorcycle is newer than the bus.\n# Options\nis_valid(vehicle_age(Convertible) == 1) ::: A) The convertible is the newest.\nis_valid(vehicle_age(Truck) == 1) ::: B) The truck is the newest.\nis_valid(vehicle_age(Bus) == 1) ::: C) The bus is the newest.\nis_valid(vehicle_age(Sedan) == 1) ::: D) The sedan is the newest.\nis_valid(vehicle_age(Motorcycle) == 1) ::: E) The motorcycle is the newest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nVehicle($x, bool)                  ::: $x is one of the five vehicles.\nNewer($x, $y, bool)                ::: Vehicle $x is newer than vehicle $y.\nOldest($x, bool)                   ::: Vehicle $x is the oldest.\nNewest($x, bool)                   ::: Vehicle $x is the newest.\nFacts:\nVehicle(convertible, True)         ::: The convertible.\nVehicle(truck, True)               ::: The truck.\nVehicle(bus, True)                 ::: The bus.\nVehicle(sedan, True)               ::: The sedan.\nVehicle(motorcyle, True)           ::: The motorcyle.\nNewer(bus, truck, True)            ::: The bus is newer than the truck.\nNewer(truck, convertible, True)    ::: The truck is newer than the convertible.\nOldest(sedan, False)               ::: The sedan is not the oldest (since it is the second-oldest).\nNewer(motorcyle, bus, True)        ::: The motorcyle is newer than the bus.\nRules:\nNewer($a, $b, True) >>> Newer($b, $a, False) ::: If $a is newer than $b, then $b is not newer than $a.\nNewer($a, $b, True) && Newer($b, $c, True) >>> Newer($a, $c, True) ::: Newer is transitive.\nOldest($x, True) >>> !Newer($x, $y, True) for all $y ::: The oldest vehicle is not newer than any other vehicle.\nNewest($x, True) >>> !Newer($y, $x, True) for all $y ::: The newest vehicle is not older than any other vehicle.\nQuery:\nNewest(convertible, True)          ::: Option A\nNewest(truck, True)                ::: Option B\nNewest(bus, True)                  ::: Option C\nNewest(sedan, True)                ::: Option D\nNewest(motorcyle, True)            ::: Option E",
                "FOL": "Predicates:\nVehicle($x) ::: $x is one of the five vehicles.\nNewer($x, $y) ::: Vehicle $x is newer than vehicle $y.\nOldest($x) ::: Vehicle $x is the oldest.\nNewest($x) ::: Vehicle $x is the newest.\nPremises:\nVehicle(convertible) ::: The convertible.\nVehicle(truck) ::: The truck.\nVehicle(bus) ::: The bus.\nVehicle(sedan) ::: The sedan.\nVehicle(motorcyle) ::: The motorcyle.\nNewer(bus, truck) ::: The bus is newer than the truck.\nNewer(truck, convertible) ::: The truck is newer than the convertible.\n\u00acOldest(sedan) ::: The sedan is not the oldest (since it is the second-oldest).\nNewer(motorcyle, bus) ::: The motorcyle is newer than the bus.\n\u2200x \u2200y (Newer(x, y) \u2192 \u00acNewer(y, x)) ::: Newer is asymmetric.\n\u2200x \u2200y \u2200z (Newer(x, y) \u2227 Newer(y, z) \u2192 Newer(x, z)) ::: Newer is transitive.\n\u2200x (Oldest(x) \u2192 \u2200y (x \u2260 y \u2192 \u00acNewer(x, y))) ::: The oldest is not newer than any other.\n\u2200x (Newest(x) \u2192 \u2200y (x \u2260 y \u2192 \u00acNewer(y, x))) ::: The newest is not older than any other.\nConclusion:\nNewest(convertible) ::: Option A\nNewest(truck) ::: Option B\nNewest(bus) ::: Option C\nNewest(sedan) ::: Option D\nNewest(motorcyle) ::: Option E",
                "SAT": "# Declarations\nVehicle = EnumSort([Convertible, Truck, Bus, Sedan, Motorcycle])\nage = IntSort([1, 2, 3, 4, 5])\nvehicle_age = Function([Vehicle] -> [age])\n# Constraints\nDistinct([v:Vehicle], vehicle_age(v)) ::: Each vehicle has a unique age\nvehicle_age(Bus) > vehicle_age(Truck) ::: The bus is newer than the truck.\nvehicle_age(Truck) > vehicle_age(Convertible) ::: The truck is newer than the convertible.\nvehicle_age(Sedan) == 4 ::: The sedan is the second-oldest (age 4 out of 5).\nvehicle_age(Motorcycle) > vehicle_age(Bus) ::: The motorcycle is newer than the bus.\n# Options\nis_valid(vehicle_age(Convertible) == 1) ::: A) The convertible is the newest.\nis_valid(vehicle_age(Truck) == 1) ::: B) The truck is the newest.\nis_valid(vehicle_age(Bus) == 1) ::: C) The bus is the newest.\nis_valid(vehicle_age(Sedan) == 1) ::: D) The sedan is the newest.\nis_valid(vehicle_age(Motorcycle) == 1) ::: E) The motorcycle is the newest."
            }
        ]
    },
    {
        "id": "logical_deduction_12",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nIn a golf tournament, there were five golfers: Eve, Rob, Ana, Eli, and Mya. Eli finished below Mya. Eve finished first. Ana finished below Eli. Rob finished second.",
        "question": "Which of the following is true?",
        "options": [
            "A) Eve finished third.",
            "B) Rob finished third.",
            "C) Ana finished third.",
            "D) Eli finished third.",
            "E) Mya finished third."
        ],
        "answer": "E",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nGolfer($x, bool)               ::: $x is one of the five golfers.\nFinishedBelow($x, $y, bool)     ::: Golfer $x finished below golfer $y.\nFinishedAbove($x, $y, bool)     ::: Golfer $x finished above golfer $y.\nFinishedAt($x, $n, bool)        ::: Golfer $x finished at position $n (1st, 2nd, etc.).\nFacts:\nGolfer(Eve, True)              ::: Eve is one of the golfers.\nGolfer(Rob, True)              ::: Rob is one of the golfers.\nGolfer(Ana, True)              ::: Ana is one of the golfers.\nGolfer(Eli, True)              ::: Eli is one of the golfers.\nGolfer(Mya, True)              ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya, True)  ::: Eli finished below Mya.\nFinishedAt(Eve, 1, True)       ::: Eve finished first.\nFinishedBelow(Ana, Eli, True)  ::: Ana finished below Eli.\nFinishedAt(Rob, 2, True)       ::: Rob finished second.\nRules:\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedBelow($a, $b, True) && FinishedBelow($b, $c, True) >>> FinishedBelow($a, $c, True) ::: FinishedBelow is transitive.\nFinishedAt($a, $n, True) && FinishedAt($b, $m, True) && $n < $m >>> FinishedAbove($a, $b, True) ::: If $a finished at a higher position than $b, then $a finished above $b.\nFinishedAt($a, $n, True) && FinishedAt($b, $m, True) && $n > $m >>> FinishedBelow($a, $b, True) ::: If $a finished at a lower position than $b, then $a finished below $b.\nQuery:\nFinishedAt(Eve, 3, True)      ::: Option A\nFinishedAt(Rob, 3, True)      ::: Option B\nFinishedAt(Ana, 3, True)      ::: Option C\nFinishedAt(Eli, 3, True)      ::: Option D\nFinishedAt(Mya, 3, True)      ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedAt(x, n) ::: Golfer x finished at position n (1st, 2nd, etc.).\nPremises:\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya) ::: Eli finished below Mya.\nFinishedAt(Eve, 1) ::: Eve finished first.\nFinishedBelow(Ana, Eli) ::: Ana finished below Eli.\nFinishedAt(Rob, 2) ::: Rob finished second.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 \u00acFinishedBelow(y, x)) ::: \"FinishedBelow\" is asymmetric.\n\u2200x \u2200y \u2200z (FinishedBelow(x, y) \u2227 FinishedBelow(y, z) \u2192 FinishedBelow(x, z)) ::: \"FinishedBelow\" is transitive.\n\u2200x \u2200y (FinishedAt(x, n) \u2227 FinishedAt(y, m) \u2227 n < m \u2192 FinishedBelow(y, x)) ::: Higher position means finished above.\n\u2200x \u2200n \u2200m (FinishedAt(x, n) \u2227 FinishedAt(x, m) \u2192 n = m) ::: Each golfer has one unique position.\n\u2200n \u2203x (FinishedAt(x, n)) ::: Each position is occupied by some golfer.\nConclusion:\nFinishedAt(Eve, 3) ::: Option A\nFinishedAt(Rob, 3) ::: Option B\nFinishedAt(Ana, 3) ::: Option C\nFinishedAt(Eli, 3) ::: Option D\nFinishedAt(Mya, 3) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nGolfers = EnumSort([Eve, Rob, Ana, Eli, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Eli) > pos(Mya) ::: Eli finished below Mya.\npos(Eve) == 1 ::: Eve finished first.\npos(Ana) > pos(Eli) ::: Ana finished below Eli.\npos(Rob) == 2 ::: Rob finished second.\n# Options\nis_valid(pos(Eve) == 3) ::: A) Eve finished third.\nis_valid(pos(Rob) == 3) ::: B) Rob finished third.\nis_valid(pos(Ana) == 3) ::: C) Ana finished third.\nis_valid(pos(Eli) == 3) ::: D) Eli finished third.\nis_valid(pos(Mya) == 3) ::: E) Mya finished third."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nGolfer($x, bool)               ::: $x is one of the five golfers.\nFinishedBelow($x, $y, bool)     ::: Golfer $x finished below golfer $y.\nFinishedAbove($x, $y, bool)     ::: Golfer $x finished above golfer $y.\nFinishedAt($x, $n, bool)        ::: Golfer $x finished at position $n (1st, 2nd, etc.).\nFacts:\nGolfer(Eve, True)              ::: Eve is one of the golfers.\nGolfer(Rob, True)              ::: Rob is one of the golfers.\nGolfer(Ana, True)              ::: Ana is one of the golfers.\nGolfer(Eli, True)              ::: Eli is one of the golfers.\nGolfer(Mya, True)              ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya, True)  ::: Eli finished below Mya.\nFinishedAt(Eve, 1, True)       ::: Eve finished first.\nFinishedBelow(Ana, Eli, True)  ::: Ana finished below Eli.\nFinishedAt(Rob, 2, True)       ::: Rob finished second.\nRules:\nFinishedBelow($a, $b, True) >>> FinishedAbove($b, $a, True) ::: If $a finished below $b, then $b finished above $a.\nFinishedAbove($a, $b, True) >>> FinishedBelow($b, $a, True) ::: If $a finished above $b, then $b finished below $a.\nFinishedBelow($a, $b, True) && FinishedBelow($b, $c, True) >>> FinishedBelow($a, $c, True) ::: FinishedBelow is transitive.\nFinishedAt($a, $n, True) && FinishedAt($b, $m, True) && $n < $m >>> FinishedAbove($a, $b, True) ::: If $a finished at a higher position than $b, then $a finished above $b.\nFinishedAt($a, $n, True) && FinishedAt($b, $m, True) && $n > $m >>> FinishedBelow($a, $b, True) ::: If $a finished at a lower position than $b, then $a finished below $b.\nQuery:\nFinishedAt(Eve, 3, True)      ::: Option A\nFinishedAt(Rob, 3, True)      ::: Option B\nFinishedAt(Ana, 3, True)      ::: Option C\nFinishedAt(Eli, 3, True)      ::: Option D\nFinishedAt(Mya, 3, True)      ::: Option E",
                "FOL": "Predicates:\nGolfer(x) ::: x is one of the five golfers.\nFinishedBelow(x, y) ::: Golfer x finished below golfer y.\nFinishedAt(x, n) ::: Golfer x finished at position n (1st, 2nd, etc.).\nPremises:\nGolfer(Eve) ::: Eve is one of the golfers.\nGolfer(Rob) ::: Rob is one of the golfers.\nGolfer(Ana) ::: Ana is one of the golfers.\nGolfer(Eli) ::: Eli is one of the golfers.\nGolfer(Mya) ::: Mya is one of the golfers.\nFinishedBelow(Eli, Mya) ::: Eli finished below Mya.\nFinishedAt(Eve, 1) ::: Eve finished first.\nFinishedBelow(Ana, Eli) ::: Ana finished below Eli.\nFinishedAt(Rob, 2) ::: Rob finished second.\n\u2200x \u2200y (FinishedBelow(x, y) \u2192 \u00acFinishedBelow(y, x)) ::: \"FinishedBelow\" is asymmetric.\n\u2200x \u2200y \u2200z (FinishedBelow(x, y) \u2227 FinishedBelow(y, z) \u2192 FinishedBelow(x, z)) ::: \"FinishedBelow\" is transitive.\n\u2200x \u2200y (FinishedAt(x, n) \u2227 FinishedAt(y, m) \u2227 n < m \u2192 FinishedBelow(y, x)) ::: Higher position means finished above.\n\u2200x \u2200n \u2200m (FinishedAt(x, n) \u2227 FinishedAt(x, m) \u2192 n = m) ::: Each golfer has one unique position.\n\u2200n \u2203x (FinishedAt(x, n)) ::: Each position is occupied by some golfer.\nConclusion:\nFinishedAt(Eve, 3) ::: Option A\nFinishedAt(Rob, 3) ::: Option B\nFinishedAt(Ana, 3) ::: Option C\nFinishedAt(Eli, 3) ::: Option D\nFinishedAt(Mya, 3) ::: Option E",
                "SAT": "# Declarations\nGolfers = EnumSort([Eve, Rob, Ana, Eli, Mya])\npositions = IntSort([1, 2, 3, 4, 5])\npos = Function([Golfers] -> [positions])\n# Constraints\nDistinct([g:Golfers], pos(g)) ::: Each golfer has a unique position\npos(Eli) > pos(Mya) ::: Eli finished below Mya.\npos(Eve) == 1 ::: Eve finished first.\npos(Ana) > pos(Eli) ::: Ana finished below Eli.\npos(Rob) == 2 ::: Rob finished second.\n# Options\nis_valid(pos(Eve) == 3) ::: A) Eve finished third.\nis_valid(pos(Rob) == 3) ::: B) Rob finished third.\nis_valid(pos(Ana) == 3) ::: C) Ana finished third.\nis_valid(pos(Eli) == 3) ::: D) Eli finished third.\nis_valid(pos(Mya) == 3) ::: E) Mya finished third."
            }
        ]
    },
    {
        "id": "logical_deduction_13",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: apples, mangoes, oranges, plums, and pears. The oranges are more expensive than the mangoes. The plums are the cheapest. The apples are less expensive than the mangoes. The pears are more expensive than the oranges.",
        "question": "Which of the following is true?",
        "options": [
            "A) The apples are the cheapest.",
            "B) The mangoes are the cheapest.",
            "C) The oranges are the cheapest.",
            "D) The plums are the cheapest.",
            "E) The pears are the cheapest."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(apples,  True)             ::: The apples.\nFruit(mangoes, True)             ::: The mangoes.\nFruit(oranges, True)             ::: The oranges.\nFruit(plums,   True)             ::: The plums.\nFruit(pears,   True)             ::: The pears.\nMoreExpensive(oranges, mangoes, True) ::: The oranges are more expensive than the mangoes.\nCheapest(plums, True)            ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples, True) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges, True) ::: The pears are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($a, $c, True) && MoreExpensive($b, $c, True) ::: If $a is more expensive than $b, and $b is more expensive than $c, then $a is more expensive than $c.\nCheapest($x, True) >>> !MoreExpensive($x, $y, True) ::: If $x is the cheapest, then $x is not more expensive than any other fruit.\nQuery:\nCheapest(apples,  True)  ::: Option A\nCheapest(mangoes, True)  ::: Option B\nCheapest(oranges, True)  ::: Option C\nCheapest(plums,   True)  ::: Option D\nCheapest(pears,   True)  ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(apples) ::: The apples.\nFruit(mangoes) ::: The mangoes.\nFruit(oranges) ::: The oranges.\nFruit(plums) ::: The plums.\nFruit(pears) ::: The pears.\nMoreExpensive(oranges, mangoes) ::: The oranges are more expensive than the mangoes.\nCheapest(plums) ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges) ::: The pears are more expensive than the oranges.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: Transitivity of MoreExpensive.\n\u2200x (Cheapest(x) \u2192 \u2200y (x \u2260 y \u2192 \u00acMoreExpensive(x, y))) ::: If x is the cheapest, then x is not more expensive than any other fruit.\nConclusion:\nCheapest(apples) ::: Option A\nCheapest(mangoes) ::: Option B\nCheapest(oranges) ::: Option C\nCheapest(plums) ::: Option D\nCheapest(pears) ::: Option E"
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nFruit = EnumSort([Apples, Mangoes, Oranges, Plums, Pears])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nForAll([x:Fruit, y:Fruit], Implies(And(x != y, price(x) > price(y)), Not(Cheapest(x)))) ::: If x is more expensive than y, x cannot be cheapest\nprice(Oranges) > price(Mangoes) ::: The oranges are more expensive than the mangoes.\nprice(Plums) == 0 ::: The plums are the cheapest (assigned lowest price).\nprice(Apples) < price(Mangoes) ::: The apples are less expensive than the mangoes.\nprice(Pears) > price(Oranges) ::: The pears are more expensive than the oranges.\nForAll([x:Fruit], Implies(Cheapest(x), ForAll([y:Fruit], Implies(x != y, price(x) < price(y))))) ::: Cheapest fruit has strictly lowest price\n# Options\nis_valid(price(Apples) == 0) ::: A) The apples are the cheapest.\nis_valid(price(Mangoes) == 0) ::: B) The mangoes are the cheapest.\nis_valid(price(Oranges) == 0) ::: C) The oranges are the cheapest.\nis_valid(price(Plums) == 0) ::: D) The plums are the cheapest.\nis_valid(price(Pears) == 0) ::: E) The pears are the cheapest."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nMoreExpensive($x, $y, bool)      ::: Fruit $x is more expensive than fruit $y.\nCheapest($x, bool)               ::: Fruit $x is the cheapest among the five fruits.\nFacts:\nFruit(apples,  True)             ::: The apples.\nFruit(mangoes, True)             ::: The mangoes.\nFruit(oranges, True)             ::: The oranges.\nFruit(plums,   True)             ::: The plums.\nFruit(pears,   True)             ::: The pears.\nMoreExpensive(oranges, mangoes, True) ::: The oranges are more expensive than the mangoes.\nCheapest(plums, True)            ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples, True) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges, True) ::: The pears are more expensive than the oranges.\nRules:\nMoreExpensive($a, $b, True) >>> MoreExpensive($a, $c, True) && MoreExpensive($b, $c, True) ::: If $a is more expensive than $b, and $b is more expensive than $c, then $a is more expensive than $c.\nCheapest($x, True) >>> !MoreExpensive($x, $y, True) ::: If $x is the cheapest, then $x is not more expensive than any other fruit.\nQuery:\nCheapest(apples,  True)  ::: Option A\nCheapest(mangoes, True)  ::: Option B\nCheapest(oranges, True)  ::: Option C\nCheapest(plums,   True)  ::: Option D\nCheapest(pears,   True)  ::: Option E",
                "FOL": "Predicates:\nFruit(x) ::: x is one of the five fruits.\nMoreExpensive(x, y) ::: Fruit x is more expensive than fruit y.\nCheapest(x) ::: Fruit x is the cheapest among the five fruits.\nPremises:\nFruit(apples) ::: The apples.\nFruit(mangoes) ::: The mangoes.\nFruit(oranges) ::: The oranges.\nFruit(plums) ::: The plums.\nFruit(pears) ::: The pears.\nMoreExpensive(oranges, mangoes) ::: The oranges are more expensive than the mangoes.\nCheapest(plums) ::: The plums are the cheapest.\nMoreExpensive(mangoes, apples) ::: The apples are less expensive than the mangoes.\nMoreExpensive(pears, oranges) ::: The pears are more expensive than the oranges.\n\u2200x \u2200y \u2200z (MoreExpensive(x, y) \u2227 MoreExpensive(y, z) \u2192 MoreExpensive(x, z)) ::: Transitivity of MoreExpensive.\n\u2200x (Cheapest(x) \u2192 \u2200y (x \u2260 y \u2192 \u00acMoreExpensive(x, y))) ::: If x is the cheapest, then x is not more expensive than any other fruit.\nConclusion:\nCheapest(apples) ::: Option A\nCheapest(mangoes) ::: Option B\nCheapest(oranges) ::: Option C\nCheapest(plums) ::: Option D\nCheapest(pears) ::: Option E",
                "SAT": "# Declarations\nFruit = EnumSort([Apples, Mangoes, Oranges, Plums, Pears])\nprice = Function([Fruit] -> [IntSort()])\n# Constraints\nForAll([x:Fruit, y:Fruit], Implies(And(x != y, price(x) > price(y)), Not(Cheapest(x)))) ::: If x is more expensive than y, x cannot be cheapest\nprice(Oranges) > price(Mangoes) ::: The oranges are more expensive than the mangoes.\nprice(Plums) == 0 ::: The plums are the cheapest (assigned lowest price).\nprice(Apples) < price(Mangoes) ::: The apples are less expensive than the mangoes.\nprice(Pears) > price(Oranges) ::: The pears are more expensive than the oranges.\nForAll([x:Fruit], Implies(Cheapest(x), ForAll([y:Fruit], Implies(x != y, price(x) < price(y))))) ::: Cheapest fruit has strictly lowest price\n# Options\nis_valid(price(Apples) == 0) ::: A) The apples are the cheapest.\nis_valid(price(Mangoes) == 0) ::: B) The mangoes are the cheapest.\nis_valid(price(Oranges) == 0) ::: C) The oranges are the cheapest.\nis_valid(price(Plums) == 0) ::: D) The plums are the cheapest.\nis_valid(price(Pears) == 0) ::: E) The pears are the cheapest."
            }
        ]
    },
    {
        "id": "logical_deduction_14",
        "context": "The following paragraphs each describe a set of five objects arranged in a fixed order. The statements are logically consistent within each paragraph.\n\nA fruit stand sells five fruits: mangoes, kiwis, plums, pears, and watermelons. The kiwis are less expensive than the plums. The pears are the third-most expensive. The kiwis are the second-cheapest. The watermelons are the most expensive.",
        "question": "Which of the following is true?",
        "options": [
            "A) The mangoes are the third-most expensive.",
            "B) The kiwis are the third-most expensive.",
            "C) The plums are the third-most expensive.",
            "D) The pears are the third-most expensive.",
            "E) The watermelons are the third-most expensive."
        ],
        "answer": "D",
        "chat_history": [
            {
                "role": "LP translator",
                "content": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nExpensiveRank($x, $n, bool)      ::: Fruit $x is the $n-th most expensive (1 being most expensive).\nFacts:\nFruit(mangoes, True)             ::: The mangoes.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(plums, True)               ::: The plums.\nFruit(pears, True)               ::: The pears.\nFruit(watermelons, True)         ::: The watermelons.\nCheaper(kiwis, plums, True)      ::: The kiwis are less expensive than the plums.\nExpensiveRank(pears, 3, True)    ::: The pears are the third-most expensive.\nExpensiveRank(kiwis, 4, True)    ::: The kiwis are the second-cheapest (i.e., fourth-most expensive).\nExpensiveRank(watermelons, 1, True) ::: The watermelons are the most expensive.\nRules:\nCheaper($a, $b, True) >>> ExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n > $m ::: If $a is cheaper than $b, then $a's expensive rank is higher (less expensive) than $b's.\nExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n < $m >>> Cheaper($b, $a, True) ::: If $a's expensive rank is lower (more expensive) than $b's, then $b is cheaper than $a.\nQuery:\nExpensiveRank(mangoes, 3, True)  ::: Option A\nExpensiveRank(kiwis, 3, True)    ::: Option B\nExpensiveRank(plums, 3, True)    ::: Option C\nExpensiveRank(pears, 3, True)    ::: Option D\nExpensiveRank(watermelons, 3, True) ::: Option E"
            },
            {
                "role": "FOL translator",
                "content": "Predicates:\nRank(fruit, pos) ::: fruit has price position pos, where pos \u2208 {one,two,three,four,five}; one = most expensive, five = cheapest.\nCheaper(x, y) ::: x is cheaper (less expensive) than y.\nPremises:\nRank(watermelons, one) ::: Watermelons are the most expensive.\nRank(pears, three) ::: Pears are the third-most expensive.\nRank(kiwis, four) ::: Kiwis are the second-cheapest.\nCheaper(kiwis, plums) ::: Kiwis are cheaper than plums.\n\u2200F \u2200P \u2200Q ((Rank(F,P) \u2227 Rank(F,Q)) \u2192 (P = Q)) ::: One rank per fruit.\n\u2200P \u2200F \u2200G ((Rank(F,P) \u2227 Rank(G,P)) \u2192 (F = G)) ::: One fruit per rank.\nRank(mangoes, one) \u2228 Rank(mangoes, two) \u2228 Rank(mangoes, three) \u2228 Rank(mangoes, four) \u2228 Rank(mangoes, five) ::: Mangoes occupy some rank.\nRank(plums, one) \u2228 Rank(plums, two) \u2228 Rank(plums, three) \u2228 Rank(plums, four) \u2228 Rank(plums, five) ::: Plums occupy some rank.\n\u2200X \u2200Y (Cheaper(X, Y) \u2194 (Rank(X, P) \u2227 Rank(Y, Q) \u2227 (Q < P))) ::: \"Cheaper\" is defined by rank comparison.\n\u2200X \u2200Y (Cheaper(X, Y) \u2192 \u00acCheaper(Y, X)) ::: \"Cheaper\" is asymmetric.\nConclusion:\nRank(mangoes, three) ::: Option A.\nRank(kiwis, three) ::: Option B.\nRank(plums, three) ::: Option C.\nRank(pears, three) ::: Option D.\nRank(watermelons, three) ::: Option E."
            },
            {
                "role": "SAT translator",
                "content": "# Declarations\nfruits = EnumSort([Mangoes, Kiwis, Plums, Pears, Watermelons])\nranks = IntSort([1, 2, 3, 4, 5])\nrank = Function([fruits] -> [ranks])\n# Constraints\nDistinct([f:fruits], rank(f)) ::: Each fruit has a unique rank\nrank(Kiwis) < rank(Plums) ::: The kiwis are less expensive than the plums.\nrank(Pears) == 3 ::: The pears are the third-most expensive.\nrank(Kiwis) == 4 ::: The kiwis are the second-cheapest (fourth-most expensive).\nrank(Watermelons) == 1 ::: The watermelons are the most expensive.\n# Options\nis_valid(rank(Mangoes) == 3) ::: A) The mangoes are the third-most expensive.\nis_valid(rank(Kiwis) == 3) ::: B) The kiwis are the third-most expensive.\nis_valid(rank(Plums) == 3) ::: C) The plums are the third-most expensive.\nis_valid(rank(Pears) == 3) ::: D) The pears are the third-most expensive.\nis_valid(rank(Watermelons) == 3) ::: E) The watermelons are the third-most expensive."
            }
        ],
        "translation": [
            {
                "LP": "Predicates:\nFruit($x, bool)                  ::: $x is one of the five fruits.\nCheaper($x, $y, bool)            ::: Fruit $x is cheaper than fruit $y.\nExpensiveRank($x, $n, bool)      ::: Fruit $x is the $n-th most expensive (1 being most expensive).\nFacts:\nFruit(mangoes, True)             ::: The mangoes.\nFruit(kiwis, True)               ::: The kiwis.\nFruit(plums, True)               ::: The plums.\nFruit(pears, True)               ::: The pears.\nFruit(watermelons, True)         ::: The watermelons.\nCheaper(kiwis, plums, True)      ::: The kiwis are less expensive than the plums.\nExpensiveRank(pears, 3, True)    ::: The pears are the third-most expensive.\nExpensiveRank(kiwis, 4, True)    ::: The kiwis are the second-cheapest (i.e., fourth-most expensive).\nExpensiveRank(watermelons, 1, True) ::: The watermelons are the most expensive.\nRules:\nCheaper($a, $b, True) >>> ExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n > $m ::: If $a is cheaper than $b, then $a's expensive rank is higher (less expensive) than $b's.\nExpensiveRank($a, $n, True) && ExpensiveRank($b, $m, True) && $n < $m >>> Cheaper($b, $a, True) ::: If $a's expensive rank is lower (more expensive) than $b's, then $b is cheaper than $a.\nQuery:\nExpensiveRank(mangoes, 3, True)  ::: Option A\nExpensiveRank(kiwis, 3, True)    ::: Option B\nExpensiveRank(plums, 3, True)    ::: Option C\nExpensiveRank(pears, 3, True)    ::: Option D\nExpensiveRank(watermelons, 3, True) ::: Option E",
                "FOL": "Predicates:\nRank(fruit, pos) ::: fruit has price position pos, where pos \u2208 {one,two,three,four,five}; one = most expensive, five = cheapest.\nCheaper(x, y) ::: x is cheaper (less expensive) than y.\nPremises:\nRank(watermelons, one) ::: Watermelons are the most expensive.\nRank(pears, three) ::: Pears are the third-most expensive.\nRank(kiwis, four) ::: Kiwis are the second-cheapest.\nCheaper(kiwis, plums) ::: Kiwis are cheaper than plums.\n\u2200F \u2200P \u2200Q ((Rank(F,P) \u2227 Rank(F,Q)) \u2192 (P = Q)) ::: One rank per fruit.\n\u2200P \u2200F \u2200G ((Rank(F,P) \u2227 Rank(G,P)) \u2192 (F = G)) ::: One fruit per rank.\nRank(mangoes, one) \u2228 Rank(mangoes, two) \u2228 Rank(mangoes, three) \u2228 Rank(mangoes, four) \u2228 Rank(mangoes, five) ::: Mangoes occupy some rank.\nRank(plums, one) \u2228 Rank(plums, two) \u2228 Rank(plums, three) \u2228 Rank(plums, four) \u2228 Rank(plums, five) ::: Plums occupy some rank.\n\u2200X \u2200Y (Cheaper(X, Y) \u2194 (Rank(X, P) \u2227 Rank(Y, Q) \u2227 (Q < P))) ::: \"Cheaper\" is defined by rank comparison.\n\u2200X \u2200Y (Cheaper(X, Y) \u2192 \u00acCheaper(Y, X)) ::: \"Cheaper\" is asymmetric.\nConclusion:\nRank(mangoes, three) ::: Option A.\nRank(kiwis, three) ::: Option B.\nRank(plums, three) ::: Option C.\nRank(pears, three) ::: Option D.\nRank(watermelons, three) ::: Option E.",
                "SAT": "# Declarations\nfruits = EnumSort([Mangoes, Kiwis, Plums, Pears, Watermelons])\nranks = IntSort([1, 2, 3, 4, 5])\nrank = Function([fruits] -> [ranks])\n# Constraints\nDistinct([f:fruits], rank(f)) ::: Each fruit has a unique rank\nrank(Kiwis) < rank(Plums) ::: The kiwis are less expensive than the plums.\nrank(Pears) == 3 ::: The pears are the third-most expensive.\nrank(Kiwis) == 4 ::: The kiwis are the second-cheapest (fourth-most expensive).\nrank(Watermelons) == 1 ::: The watermelons are the most expensive.\n# Options\nis_valid(rank(Mangoes) == 3) ::: A) The mangoes are the third-most expensive.\nis_valid(rank(Kiwis) == 3) ::: B) The kiwis are the third-most expensive.\nis_valid(rank(Plums) == 3) ::: C) The plums are the third-most expensive.\nis_valid(rank(Pears) == 3) ::: D) The pears are the third-most expensive.\nis_valid(rank(Watermelons) == 3) ::: E) The watermelons are the third-most expensive."
            }
        ]
    }
]